
2025 C LAB FINAL 3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c44  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08000dd8  08000dd8  00001dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f64  08000f64  0000207c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000f64  08000f64  00001f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000f6c  08000f6c  0000207c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f6c  08000f6c  00001f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f70  08000f70  00001f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08000f74  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000207c  2**0
                  CONTENTS
 10 .bss          00000550  2000007c  2000007c  0000207c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005cc  200005cc  0000207c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000207c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002340  00000000  00000000  000020ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000803  00000000  00000000  000043ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000188  00000000  00000000  00004bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000113  00000000  00000000  00004d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015e30  00000000  00000000  00004e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001cb2  00000000  00000000  0001acbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076ed3  00000000  00000000  0001c96d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00093840  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000710  00000000  00000000  00093884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00093f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000007c 	.word	0x2000007c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000dc0 	.word	0x08000dc0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000080 	.word	0x20000080
 80001d0:	08000dc0 	.word	0x08000dc0

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	db0b      	blt.n	800020e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 021f 	and.w	r2, r3, #31
 80001fc:	4907      	ldr	r1, [pc, #28]	@ (800021c <__NVIC_EnableIRQ+0x38>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	095b      	lsrs	r3, r3, #5
 8000204:	2001      	movs	r0, #1
 8000206:	fa00 f202 	lsl.w	r2, r0, r2
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000e100 	.word	0xe000e100

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	db0a      	blt.n	800024a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	490c      	ldr	r1, [pc, #48]	@ (800026c <__NVIC_SetPriority+0x4c>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000248:	e00a      	b.n	8000260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4908      	ldr	r1, [pc, #32]	@ (8000270 <__NVIC_SetPriority+0x50>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f003 030f 	and.w	r3, r3, #15
 8000256:	3b04      	subs	r3, #4
 8000258:	0112      	lsls	r2, r2, #4
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	440b      	add	r3, r1
 800025e:	761a      	strb	r2, [r3, #24]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <dio_init>:
#include "dio.h"

static void (*button_callback)(void) = 0;
static uint8_t led_state = 0;

void dio_init(void (*callback)(void)) {
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
    // Save the button callback
    button_callback = callback;
 800027c:	4a25      	ldr	r2, [pc, #148]	@ (8000314 <dio_init+0xa0>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	6013      	str	r3, [r2, #0]

    // Enable clocks for GPIOA (button) and GPIOE (LEDs)
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOEEN;
 8000282:	4b25      	ldr	r3, [pc, #148]	@ (8000318 <dio_init+0xa4>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	4a24      	ldr	r2, [pc, #144]	@ (8000318 <dio_init+0xa4>)
 8000288:	f443 1308 	orr.w	r3, r3, #2228224	@ 0x220000
 800028c:	6153      	str	r3, [r2, #20]

    // Set PE8–PE15 as outputs
    for (int i = 8; i <= 15; i++) {
 800028e:	2308      	movs	r3, #8
 8000290:	60fb      	str	r3, [r7, #12]
 8000292:	e019      	b.n	80002c8 <dio_init+0x54>
        GPIOE->MODER &= ~(3 << (2 * i));  // Clear
 8000294:	4b21      	ldr	r3, [pc, #132]	@ (800031c <dio_init+0xa8>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	68fa      	ldr	r2, [r7, #12]
 800029a:	0052      	lsls	r2, r2, #1
 800029c:	2103      	movs	r1, #3
 800029e:	fa01 f202 	lsl.w	r2, r1, r2
 80002a2:	43d2      	mvns	r2, r2
 80002a4:	4611      	mov	r1, r2
 80002a6:	4a1d      	ldr	r2, [pc, #116]	@ (800031c <dio_init+0xa8>)
 80002a8:	400b      	ands	r3, r1
 80002aa:	6013      	str	r3, [r2, #0]
        GPIOE->MODER |=  (1 << (2 * i));  // Output
 80002ac:	4b1b      	ldr	r3, [pc, #108]	@ (800031c <dio_init+0xa8>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	68fa      	ldr	r2, [r7, #12]
 80002b2:	0052      	lsls	r2, r2, #1
 80002b4:	2101      	movs	r1, #1
 80002b6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ba:	4611      	mov	r1, r2
 80002bc:	4a17      	ldr	r2, [pc, #92]	@ (800031c <dio_init+0xa8>)
 80002be:	430b      	orrs	r3, r1
 80002c0:	6013      	str	r3, [r2, #0]
    for (int i = 8; i <= 15; i++) {
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	3301      	adds	r3, #1
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	2b0f      	cmp	r3, #15
 80002cc:	dde2      	ble.n	8000294 <dio_init+0x20>
    }

    // Enable SYSCFG for EXTI
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002ce:	4b12      	ldr	r3, [pc, #72]	@ (8000318 <dio_init+0xa4>)
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	4a11      	ldr	r2, [pc, #68]	@ (8000318 <dio_init+0xa4>)
 80002d4:	f043 0301 	orr.w	r3, r3, #1
 80002d8:	6193      	str	r3, [r2, #24]

    // Configure PA0 as EXTI0
    SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0;  // 0 = PA0
 80002da:	4b11      	ldr	r3, [pc, #68]	@ (8000320 <dio_init+0xac>)
 80002dc:	689b      	ldr	r3, [r3, #8]
 80002de:	4a10      	ldr	r2, [pc, #64]	@ (8000320 <dio_init+0xac>)
 80002e0:	f023 030f 	bic.w	r3, r3, #15
 80002e4:	6093      	str	r3, [r2, #8]

    EXTI->RTSR |= EXTI_RTSR_TR0;
 80002e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000324 <dio_init+0xb0>)
 80002e8:	689b      	ldr	r3, [r3, #8]
 80002ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000324 <dio_init+0xb0>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6093      	str	r3, [r2, #8]
    EXTI->IMR  |= EXTI_IMR_MR0;
 80002f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000324 <dio_init+0xb0>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000324 <dio_init+0xb0>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	6013      	str	r3, [r2, #0]

    NVIC_SetPriority(EXTI0_IRQn, 1);
 80002fe:	2101      	movs	r1, #1
 8000300:	2006      	movs	r0, #6
 8000302:	f7ff ff8d 	bl	8000220 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);
 8000306:	2006      	movs	r0, #6
 8000308:	f7ff ff6c 	bl	80001e4 <__NVIC_EnableIRQ>
}
 800030c:	bf00      	nop
 800030e:	3710      	adds	r7, #16
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000098 	.word	0x20000098
 8000318:	40021000 	.word	0x40021000
 800031c:	48001000 	.word	0x48001000
 8000320:	40010000 	.word	0x40010000
 8000324:	40010400 	.word	0x40010400

08000328 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
    if (button_callback) {
 800032c:	4b07      	ldr	r3, [pc, #28]	@ (800034c <EXTI0_IRQHandler+0x24>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d002      	beq.n	800033a <EXTI0_IRQHandler+0x12>
        button_callback();
 8000334:	4b05      	ldr	r3, [pc, #20]	@ (800034c <EXTI0_IRQHandler+0x24>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4798      	blx	r3
    }
    EXTI->PR |= EXTI_PR_PR0;
 800033a:	4b05      	ldr	r3, [pc, #20]	@ (8000350 <EXTI0_IRQHandler+0x28>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	4a04      	ldr	r2, [pc, #16]	@ (8000350 <EXTI0_IRQHandler+0x28>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	6153      	str	r3, [r2, #20]
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000098 	.word	0x20000098
 8000350:	40010400 	.word	0x40010400

08000354 <dio_setLED>:

void dio_setLED(int index, bool state) {
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	460b      	mov	r3, r1
 800035e:	70fb      	strb	r3, [r7, #3]
    if (index < 0 || index > 7) return;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	2b00      	cmp	r3, #0
 8000364:	db37      	blt.n	80003d6 <dio_setLED+0x82>
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	2b07      	cmp	r3, #7
 800036a:	dc34      	bgt.n	80003d6 <dio_setLED+0x82>

    uint16_t bit = 1 << (8 + index);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3308      	adds	r3, #8
 8000370:	2201      	movs	r2, #1
 8000372:	fa02 f303 	lsl.w	r3, r2, r3
 8000376:	81fb      	strh	r3, [r7, #14]

    if (state) {
 8000378:	78fb      	ldrb	r3, [r7, #3]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d013      	beq.n	80003a6 <dio_setLED+0x52>
        GPIOE->ODR |= bit;
 800037e:	4b19      	ldr	r3, [pc, #100]	@ (80003e4 <dio_setLED+0x90>)
 8000380:	695a      	ldr	r2, [r3, #20]
 8000382:	89fb      	ldrh	r3, [r7, #14]
 8000384:	4917      	ldr	r1, [pc, #92]	@ (80003e4 <dio_setLED+0x90>)
 8000386:	4313      	orrs	r3, r2
 8000388:	614b      	str	r3, [r1, #20]
        led_state |= (1 << index);
 800038a:	2201      	movs	r2, #1
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	fa02 f303 	lsl.w	r3, r2, r3
 8000392:	b25a      	sxtb	r2, r3
 8000394:	4b14      	ldr	r3, [pc, #80]	@ (80003e8 <dio_setLED+0x94>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	b25b      	sxtb	r3, r3
 800039a:	4313      	orrs	r3, r2
 800039c:	b25b      	sxtb	r3, r3
 800039e:	b2da      	uxtb	r2, r3
 80003a0:	4b11      	ldr	r3, [pc, #68]	@ (80003e8 <dio_setLED+0x94>)
 80003a2:	701a      	strb	r2, [r3, #0]
 80003a4:	e018      	b.n	80003d8 <dio_setLED+0x84>
    } else {
        GPIOE->ODR &= ~bit;
 80003a6:	4b0f      	ldr	r3, [pc, #60]	@ (80003e4 <dio_setLED+0x90>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	89fa      	ldrh	r2, [r7, #14]
 80003ac:	43d2      	mvns	r2, r2
 80003ae:	4611      	mov	r1, r2
 80003b0:	4a0c      	ldr	r2, [pc, #48]	@ (80003e4 <dio_setLED+0x90>)
 80003b2:	400b      	ands	r3, r1
 80003b4:	6153      	str	r3, [r2, #20]
        led_state &= ~(1 << index);
 80003b6:	2201      	movs	r2, #1
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	fa02 f303 	lsl.w	r3, r2, r3
 80003be:	b25b      	sxtb	r3, r3
 80003c0:	43db      	mvns	r3, r3
 80003c2:	b25a      	sxtb	r2, r3
 80003c4:	4b08      	ldr	r3, [pc, #32]	@ (80003e8 <dio_setLED+0x94>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	b25b      	sxtb	r3, r3
 80003ca:	4013      	ands	r3, r2
 80003cc:	b25b      	sxtb	r3, r3
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b05      	ldr	r3, [pc, #20]	@ (80003e8 <dio_setLED+0x94>)
 80003d2:	701a      	strb	r2, [r3, #0]
 80003d4:	e000      	b.n	80003d8 <dio_setLED+0x84>
    if (index < 0 || index > 7) return;
 80003d6:	bf00      	nop
    }
}
 80003d8:	3714      	adds	r7, #20
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	48001000 	.word	0x48001000
 80003e8:	2000009c 	.word	0x2000009c

080003ec <dio_toggleLED>:

void dio_toggleLED(int index) {
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
    if (index < 0 || index > 7) return;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db1c      	blt.n	8000434 <dio_toggleLED+0x48>
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2b07      	cmp	r3, #7
 80003fe:	dc19      	bgt.n	8000434 <dio_toggleLED+0x48>

    uint16_t bit = 1 << (8 + index);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3308      	adds	r3, #8
 8000404:	2201      	movs	r2, #1
 8000406:	fa02 f303 	lsl.w	r3, r2, r3
 800040a:	81fb      	strh	r3, [r7, #14]
    GPIOE->ODR ^= bit;
 800040c:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <dio_toggleLED+0x54>)
 800040e:	695a      	ldr	r2, [r3, #20]
 8000410:	89fb      	ldrh	r3, [r7, #14]
 8000412:	490b      	ldr	r1, [pc, #44]	@ (8000440 <dio_toggleLED+0x54>)
 8000414:	4053      	eors	r3, r2
 8000416:	614b      	str	r3, [r1, #20]
    led_state ^= (1 << index);
 8000418:	2201      	movs	r2, #1
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	fa02 f303 	lsl.w	r3, r2, r3
 8000420:	b25a      	sxtb	r2, r3
 8000422:	4b08      	ldr	r3, [pc, #32]	@ (8000444 <dio_toggleLED+0x58>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	b25b      	sxtb	r3, r3
 8000428:	4053      	eors	r3, r2
 800042a:	b25b      	sxtb	r3, r3
 800042c:	b2da      	uxtb	r2, r3
 800042e:	4b05      	ldr	r3, [pc, #20]	@ (8000444 <dio_toggleLED+0x58>)
 8000430:	701a      	strb	r2, [r3, #0]
 8000432:	e000      	b.n	8000436 <dio_toggleLED+0x4a>
    if (index < 0 || index > 7) return;
 8000434:	bf00      	nop
}
 8000436:	3714      	adds	r7, #20
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	48001000 	.word	0x48001000
 8000444:	2000009c 	.word	0x2000009c

08000448 <process_led_command>:
static void on_timer_callback(void);
static void flash_led_once(void);


static void process_led_command(const char *operand)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b086      	sub	sp, #24
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
    size_t len = strlen(operand);
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f7ff febf 	bl	80001d4 <strlen>
 8000456:	60f8      	str	r0, [r7, #12]
    if (len == 0 || len > 8) return;
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d030      	beq.n	80004c0 <process_led_command+0x78>
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	2b08      	cmp	r3, #8
 8000462:	d82d      	bhi.n	80004c0 <process_led_command+0x78>

    for (int i = 0; i < 8; ++i) {
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]
 8000468:	e026      	b.n	80004b8 <process_led_command+0x70>
        bool bit = 0;
 800046a:	2300      	movs	r3, #0
 800046c:	74fb      	strb	r3, [r7, #19]
        int src = (int)len - 1 - i;
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	1e5a      	subs	r2, r3, #1
 8000472:	697b      	ldr	r3, [r7, #20]
 8000474:	1ad3      	subs	r3, r2, r3
 8000476:	60bb      	str	r3, [r7, #8]
        if (src >= 0 && (operand[src] == '1' || operand[src] == '0'))
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	2b00      	cmp	r3, #0
 800047c:	db14      	blt.n	80004a8 <process_led_command+0x60>
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	4413      	add	r3, r2
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	2b31      	cmp	r3, #49	@ 0x31
 8000488:	d005      	beq.n	8000496 <process_led_command+0x4e>
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	687a      	ldr	r2, [r7, #4]
 800048e:	4413      	add	r3, r2
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b30      	cmp	r3, #48	@ 0x30
 8000494:	d108      	bne.n	80004a8 <process_led_command+0x60>
            bit = (operand[src] == '1');
 8000496:	68bb      	ldr	r3, [r7, #8]
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	4413      	add	r3, r2
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b31      	cmp	r3, #49	@ 0x31
 80004a0:	bf0c      	ite	eq
 80004a2:	2301      	moveq	r3, #1
 80004a4:	2300      	movne	r3, #0
 80004a6:	74fb      	strb	r3, [r7, #19]
        dio_setLED(i, bit);
 80004a8:	7cfb      	ldrb	r3, [r7, #19]
 80004aa:	4619      	mov	r1, r3
 80004ac:	6978      	ldr	r0, [r7, #20]
 80004ae:	f7ff ff51 	bl	8000354 <dio_setLED>
    for (int i = 0; i < 8; ++i) {
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	3301      	adds	r3, #1
 80004b6:	617b      	str	r3, [r7, #20]
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	2b07      	cmp	r3, #7
 80004bc:	ddd5      	ble.n	800046a <process_led_command+0x22>
 80004be:	e000      	b.n	80004c2 <process_led_command+0x7a>
    if (len == 0 || len > 8) return;
 80004c0:	bf00      	nop
    }
}
 80004c2:	3718      	adds	r7, #24
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <process_serial_command>:


static void process_serial_command(const char *operand)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
    SerialOutputString((uint8_t *)operand, &USART1_PORT);
 80004d0:	4905      	ldr	r1, [pc, #20]	@ (80004e8 <process_serial_command+0x20>)
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f000 f97d 	bl	80007d2 <SerialOutputString>
    SerialOutputString((uint8_t *)"\r\n",   &USART1_PORT);
 80004d8:	4903      	ldr	r1, [pc, #12]	@ (80004e8 <process_serial_command+0x20>)
 80004da:	4804      	ldr	r0, [pc, #16]	@ (80004ec <process_serial_command+0x24>)
 80004dc:	f000 f979 	bl	80007d2 <SerialOutputString>
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000004 	.word	0x20000004
 80004ec:	08000dd8 	.word	0x08000dd8

080004f0 <process_timer_command>:


static void process_timer_command(const char *operand)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
    int period_ms = atoi(operand);
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f000 fb8e 	bl	8000c1a <atoi>
 80004fe:	60f8      	str	r0, [r7, #12]
    if (period_ms > 0)
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	2b00      	cmp	r3, #0
 8000504:	dd04      	ble.n	8000510 <process_timer_command+0x20>
        timer_init((uint32_t)period_ms, on_timer_callback);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	4903      	ldr	r1, [pc, #12]	@ (8000518 <process_timer_command+0x28>)
 800050a:	4618      	mov	r0, r3
 800050c:	f000 faec 	bl	8000ae8 <timer_init>
}
 8000510:	bf00      	nop
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	08000549 	.word	0x08000549

0800051c <process_oneshot_command>:


static void process_oneshot_command(const char *operand)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
    int delay_ms = atoi(operand);
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f000 fb78 	bl	8000c1a <atoi>
 800052a:	60f8      	str	r0, [r7, #12]
    if (delay_ms > 0)
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	2b00      	cmp	r3, #0
 8000530:	dd04      	ble.n	800053c <process_oneshot_command+0x20>
        timer_oneshot((uint32_t)delay_ms, flash_led_once);
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	4903      	ldr	r1, [pc, #12]	@ (8000544 <process_oneshot_command+0x28>)
 8000536:	4618      	mov	r0, r3
 8000538:	f000 fb00 	bl	8000b3c <timer_oneshot>
}
 800053c:	bf00      	nop
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	08000559 	.word	0x08000559

08000548 <on_timer_callback>:


static void on_timer_callback(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
    dio_toggleLED(0);
 800054c:	2000      	movs	r0, #0
 800054e:	f7ff ff4d 	bl	80003ec <dio_toggleLED>
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <flash_led_once>:


static void flash_led_once(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
    dio_setLED(0, true);
 800055e:	2101      	movs	r1, #1
 8000560:	2000      	movs	r0, #0
 8000562:	f7ff fef7 	bl	8000354 <dio_setLED>
    for (volatile uint32_t i = 0; i < 400000; ++i) { __NOP(); }
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	e003      	b.n	8000574 <flash_led_once+0x1c>
 800056c:	bf00      	nop
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	3301      	adds	r3, #1
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4a05      	ldr	r2, [pc, #20]	@ (800058c <flash_led_once+0x34>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d9f7      	bls.n	800056c <flash_led_once+0x14>
    dio_setLED(0, false);
 800057c:	2100      	movs	r1, #0
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff fee8 	bl	8000354 <dio_setLED>
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	00061a7f 	.word	0x00061a7f

08000590 <on_receive_done>:


void on_receive_done(char *data, uint32_t len)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
    last_received_length = (uint16_t)len;
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	b29a      	uxth	r2, r3
 800059e:	4b22      	ldr	r3, [pc, #136]	@ (8000628 <on_receive_done+0x98>)
 80005a0:	801a      	strh	r2, [r3, #0]
    while (*data == ' ') ++data;
 80005a2:	e002      	b.n	80005aa <on_receive_done+0x1a>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3301      	adds	r3, #1
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b20      	cmp	r3, #32
 80005b0:	d0f8      	beq.n	80005a4 <on_receive_done+0x14>

    if (strncasecmp(data, "led ", 4) == 0)
 80005b2:	2204      	movs	r2, #4
 80005b4:	491d      	ldr	r1, [pc, #116]	@ (800062c <on_receive_done+0x9c>)
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f000 fbb8 	bl	8000d2c <strncasecmp>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d105      	bne.n	80005ce <on_receive_done+0x3e>
        process_led_command(data + 4);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	3304      	adds	r3, #4
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff ff3e 	bl	8000448 <process_led_command>
        process_serial_command(data + 7);
    else if (strncasecmp(data, "timer ", 6) == 0)
        process_timer_command(data + 6);
    else if (strncasecmp(data, "oneshot ", 8) == 0)
        process_oneshot_command(data + 8);
}
 80005cc:	e028      	b.n	8000620 <on_receive_done+0x90>
    else if (strncasecmp(data, "serial ", 7) == 0)
 80005ce:	2207      	movs	r2, #7
 80005d0:	4917      	ldr	r1, [pc, #92]	@ (8000630 <on_receive_done+0xa0>)
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f000 fbaa 	bl	8000d2c <strncasecmp>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d105      	bne.n	80005ea <on_receive_done+0x5a>
        process_serial_command(data + 7);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3307      	adds	r3, #7
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff ff70 	bl	80004c8 <process_serial_command>
}
 80005e8:	e01a      	b.n	8000620 <on_receive_done+0x90>
    else if (strncasecmp(data, "timer ", 6) == 0)
 80005ea:	2206      	movs	r2, #6
 80005ec:	4911      	ldr	r1, [pc, #68]	@ (8000634 <on_receive_done+0xa4>)
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f000 fb9c 	bl	8000d2c <strncasecmp>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d105      	bne.n	8000606 <on_receive_done+0x76>
        process_timer_command(data + 6);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	3306      	adds	r3, #6
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ff76 	bl	80004f0 <process_timer_command>
}
 8000604:	e00c      	b.n	8000620 <on_receive_done+0x90>
    else if (strncasecmp(data, "oneshot ", 8) == 0)
 8000606:	2208      	movs	r2, #8
 8000608:	490b      	ldr	r1, [pc, #44]	@ (8000638 <on_receive_done+0xa8>)
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 fb8e 	bl	8000d2c <strncasecmp>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d104      	bne.n	8000620 <on_receive_done+0x90>
        process_oneshot_command(data + 8);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	3308      	adds	r3, #8
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ff7e 	bl	800051c <process_oneshot_command>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000009e 	.word	0x2000009e
 800062c:	08000ddc 	.word	0x08000ddc
 8000630:	08000de4 	.word	0x08000de4
 8000634:	08000dec 	.word	0x08000dec
 8000638:	08000df4 	.word	0x08000df4

0800063c <main>:

int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
    dio_init(NULL);
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff fe17 	bl	8000274 <dio_init>
    SerialInitialise(BAUD_115200, &USART1_PORT, on_receive_done);
 8000646:	4a06      	ldr	r2, [pc, #24]	@ (8000660 <main+0x24>)
 8000648:	4906      	ldr	r1, [pc, #24]	@ (8000664 <main+0x28>)
 800064a:	2004      	movs	r0, #4
 800064c:	f000 f8f0 	bl	8000830 <SerialInitialise>
    SerialSetTermChar('#');
 8000650:	2023      	movs	r0, #35	@ 0x23
 8000652:	f000 f973 	bl	800093c <SerialSetTermChar>
    SerialPrintPrompt(&USART1_PORT);
 8000656:	4803      	ldr	r0, [pc, #12]	@ (8000664 <main+0x28>)
 8000658:	f000 f8d2 	bl	8000800 <SerialPrintPrompt>

    while (1) {
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <main+0x20>
 8000660:	08000591 	.word	0x08000591
 8000664:	20000004 	.word	0x20000004

08000668 <__NVIC_EnableIRQ>:
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	2b00      	cmp	r3, #0
 8000678:	db0b      	blt.n	8000692 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	f003 021f 	and.w	r2, r3, #31
 8000680:	4907      	ldr	r1, [pc, #28]	@ (80006a0 <__NVIC_EnableIRQ+0x38>)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	095b      	lsrs	r3, r3, #5
 8000688:	2001      	movs	r0, #1
 800068a:	fa00 f202 	lsl.w	r2, r0, r2
 800068e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000e100 	.word	0xe000e100

080006a4 <__NVIC_SetPriority>:
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	6039      	str	r1, [r7, #0]
 80006ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	db0a      	blt.n	80006ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	490c      	ldr	r1, [pc, #48]	@ (80006f0 <__NVIC_SetPriority+0x4c>)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	0112      	lsls	r2, r2, #4
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	440b      	add	r3, r1
 80006c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80006cc:	e00a      	b.n	80006e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4908      	ldr	r1, [pc, #32]	@ (80006f4 <__NVIC_SetPriority+0x50>)
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	f003 030f 	and.w	r3, r3, #15
 80006da:	3b04      	subs	r3, #4
 80006dc:	0112      	lsls	r2, r2, #4
 80006de:	b2d2      	uxtb	r2, r2
 80006e0:	440b      	add	r3, r1
 80006e2:	761a      	strb	r2, [r3, #24]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000e100 	.word	0xe000e100
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <handle_rx_char>:
    0x00
};


static void handle_rx_char(char c, SerialPort *serial_port)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	71fb      	strb	r3, [r7, #7]

    SerialOutputChar((uint8_t)c, serial_port);
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	6839      	ldr	r1, [r7, #0]
 8000708:	4618      	mov	r0, r3
 800070a:	f000 f849 	bl	80007a0 <SerialOutputChar>


    if (rx_index < BUFFER_SIZE - 1) {
 800070e:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <handle_rx_char+0x94>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8000716:	4293      	cmp	r3, r2
 8000718:	d80f      	bhi.n	800073a <handle_rx_char+0x42>
        rx_buffer[rx_index++] = (uint8_t)c;
 800071a:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <handle_rx_char+0x94>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	1c5a      	adds	r2, r3, #1
 8000720:	b291      	uxth	r1, r2
 8000722:	4a1a      	ldr	r2, [pc, #104]	@ (800078c <handle_rx_char+0x94>)
 8000724:	8011      	strh	r1, [r2, #0]
 8000726:	4619      	mov	r1, r3
 8000728:	4a19      	ldr	r2, [pc, #100]	@ (8000790 <handle_rx_char+0x98>)
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	5453      	strb	r3, [r2, r1]
        rx_index = 0;
        return;
    }


    if (c == term_char) {
 800072e:	4b19      	ldr	r3, [pc, #100]	@ (8000794 <handle_rx_char+0x9c>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	79fa      	ldrb	r2, [r7, #7]
 8000734:	429a      	cmp	r2, r3
 8000736:	d125      	bne.n	8000784 <handle_rx_char+0x8c>
 8000738:	e007      	b.n	800074a <handle_rx_char+0x52>
        SerialOutputString((uint8_t *)"[ERROR] Buffer Overflow!\r\n", serial_port);
 800073a:	6839      	ldr	r1, [r7, #0]
 800073c:	4816      	ldr	r0, [pc, #88]	@ (8000798 <handle_rx_char+0xa0>)
 800073e:	f000 f848 	bl	80007d2 <SerialOutputString>
        rx_index = 0;
 8000742:	4b12      	ldr	r3, [pc, #72]	@ (800078c <handle_rx_char+0x94>)
 8000744:	2200      	movs	r2, #0
 8000746:	801a      	strh	r2, [r3, #0]
        return;
 8000748:	e01c      	b.n	8000784 <handle_rx_char+0x8c>
        rx_buffer[rx_index - 1] = '\0';
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <handle_rx_char+0x94>)
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	3b01      	subs	r3, #1
 8000750:	4a0f      	ldr	r2, [pc, #60]	@ (8000790 <handle_rx_char+0x98>)
 8000752:	2100      	movs	r1, #0
 8000754:	54d1      	strb	r1, [r2, r3]
        SerialOutputString(rx_buffer, serial_port);
 8000756:	6839      	ldr	r1, [r7, #0]
 8000758:	480d      	ldr	r0, [pc, #52]	@ (8000790 <handle_rx_char+0x98>)
 800075a:	f000 f83a 	bl	80007d2 <SerialOutputString>
        SerialOutputString((uint8_t *)"\r\ndone...\r\n", serial_port);
 800075e:	6839      	ldr	r1, [r7, #0]
 8000760:	480e      	ldr	r0, [pc, #56]	@ (800079c <handle_rx_char+0xa4>)
 8000762:	f000 f836 	bl	80007d2 <SerialOutputString>

        if (serial_port->completion_function)
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800076a:	2b00      	cmp	r3, #0
 800076c:	d007      	beq.n	800077e <handle_rx_char+0x86>
            serial_port->completion_function((char *)rx_buffer, rx_index - 1);
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000772:	4a06      	ldr	r2, [pc, #24]	@ (800078c <handle_rx_char+0x94>)
 8000774:	8812      	ldrh	r2, [r2, #0]
 8000776:	3a01      	subs	r2, #1
 8000778:	4611      	mov	r1, r2
 800077a:	4805      	ldr	r0, [pc, #20]	@ (8000790 <handle_rx_char+0x98>)
 800077c:	4798      	blx	r3

        rx_index = 0;
 800077e:	4b03      	ldr	r3, [pc, #12]	@ (800078c <handle_rx_char+0x94>)
 8000780:	2200      	movs	r2, #0
 8000782:	801a      	strh	r2, [r3, #0]
    }
}
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000488 	.word	0x20000488
 8000790:	200000a0 	.word	0x200000a0
 8000794:	20000000 	.word	0x20000000
 8000798:	08000e00 	.word	0x08000e00
 800079c:	08000e1c 	.word	0x08000e1c

080007a0 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	6039      	str	r1, [r7, #0]
 80007aa:	71fb      	strb	r3, [r7, #7]
    while (!(serial_port->UART->ISR & USART_ISR_TXE)) {}
 80007ac:	bf00      	nop
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	69db      	ldr	r3, [r3, #28]
 80007b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d0f8      	beq.n	80007ae <SerialOutputChar+0xe>
    serial_port->UART->TDR = data;
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	79fa      	ldrb	r2, [r7, #7]
 80007c2:	b292      	uxth	r2, r2
 80007c4:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <SerialOutputString>:

void SerialOutputString(uint8_t *pt, SerialPort *serial_port)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
 80007da:	6039      	str	r1, [r7, #0]
    while (*pt) SerialOutputChar(*pt++, serial_port);
 80007dc:	e007      	b.n	80007ee <SerialOutputString+0x1c>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	1c5a      	adds	r2, r3, #1
 80007e2:	607a      	str	r2, [r7, #4]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	6839      	ldr	r1, [r7, #0]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ffd9 	bl	80007a0 <SerialOutputChar>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1f3      	bne.n	80007de <SerialOutputString+0xc>
}
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <SerialPrintPrompt>:


void SerialPrintPrompt(SerialPort *serial_port)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
    static int shown = 0;
    if (!shown) {
 8000808:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <SerialPrintPrompt+0x28>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d106      	bne.n	800081e <SerialPrintPrompt+0x1e>
        SerialOutputString((uint8_t *)"User input interface (end with '#'):\r\n", serial_port);
 8000810:	6879      	ldr	r1, [r7, #4]
 8000812:	4806      	ldr	r0, [pc, #24]	@ (800082c <SerialPrintPrompt+0x2c>)
 8000814:	f7ff ffdd 	bl	80007d2 <SerialOutputString>
        shown = 1;
 8000818:	4b03      	ldr	r3, [pc, #12]	@ (8000828 <SerialPrintPrompt+0x28>)
 800081a:	2201      	movs	r2, #1
 800081c:	601a      	str	r2, [r3, #0]
    }
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2000048c 	.word	0x2000048c
 800082c:	08000e28 	.word	0x08000e28

08000830 <SerialInitialise>:


void SerialInitialise(uint32_t baudRate,
                      SerialPort *serial_port,
                      void (*completion_function)(char *, uint32_t))
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
    serial_port->completion_function = completion_function;
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24


    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000842:	4b3d      	ldr	r3, [pc, #244]	@ (8000938 <SerialInitialise+0x108>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	4a3c      	ldr	r2, [pc, #240]	@ (8000938 <SerialInitialise+0x108>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084c:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800084e:	4b3a      	ldr	r3, [pc, #232]	@ (8000938 <SerialInitialise+0x108>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	4a39      	ldr	r2, [pc, #228]	@ (8000938 <SerialInitialise+0x108>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6193      	str	r3, [r2, #24]
    RCC->AHBENR  |= serial_port->MaskAHBENR;
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	691a      	ldr	r2, [r3, #16]
 800085e:	4b36      	ldr	r3, [pc, #216]	@ (8000938 <SerialInitialise+0x108>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	4935      	ldr	r1, [pc, #212]	@ (8000938 <SerialInitialise+0x108>)
 8000864:	4313      	orrs	r3, r2
 8000866:	614b      	str	r3, [r1, #20]

    serial_port->GPIO->MODER   = serial_port->SerialPinModeValue;
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	68ba      	ldr	r2, [r7, #8]
 800086e:	6952      	ldr	r2, [r2, #20]
 8000870:	601a      	str	r2, [r3, #0]
    serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	6992      	ldr	r2, [r2, #24]
 800087a:	609a      	str	r2, [r3, #8]
    serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	69d9      	ldr	r1, [r3, #28]
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	6a1a      	ldr	r2, [r3, #32]
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	430a      	orrs	r2, r1
 800088c:	621a      	str	r2, [r3, #32]
    serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	6a19      	ldr	r1, [r3, #32]
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	430a      	orrs	r2, r1
 800089e:	625a      	str	r2, [r3, #36]	@ 0x24

    RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	68da      	ldr	r2, [r3, #12]
 80008a4:	4b24      	ldr	r3, [pc, #144]	@ (8000938 <SerialInitialise+0x108>)
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	4923      	ldr	r1, [pc, #140]	@ (8000938 <SerialInitialise+0x108>)
 80008aa:	4313      	orrs	r3, r2
 80008ac:	61cb      	str	r3, [r1, #28]
    RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	689a      	ldr	r2, [r3, #8]
 80008b2:	4b21      	ldr	r3, [pc, #132]	@ (8000938 <SerialInitialise+0x108>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	4920      	ldr	r1, [pc, #128]	@ (8000938 <SerialInitialise+0x108>)
 80008b8:	4313      	orrs	r3, r2
 80008ba:	618b      	str	r3, [r1, #24]


    uint16_t *brr = (uint16_t *)&serial_port->UART->BRR;
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	330c      	adds	r3, #12
 80008c2:	617b      	str	r3, [r7, #20]
    switch (baudRate) {
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	2b04      	cmp	r3, #4
 80008c8:	d822      	bhi.n	8000910 <SerialInitialise+0xe0>
 80008ca:	a201      	add	r2, pc, #4	@ (adr r2, 80008d0 <SerialInitialise+0xa0>)
 80008cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d0:	080008e5 	.word	0x080008e5
 80008d4:	080008ef 	.word	0x080008ef
 80008d8:	080008f9 	.word	0x080008f9
 80008dc:	08000901 	.word	0x08000901
 80008e0:	08000909 	.word	0x08000909
    case BAUD_9600:   *brr = 8000000 / 9600;   break;
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	f240 3241 	movw	r2, #833	@ 0x341
 80008ea:	801a      	strh	r2, [r3, #0]
 80008ec:	e015      	b.n	800091a <SerialInitialise+0xea>
    case BAUD_19200:  *brr = 8000000 / 19200;  break;
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 80008f4:	801a      	strh	r2, [r3, #0]
 80008f6:	e010      	b.n	800091a <SerialInitialise+0xea>
    case BAUD_38400:  *brr = 8000000 / 38400;  break;
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	22d0      	movs	r2, #208	@ 0xd0
 80008fc:	801a      	strh	r2, [r3, #0]
 80008fe:	e00c      	b.n	800091a <SerialInitialise+0xea>
    case BAUD_57600:  *brr = 8000000 / 57600;  break;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	228a      	movs	r2, #138	@ 0x8a
 8000904:	801a      	strh	r2, [r3, #0]
 8000906:	e008      	b.n	800091a <SerialInitialise+0xea>
    case BAUD_115200: *brr = 8000000 / 115200; break;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	2245      	movs	r2, #69	@ 0x45
 800090c:	801a      	strh	r2, [r3, #0]
 800090e:	e004      	b.n	800091a <SerialInitialise+0xea>
    default:          *brr = 8000000 / 9600;   break;
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	f240 3241 	movw	r2, #833	@ 0x341
 8000916:	801a      	strh	r2, [r3, #0]
 8000918:	bf00      	nop
    }

    serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f042 020d 	orr.w	r2, r2, #13
 8000928:	601a      	str	r2, [r3, #0]

    enable_serial_interrupt();
 800092a:	f000 f817 	bl	800095c <enable_serial_interrupt>
}
 800092e:	bf00      	nop
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000

0800093c <SerialSetTermChar>:

void SerialSetTermChar(char ch) { term_char = ch; }
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
 8000946:	4a04      	ldr	r2, [pc, #16]	@ (8000958 <SerialSetTermChar+0x1c>)
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	7013      	strb	r3, [r2, #0]
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	20000000 	.word	0x20000000

0800095c <enable_serial_interrupt>:


void enable_serial_interrupt(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
    __disable_irq();

    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000964:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <enable_serial_interrupt+0x44>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	4a0d      	ldr	r2, [pc, #52]	@ (80009a0 <enable_serial_interrupt+0x44>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	6193      	str	r3, [r2, #24]
    EXTI->IMR    |= EXTI_IMR_MR25;
 8000970:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <enable_serial_interrupt+0x48>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0b      	ldr	r2, [pc, #44]	@ (80009a4 <enable_serial_interrupt+0x48>)
 8000976:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800097a:	6013      	str	r3, [r2, #0]
    USART1->CR1  |= USART_CR1_RXNEIE;
 800097c:	4b0a      	ldr	r3, [pc, #40]	@ (80009a8 <enable_serial_interrupt+0x4c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a09      	ldr	r2, [pc, #36]	@ (80009a8 <enable_serial_interrupt+0x4c>)
 8000982:	f043 0320 	orr.w	r3, r3, #32
 8000986:	6013      	str	r3, [r2, #0]

    NVIC_SetPriority(USART1_IRQn, 1);
 8000988:	2101      	movs	r1, #1
 800098a:	2025      	movs	r0, #37	@ 0x25
 800098c:	f7ff fe8a 	bl	80006a4 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART1_IRQn);
 8000990:	2025      	movs	r0, #37	@ 0x25
 8000992:	f7ff fe69 	bl	8000668 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000996:	b662      	cpsie	i
}
 8000998:	bf00      	nop

    __enable_irq();
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40010400 	.word	0x40010400
 80009a8:	40013800 	.word	0x40013800

080009ac <USART1_EXTI25_IRQHandler>:

void USART1_EXTI25_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
    if (USART1->ISR & USART_ISR_RXNE) {
 80009b2:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <USART1_EXTI25_IRQHandler+0x2c>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	f003 0320 	and.w	r3, r3, #32
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d008      	beq.n	80009d0 <USART1_EXTI25_IRQHandler+0x24>
        char c = (char)USART1->RDR;
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <USART1_EXTI25_IRQHandler+0x2c>)
 80009c0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	71fb      	strb	r3, [r7, #7]
        handle_rx_char(c, &USART1_PORT);
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	4904      	ldr	r1, [pc, #16]	@ (80009dc <USART1_EXTI25_IRQHandler+0x30>)
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fe94 	bl	80006f8 <handle_rx_char>
    }
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40013800 	.word	0x40013800
 80009dc:	20000004 	.word	0x20000004

080009e0 <__NVIC_EnableIRQ>:
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	db0b      	blt.n	8000a0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	f003 021f 	and.w	r2, r3, #31
 80009f8:	4907      	ldr	r1, [pc, #28]	@ (8000a18 <__NVIC_EnableIRQ+0x38>)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	095b      	lsrs	r3, r3, #5
 8000a00:	2001      	movs	r0, #1
 8000a02:	fa00 f202 	lsl.w	r2, r0, r2
 8000a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000e100 	.word	0xe000e100

08000a1c <__NVIC_SetPriority>:
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	6039      	str	r1, [r7, #0]
 8000a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	db0a      	blt.n	8000a46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	490c      	ldr	r1, [pc, #48]	@ (8000a68 <__NVIC_SetPriority+0x4c>)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	0112      	lsls	r2, r2, #4
 8000a3c:	b2d2      	uxtb	r2, r2
 8000a3e:	440b      	add	r3, r1
 8000a40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000a44:	e00a      	b.n	8000a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4908      	ldr	r1, [pc, #32]	@ (8000a6c <__NVIC_SetPriority+0x50>)
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	f003 030f 	and.w	r3, r3, #15
 8000a52:	3b04      	subs	r3, #4
 8000a54:	0112      	lsls	r2, r2, #4
 8000a56:	b2d2      	uxtb	r2, r2
 8000a58:	440b      	add	r3, r1
 8000a5a:	761a      	strb	r2, [r3, #24]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000e100 	.word	0xe000e100
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <tim2_start>:

static void (*timer_callback)(void) = 0;

/* ─── 内部：装载 TIM2，并根据 oneshot 选择是否启用 OPM ───────── */
static void tim2_start(uint32_t period_ms, int oneshot)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
    if (period_ms == 0)      period_ms = 1;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d101      	bne.n	8000a84 <tim2_start+0x14>
 8000a80:	2301      	movs	r3, #1
 8000a82:	607b      	str	r3, [r7, #4]
    if (period_ms > 65535)   period_ms = 65535;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a8a:	d302      	bcc.n	8000a92 <tim2_start+0x22>
 8000a8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a90:	607b      	str	r3, [r7, #4]

    /* 计数频率 1 kHz：1 tick = 1 ms（假设系统时钟 8 MHz） */
    TIM2->PSC = (8000000u / 1000u) - 1u;   /* 8000‑1 */
 8000a92:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a96:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000a9a:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = (uint16_t)(period_ms - 1u);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000aa8:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM2->CNT = 0;
 8000aaa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000aae:	2200      	movs	r2, #0
 8000ab0:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->EGR = TIM_EGR_UG;                /* 立即装载 */
 8000ab2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	615a      	str	r2, [r3, #20]
    TIM2->SR  = 0;                         /* 清 UIF */
 8000aba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]

    if (oneshot)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d004      	beq.n	8000ad2 <tim2_start+0x62>
        TIM2->CR1 = TIM_CR1_OPM | TIM_CR1_CEN;  /* One‑Pulse Mode */
 8000ac8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000acc:	2209      	movs	r2, #9
 8000ace:	601a      	str	r2, [r3, #0]
    else
        TIM2->CR1 = TIM_CR1_CEN;                /* 周期性 */
}
 8000ad0:	e003      	b.n	8000ada <tim2_start+0x6a>
        TIM2->CR1 = TIM_CR1_CEN;                /* 周期性 */
 8000ad2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	601a      	str	r2, [r3, #0]
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <timer_init>:

/* ─── 周期性定时器（原实现） ─────────────────────────────── */
void timer_init(uint32_t period_ms, void (*callback)(void))
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000af2:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <timer_init+0x4c>)
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b34 <timer_init+0x4c>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	61d3      	str	r3, [r2, #28]
    TIM2->CR1 = 0;
 8000afe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
    TIM2->DIER = TIM_DIER_UIE;
 8000b06:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	60da      	str	r2, [r3, #12]

    timer_callback = callback;
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b38 <timer_init+0x50>)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	6013      	str	r3, [r2, #0]
    tim2_start(period_ms, 0);              /* 0 = 周期性 */
 8000b14:	2100      	movs	r1, #0
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff ffaa 	bl	8000a70 <tim2_start>

    NVIC_SetPriority(TIM2_IRQn, 1);
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	201c      	movs	r0, #28
 8000b20:	f7ff ff7c 	bl	8000a1c <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 8000b24:	201c      	movs	r0, #28
 8000b26:	f7ff ff5b 	bl	80009e0 <__NVIC_EnableIRQ>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000
 8000b38:	20000490 	.word	0x20000490

08000b3c <timer_oneshot>:

/* ─── 一次性定时器（新增） ───────────────────────────────── */
void timer_oneshot(uint32_t delay_ms, void (*callback)(void))
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000b46:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <timer_oneshot+0x4c>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b88 <timer_oneshot+0x4c>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	61d3      	str	r3, [r2, #28]
    TIM2->CR1 = 0;
 8000b52:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
    TIM2->DIER = TIM_DIER_UIE;
 8000b5a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b5e:	2201      	movs	r2, #1
 8000b60:	60da      	str	r2, [r3, #12]

    timer_callback = callback;
 8000b62:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <timer_oneshot+0x50>)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	6013      	str	r3, [r2, #0]
    tim2_start(delay_ms, 1);               /* 1 = oneshot */
 8000b68:	2101      	movs	r1, #1
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ff80 	bl	8000a70 <tim2_start>

    NVIC_SetPriority(TIM2_IRQn, 1);
 8000b70:	2101      	movs	r1, #1
 8000b72:	201c      	movs	r0, #28
 8000b74:	f7ff ff52 	bl	8000a1c <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 8000b78:	201c      	movs	r0, #28
 8000b7a:	f7ff ff31 	bl	80009e0 <__NVIC_EnableIRQ>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	20000490 	.word	0x20000490

08000b90 <TIM2_IRQHandler>:

/* ─── TIM2 中断 ─────────────────────────────────────────── */
void TIM2_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 8000b94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b98:	691b      	ldr	r3, [r3, #16]
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d00e      	beq.n	8000bc0 <TIM2_IRQHandler+0x30>
        TIM2->SR &= ~TIM_SR_UIF;           /* 清标志 */
 8000ba2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ba6:	691b      	ldr	r3, [r3, #16]
 8000ba8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bac:	f023 0301 	bic.w	r3, r3, #1
 8000bb0:	6113      	str	r3, [r2, #16]
        if (timer_callback) timer_callback();
 8000bb2:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <TIM2_IRQHandler+0x34>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d002      	beq.n	8000bc0 <TIM2_IRQHandler+0x30>
 8000bba:	4b02      	ldr	r3, [pc, #8]	@ (8000bc4 <TIM2_IRQHandler+0x34>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4798      	blx	r3
    }
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000490 	.word	0x20000490

08000bc8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bc8:	480d      	ldr	r0, [pc, #52]	@ (8000c00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bcc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd0:	480c      	ldr	r0, [pc, #48]	@ (8000c04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd2:	490d      	ldr	r1, [pc, #52]	@ (8000c08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c0c <LoopForever+0xe>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be8:	4c0a      	ldr	r4, [pc, #40]	@ (8000c14 <LoopForever+0x16>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bf6:	f000 f8bf 	bl	8000d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bfa:	f7ff fd1f 	bl	800063c <main>

08000bfe <LoopForever>:

LoopForever:
  b LoopForever
 8000bfe:	e7fe      	b.n	8000bfe <LoopForever>
  ldr   r0, =_estack
 8000c00:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000c0c:	08000f74 	.word	0x08000f74
  ldr r2, =_sbss
 8000c10:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000c14:	200005cc 	.word	0x200005cc

08000c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC1_2_IRQHandler>

08000c1a <atoi>:
 8000c1a:	220a      	movs	r2, #10
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	f000 b87b 	b.w	8000d18 <strtol>
	...

08000c24 <_strtol_l.isra.0>:
 8000c24:	2b24      	cmp	r3, #36	@ 0x24
 8000c26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2a:	4686      	mov	lr, r0
 8000c2c:	4690      	mov	r8, r2
 8000c2e:	d801      	bhi.n	8000c34 <_strtol_l.isra.0+0x10>
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d106      	bne.n	8000c42 <_strtol_l.isra.0+0x1e>
 8000c34:	f000 f89a 	bl	8000d6c <__errno>
 8000c38:	2316      	movs	r3, #22
 8000c3a:	6003      	str	r3, [r0, #0]
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	4834      	ldr	r0, [pc, #208]	@ (8000d14 <_strtol_l.isra.0+0xf0>)
 8000c44:	460d      	mov	r5, r1
 8000c46:	462a      	mov	r2, r5
 8000c48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000c4c:	5d06      	ldrb	r6, [r0, r4]
 8000c4e:	f016 0608 	ands.w	r6, r6, #8
 8000c52:	d1f8      	bne.n	8000c46 <_strtol_l.isra.0+0x22>
 8000c54:	2c2d      	cmp	r4, #45	@ 0x2d
 8000c56:	d110      	bne.n	8000c7a <_strtol_l.isra.0+0x56>
 8000c58:	782c      	ldrb	r4, [r5, #0]
 8000c5a:	2601      	movs	r6, #1
 8000c5c:	1c95      	adds	r5, r2, #2
 8000c5e:	f033 0210 	bics.w	r2, r3, #16
 8000c62:	d115      	bne.n	8000c90 <_strtol_l.isra.0+0x6c>
 8000c64:	2c30      	cmp	r4, #48	@ 0x30
 8000c66:	d10d      	bne.n	8000c84 <_strtol_l.isra.0+0x60>
 8000c68:	782a      	ldrb	r2, [r5, #0]
 8000c6a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8000c6e:	2a58      	cmp	r2, #88	@ 0x58
 8000c70:	d108      	bne.n	8000c84 <_strtol_l.isra.0+0x60>
 8000c72:	786c      	ldrb	r4, [r5, #1]
 8000c74:	3502      	adds	r5, #2
 8000c76:	2310      	movs	r3, #16
 8000c78:	e00a      	b.n	8000c90 <_strtol_l.isra.0+0x6c>
 8000c7a:	2c2b      	cmp	r4, #43	@ 0x2b
 8000c7c:	bf04      	itt	eq
 8000c7e:	782c      	ldrbeq	r4, [r5, #0]
 8000c80:	1c95      	addeq	r5, r2, #2
 8000c82:	e7ec      	b.n	8000c5e <_strtol_l.isra.0+0x3a>
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1f6      	bne.n	8000c76 <_strtol_l.isra.0+0x52>
 8000c88:	2c30      	cmp	r4, #48	@ 0x30
 8000c8a:	bf14      	ite	ne
 8000c8c:	230a      	movne	r3, #10
 8000c8e:	2308      	moveq	r3, #8
 8000c90:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8000c94:	f10c 3cff 	add.w	ip, ip, #4294967295
 8000c98:	2200      	movs	r2, #0
 8000c9a:	fbbc f9f3 	udiv	r9, ip, r3
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	fb03 ca19 	mls	sl, r3, r9, ip
 8000ca4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8000ca8:	2f09      	cmp	r7, #9
 8000caa:	d80f      	bhi.n	8000ccc <_strtol_l.isra.0+0xa8>
 8000cac:	463c      	mov	r4, r7
 8000cae:	42a3      	cmp	r3, r4
 8000cb0:	dd1b      	ble.n	8000cea <_strtol_l.isra.0+0xc6>
 8000cb2:	1c57      	adds	r7, r2, #1
 8000cb4:	d007      	beq.n	8000cc6 <_strtol_l.isra.0+0xa2>
 8000cb6:	4581      	cmp	r9, r0
 8000cb8:	d314      	bcc.n	8000ce4 <_strtol_l.isra.0+0xc0>
 8000cba:	d101      	bne.n	8000cc0 <_strtol_l.isra.0+0x9c>
 8000cbc:	45a2      	cmp	sl, r4
 8000cbe:	db11      	blt.n	8000ce4 <_strtol_l.isra.0+0xc0>
 8000cc0:	fb00 4003 	mla	r0, r0, r3, r4
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000cca:	e7eb      	b.n	8000ca4 <_strtol_l.isra.0+0x80>
 8000ccc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8000cd0:	2f19      	cmp	r7, #25
 8000cd2:	d801      	bhi.n	8000cd8 <_strtol_l.isra.0+0xb4>
 8000cd4:	3c37      	subs	r4, #55	@ 0x37
 8000cd6:	e7ea      	b.n	8000cae <_strtol_l.isra.0+0x8a>
 8000cd8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8000cdc:	2f19      	cmp	r7, #25
 8000cde:	d804      	bhi.n	8000cea <_strtol_l.isra.0+0xc6>
 8000ce0:	3c57      	subs	r4, #87	@ 0x57
 8000ce2:	e7e4      	b.n	8000cae <_strtol_l.isra.0+0x8a>
 8000ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce8:	e7ed      	b.n	8000cc6 <_strtol_l.isra.0+0xa2>
 8000cea:	1c53      	adds	r3, r2, #1
 8000cec:	d108      	bne.n	8000d00 <_strtol_l.isra.0+0xdc>
 8000cee:	2322      	movs	r3, #34	@ 0x22
 8000cf0:	f8ce 3000 	str.w	r3, [lr]
 8000cf4:	4660      	mov	r0, ip
 8000cf6:	f1b8 0f00 	cmp.w	r8, #0
 8000cfa:	d0a0      	beq.n	8000c3e <_strtol_l.isra.0+0x1a>
 8000cfc:	1e69      	subs	r1, r5, #1
 8000cfe:	e006      	b.n	8000d0e <_strtol_l.isra.0+0xea>
 8000d00:	b106      	cbz	r6, 8000d04 <_strtol_l.isra.0+0xe0>
 8000d02:	4240      	negs	r0, r0
 8000d04:	f1b8 0f00 	cmp.w	r8, #0
 8000d08:	d099      	beq.n	8000c3e <_strtol_l.isra.0+0x1a>
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	d1f6      	bne.n	8000cfc <_strtol_l.isra.0+0xd8>
 8000d0e:	f8c8 1000 	str.w	r1, [r8]
 8000d12:	e794      	b.n	8000c3e <_strtol_l.isra.0+0x1a>
 8000d14:	08000e63 	.word	0x08000e63

08000d18 <strtol>:
 8000d18:	4613      	mov	r3, r2
 8000d1a:	460a      	mov	r2, r1
 8000d1c:	4601      	mov	r1, r0
 8000d1e:	4802      	ldr	r0, [pc, #8]	@ (8000d28 <strtol+0x10>)
 8000d20:	6800      	ldr	r0, [r0, #0]
 8000d22:	f7ff bf7f 	b.w	8000c24 <_strtol_l.isra.0>
 8000d26:	bf00      	nop
 8000d28:	2000002c 	.word	0x2000002c

08000d2c <strncasecmp>:
 8000d2c:	b570      	push	{r4, r5, r6, lr}
 8000d2e:	4e0e      	ldr	r6, [pc, #56]	@ (8000d68 <strncasecmp+0x3c>)
 8000d30:	4605      	mov	r5, r0
 8000d32:	440a      	add	r2, r1
 8000d34:	428a      	cmp	r2, r1
 8000d36:	d101      	bne.n	8000d3c <strncasecmp+0x10>
 8000d38:	2000      	movs	r0, #0
 8000d3a:	e013      	b.n	8000d64 <strncasecmp+0x38>
 8000d3c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000d40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000d44:	5cf0      	ldrb	r0, [r6, r3]
 8000d46:	f000 0003 	and.w	r0, r0, #3
 8000d4a:	2801      	cmp	r0, #1
 8000d4c:	5d30      	ldrb	r0, [r6, r4]
 8000d4e:	f000 0003 	and.w	r0, r0, #3
 8000d52:	bf08      	it	eq
 8000d54:	3320      	addeq	r3, #32
 8000d56:	2801      	cmp	r0, #1
 8000d58:	bf08      	it	eq
 8000d5a:	3420      	addeq	r4, #32
 8000d5c:	1b18      	subs	r0, r3, r4
 8000d5e:	d101      	bne.n	8000d64 <strncasecmp+0x38>
 8000d60:	2c00      	cmp	r4, #0
 8000d62:	d1e7      	bne.n	8000d34 <strncasecmp+0x8>
 8000d64:	bd70      	pop	{r4, r5, r6, pc}
 8000d66:	bf00      	nop
 8000d68:	08000e63 	.word	0x08000e63

08000d6c <__errno>:
 8000d6c:	4b01      	ldr	r3, [pc, #4]	@ (8000d74 <__errno+0x8>)
 8000d6e:	6818      	ldr	r0, [r3, #0]
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	2000002c 	.word	0x2000002c

08000d78 <__libc_init_array>:
 8000d78:	b570      	push	{r4, r5, r6, lr}
 8000d7a:	4d0d      	ldr	r5, [pc, #52]	@ (8000db0 <__libc_init_array+0x38>)
 8000d7c:	4c0d      	ldr	r4, [pc, #52]	@ (8000db4 <__libc_init_array+0x3c>)
 8000d7e:	1b64      	subs	r4, r4, r5
 8000d80:	10a4      	asrs	r4, r4, #2
 8000d82:	2600      	movs	r6, #0
 8000d84:	42a6      	cmp	r6, r4
 8000d86:	d109      	bne.n	8000d9c <__libc_init_array+0x24>
 8000d88:	4d0b      	ldr	r5, [pc, #44]	@ (8000db8 <__libc_init_array+0x40>)
 8000d8a:	4c0c      	ldr	r4, [pc, #48]	@ (8000dbc <__libc_init_array+0x44>)
 8000d8c:	f000 f818 	bl	8000dc0 <_init>
 8000d90:	1b64      	subs	r4, r4, r5
 8000d92:	10a4      	asrs	r4, r4, #2
 8000d94:	2600      	movs	r6, #0
 8000d96:	42a6      	cmp	r6, r4
 8000d98:	d105      	bne.n	8000da6 <__libc_init_array+0x2e>
 8000d9a:	bd70      	pop	{r4, r5, r6, pc}
 8000d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000da0:	4798      	blx	r3
 8000da2:	3601      	adds	r6, #1
 8000da4:	e7ee      	b.n	8000d84 <__libc_init_array+0xc>
 8000da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000daa:	4798      	blx	r3
 8000dac:	3601      	adds	r6, #1
 8000dae:	e7f2      	b.n	8000d96 <__libc_init_array+0x1e>
 8000db0:	08000f6c 	.word	0x08000f6c
 8000db4:	08000f6c 	.word	0x08000f6c
 8000db8:	08000f6c 	.word	0x08000f6c
 8000dbc:	08000f70 	.word	0x08000f70

08000dc0 <_init>:
 8000dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc2:	bf00      	nop
 8000dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dc6:	bc08      	pop	{r3}
 8000dc8:	469e      	mov	lr, r3
 8000dca:	4770      	bx	lr

08000dcc <_fini>:
 8000dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dce:	bf00      	nop
 8000dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dd2:	bc08      	pop	{r3}
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	4770      	bx	lr


2025 C LAB EXE2 BF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000de4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08000f84  08000f84  00001f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001028  08001028  0000307c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001028  08001028  00002028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001030  08001030  0000307c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001030  08001030  00002030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001034  08001034  00002034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08001038  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000307c  2**0
                  CONTENTS
 10 .bss          00000560  2000007c  2000007c  0000307c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005dc  200005dc  0000307c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000307c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000952  00000000  00000000  000030ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003ad  00000000  00000000  000039fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  00003db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000007e  00000000  00000000  00003e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001604c  00000000  00000000  00003eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001374  00000000  00000000  00019f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076540  00000000  00000000  0001b2ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000917ee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000070c  00000000  00000000  00091834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00091f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08000f6c 	.word	0x08000f6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08000f6c 	.word	0x08000f6c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <For_receive_done>:


volatile uint16_t last_received_length = 0;

//The callback function after the serial port is received
void For_receive_done(uint32_t len) {
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    last_received_length = (uint16_t)len;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	b29a      	uxth	r2, r3
 800028c:	4b03      	ldr	r3, [pc, #12]	@ (800029c <For_receive_done+0x1c>)
 800028e:	801a      	strh	r2, [r3, #0]
}
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	20000098 	.word	0x20000098

080002a0 <main>:

//Main function
int main(void) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
    SerialInitialise(BAUD_115200, &USART1_PORT, For_receive_done);
 80002a4:	4a09      	ldr	r2, [pc, #36]	@ (80002cc <main+0x2c>)
 80002a6:	490a      	ldr	r1, [pc, #40]	@ (80002d0 <main+0x30>)
 80002a8:	2004      	movs	r0, #4
 80002aa:	f000 f813 	bl	80002d4 <SerialInitialise>
    SerialSetTermChar('#');
 80002ae:	2023      	movs	r0, #35	@ 0x23
 80002b0:	f000 f890 	bl	80003d4 <SerialSetTermChar>
    SerialPrintPrompt(&USART1_PORT);
 80002b4:	4806      	ldr	r0, [pc, #24]	@ (80002d0 <main+0x30>)
 80002b6:	f000 f8cf 	bl	8000458 <SerialPrintPrompt>
    //Use polling method to received the input
    while (1) {
        SerialInputReceive(&USART1_PORT);
 80002ba:	4805      	ldr	r0, [pc, #20]	@ (80002d0 <main+0x30>)
 80002bc:	f000 f8e4 	bl	8000488 <SerialInputReceive>
        SerialPrintLastLength(&USART1_PORT);
 80002c0:	4803      	ldr	r0, [pc, #12]	@ (80002d0 <main+0x30>)
 80002c2:	f000 f92d 	bl	8000520 <SerialPrintLastLength>
        SerialInputReceive(&USART1_PORT);
 80002c6:	bf00      	nop
 80002c8:	e7f7      	b.n	80002ba <main+0x1a>
 80002ca:	bf00      	nop
 80002cc:	08000281 	.word	0x08000281
 80002d0:	20000004 	.word	0x20000004

080002d4 <SerialInitialise>:
		0x00 						// default function pointer is NULL
		};


// InitialiseSerial - Initialize the serial port, input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 80002d4:	b480      	push	{r7}
 80002d6:	b087      	sub	sp, #28
 80002d8:	af00      	add	r7, sp, #0
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	60b9      	str	r1, [r7, #8]
 80002de:	607a      	str	r2, [r7, #4]
	serial_port->completion_function = completion_function;
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	625a      	str	r2, [r3, #36]	@ 0x24
	// enable clock power, system configuration clock and GPIOC common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002e6:	4b3a      	ldr	r3, [pc, #232]	@ (80003d0 <SerialInitialise+0xfc>)
 80002e8:	69db      	ldr	r3, [r3, #28]
 80002ea:	4a39      	ldr	r2, [pc, #228]	@ (80003d0 <SerialInitialise+0xfc>)
 80002ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002f0:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002f2:	4b37      	ldr	r3, [pc, #220]	@ (80003d0 <SerialInitialise+0xfc>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	4a36      	ldr	r2, [pc, #216]	@ (80003d0 <SerialInitialise+0xfc>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	6193      	str	r3, [r2, #24]
	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	691a      	ldr	r2, [r3, #16]
 8000302:	4b33      	ldr	r3, [pc, #204]	@ (80003d0 <SerialInitialise+0xfc>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	4932      	ldr	r1, [pc, #200]	@ (80003d0 <SerialInitialise+0xfc>)
 8000308:	4313      	orrs	r3, r2
 800030a:	614b      	str	r3, [r1, #20]
	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	68ba      	ldr	r2, [r7, #8]
 8000312:	6952      	ldr	r2, [r2, #20]
 8000314:	601a      	str	r2, [r3, #0]
	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	68ba      	ldr	r2, [r7, #8]
 800031c:	6992      	ldr	r2, [r2, #24]
 800031e:	609a      	str	r2, [r3, #8]
	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	69d9      	ldr	r1, [r3, #28]
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	685b      	ldr	r3, [r3, #4]
 8000328:	6a1a      	ldr	r2, [r3, #32]
 800032a:	68bb      	ldr	r3, [r7, #8]
 800032c:	685b      	ldr	r3, [r3, #4]
 800032e:	430a      	orrs	r2, r1
 8000330:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	6a19      	ldr	r1, [r3, #32]
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	430a      	orrs	r2, r1
 8000342:	625a      	str	r2, [r3, #36]	@ 0x24
	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	68da      	ldr	r2, [r3, #12]
 8000348:	4b21      	ldr	r3, [pc, #132]	@ (80003d0 <SerialInitialise+0xfc>)
 800034a:	69db      	ldr	r3, [r3, #28]
 800034c:	4920      	ldr	r1, [pc, #128]	@ (80003d0 <SerialInitialise+0xfc>)
 800034e:	4313      	orrs	r3, r2
 8000350:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	689a      	ldr	r2, [r3, #8]
 8000356:	4b1e      	ldr	r3, [pc, #120]	@ (80003d0 <SerialInitialise+0xfc>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	491d      	ldr	r1, [pc, #116]	@ (80003d0 <SerialInitialise+0xfc>)
 800035c:	4313      	orrs	r3, r2
 800035e:	618b      	str	r3, [r1, #24]
	// Get a pointer to the 16 bits of the BRR register that we want to change
    uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR;
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	330c      	adds	r3, #12
 8000366:	617b      	str	r3, [r7, #20]
    // Baud rate at 8M Hz
    switch (baudRate) {
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	2b04      	cmp	r3, #4
 800036c:	d822      	bhi.n	80003b4 <SerialInitialise+0xe0>
 800036e:	a201      	add	r2, pc, #4	@ (adr r2, 8000374 <SerialInitialise+0xa0>)
 8000370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000374:	08000389 	.word	0x08000389
 8000378:	08000393 	.word	0x08000393
 800037c:	0800039d 	.word	0x0800039d
 8000380:	080003a5 	.word	0x080003a5
 8000384:	080003ad 	.word	0x080003ad
    case BAUD_9600:
    	// BRR(USARTDIV): 833 = 0x341
    	*baud_rate_config = 8000000 / 9600;
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	f240 3241 	movw	r2, #833	@ 0x341
 800038e:	801a      	strh	r2, [r3, #0]
    	break;
 8000390:	e010      	b.n	80003b4 <SerialInitialise+0xe0>
    case BAUD_19200:
    	// BRR(USARTDIV): 416 = 0x1A0
    	*baud_rate_config = 8000000 / 19200;
 8000392:	697b      	ldr	r3, [r7, #20]
 8000394:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8000398:	801a      	strh	r2, [r3, #0]
        break;
 800039a:	e00b      	b.n	80003b4 <SerialInitialise+0xe0>
    case BAUD_38400:
    	// BRR(USARTDIV): 208 = 0xD0
    	*baud_rate_config = 8000000 / 38400;
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	22d0      	movs	r2, #208	@ 0xd0
 80003a0:	801a      	strh	r2, [r3, #0]
        break;
 80003a2:	e007      	b.n	80003b4 <SerialInitialise+0xe0>
    case BAUD_57600:
    	// BRR(USARTDIV): 139 = 0x8B
    	*baud_rate_config = 8000000 / 57600;
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	228a      	movs	r2, #138	@ 0x8a
 80003a8:	801a      	strh	r2, [r3, #0]
        break;
 80003aa:	e003      	b.n	80003b4 <SerialInitialise+0xe0>
    case BAUD_115200:
    	// BRR(USARTDIV): 69.44 ≈ 0x46
    	*baud_rate_config = 8000000 / 115200;
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	2245      	movs	r2, #69	@ 0x45
 80003b0:	801a      	strh	r2, [r3, #0]
        break;
 80003b2:	bf00      	nop
	}
    serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f042 020d 	orr.w	r2, r2, #13
 80003c2:	601a      	str	r2, [r3, #0]
}
 80003c4:	bf00      	nop
 80003c6:	371c      	adds	r7, #28
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	40021000 	.word	0x40021000

080003d4 <SerialSetTermChar>:


//Set terminating character
void SerialSetTermChar(char terminator_ch) {
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
    term_char = terminator_ch;
 80003de:	4a04      	ldr	r2, [pc, #16]	@ (80003f0 <SerialSetTermChar+0x1c>)
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	7013      	strb	r3, [r2, #0]
}
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	20000000 	.word	0x20000000

080003f4 <SerialOutputChar>:


//Send a character data to the serial port
void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	6039      	str	r1, [r7, #0]
 80003fe:	71fb      	strb	r3, [r7, #7]
    while ((serial_port->UART->ISR & USART_ISR_TXE) == 0) {}
 8000400:	bf00      	nop
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	69db      	ldr	r3, [r3, #28]
 8000408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800040c:	2b00      	cmp	r3, #0
 800040e:	d0f8      	beq.n	8000402 <SerialOutputChar+0xe>
    serial_port->UART->TDR = data;
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	79fa      	ldrb	r2, [r7, #7]
 8000416:	b292      	uxth	r2, r2
 8000418:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800041a:	bf00      	nop
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr

08000426 <SerialOutputString>:


//Sends a string characters
void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8000426:	b580      	push	{r7, lr}
 8000428:	b082      	sub	sp, #8
 800042a:	af00      	add	r7, sp, #0
 800042c:	6078      	str	r0, [r7, #4]
 800042e:	6039      	str	r1, [r7, #0]
    while (*pt) {
 8000430:	e008      	b.n	8000444 <SerialOutputString+0x1e>
        SerialOutputChar(*pt, serial_port);
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	6839      	ldr	r1, [r7, #0]
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ffdb 	bl	80003f4 <SerialOutputChar>
        pt++;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	3301      	adds	r3, #1
 8000442:	607b      	str	r3, [r7, #4]
    while (*pt) {
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d1f2      	bne.n	8000432 <SerialOutputString+0xc>
    }
}
 800044c:	bf00      	nop
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
	...

08000458 <SerialPrintPrompt>:


// Print user input prompt to the serial port
void SerialPrintPrompt(SerialPort *serial_port) {
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
    static int prompt_shown = 0;
    if (!prompt_shown) {
 8000460:	4b07      	ldr	r3, [pc, #28]	@ (8000480 <SerialPrintPrompt+0x28>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d106      	bne.n	8000476 <SerialPrintPrompt+0x1e>
        SerialOutputString((uint8_t *)"User input interface (end with '#'):\r\n", serial_port);
 8000468:	6879      	ldr	r1, [r7, #4]
 800046a:	4806      	ldr	r0, [pc, #24]	@ (8000484 <SerialPrintPrompt+0x2c>)
 800046c:	f7ff ffdb 	bl	8000426 <SerialOutputString>
        prompt_shown = 1;
 8000470:	4b03      	ldr	r3, [pc, #12]	@ (8000480 <SerialPrintPrompt+0x28>)
 8000472:	2201      	movs	r2, #1
 8000474:	601a      	str	r2, [r3, #0]
    }
}
 8000476:	bf00      	nop
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	20000488 	.word	0x20000488
 8000484:	08000f84 	.word	0x08000f84

08000488 <SerialInputReceive>:


//Received incoming user input character
void SerialInputReceive(SerialPort *serial_port) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	//Check whether the serial port receiver data
	if (serial_port->UART->ISR & USART_ISR_RXNE) {
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	f003 0320 	and.w	r3, r3, #32
 800049a:	2b00      	cmp	r3, #0
 800049c:	d032      	beq.n	8000504 <SerialInputReceive+0x7c>
        char c = serial_port->UART->RDR;		//Read the received character
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	73fb      	strb	r3, [r7, #15]
    //Check whether the buffer overflow
        if (rx_index < BUFFER_SIZE - 1) {		//Leave space in the buffer
            rx_buffer[rx_index++] = c;			//Store the character and index + 1
 80004a8:	4b18      	ldr	r3, [pc, #96]	@ (800050c <SerialInputReceive+0x84>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	1c5a      	adds	r2, r3, #1
 80004ae:	b2d1      	uxtb	r1, r2
 80004b0:	4a16      	ldr	r2, [pc, #88]	@ (800050c <SerialInputReceive+0x84>)
 80004b2:	7011      	strb	r1, [r2, #0]
 80004b4:	4619      	mov	r1, r3
 80004b6:	4a16      	ldr	r2, [pc, #88]	@ (8000510 <SerialInputReceive+0x88>)
 80004b8:	7bfb      	ldrb	r3, [r7, #15]
 80004ba:	5453      	strb	r3, [r2, r1]
    //Clear the receive buffer
            rx_index = 0;
            memset(rx_buffer, 0, BUFFER_SIZE);
            return;
        }
        if (c == term_char) {
 80004bc:	4b15      	ldr	r3, [pc, #84]	@ (8000514 <SerialInputReceive+0x8c>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	7bfa      	ldrb	r2, [r7, #15]
 80004c2:	429a      	cmp	r2, r3
 80004c4:	d11e      	bne.n	8000504 <SerialInputReceive+0x7c>
            //The received data displayed
        	rx_buffer[rx_index] = '\0';
 80004c6:	4b11      	ldr	r3, [pc, #68]	@ (800050c <SerialInputReceive+0x84>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	461a      	mov	r2, r3
 80004cc:	4b10      	ldr	r3, [pc, #64]	@ (8000510 <SerialInputReceive+0x88>)
 80004ce:	2100      	movs	r1, #0
 80004d0:	5499      	strb	r1, [r3, r2]
            SerialOutputString((uint8_t *)"\r\n", serial_port);
 80004d2:	6879      	ldr	r1, [r7, #4]
 80004d4:	4810      	ldr	r0, [pc, #64]	@ (8000518 <SerialInputReceive+0x90>)
 80004d6:	f7ff ffa6 	bl	8000426 <SerialOutputString>
            SerialOutputString(rx_buffer, serial_port);
 80004da:	6879      	ldr	r1, [r7, #4]
 80004dc:	480c      	ldr	r0, [pc, #48]	@ (8000510 <SerialInputReceive+0x88>)
 80004de:	f7ff ffa2 	bl	8000426 <SerialOutputString>
            SerialOutputString((uint8_t *)"\r\n...Received successfully, printing input...\r\n", serial_port);
 80004e2:	6879      	ldr	r1, [r7, #4]
 80004e4:	480d      	ldr	r0, [pc, #52]	@ (800051c <SerialInputReceive+0x94>)
 80004e6:	f7ff ff9e 	bl	8000426 <SerialOutputString>
     //Completion callback
            if (serial_port->completion_function) {
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d005      	beq.n	80004fe <SerialInputReceive+0x76>
                serial_port->completion_function(rx_index);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004f6:	4a05      	ldr	r2, [pc, #20]	@ (800050c <SerialInputReceive+0x84>)
 80004f8:	7812      	ldrb	r2, [r2, #0]
 80004fa:	4610      	mov	r0, r2
 80004fc:	4798      	blx	r3
            }
            rx_index = 0;
 80004fe:	4b03      	ldr	r3, [pc, #12]	@ (800050c <SerialInputReceive+0x84>)
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000484 	.word	0x20000484
 8000510:	2000009c 	.word	0x2000009c
 8000514:	20000000 	.word	0x20000000
 8000518:	08000fac 	.word	0x08000fac
 800051c:	08000fb0 	.word	0x08000fb0

08000520 <SerialPrintLastLength>:


// Last received message length
void SerialPrintLastLength(SerialPort *serial_port) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b092      	sub	sp, #72	@ 0x48
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
    static uint32_t counter = 0;
    //Counter + 1
    counter++;
 8000528:	4b10      	ldr	r3, [pc, #64]	@ (800056c <SerialPrintLastLength+0x4c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	3301      	adds	r3, #1
 800052e:	4a0f      	ldr	r2, [pc, #60]	@ (800056c <SerialPrintLastLength+0x4c>)
 8000530:	6013      	str	r3, [r2, #0]
    //Simple delay function
    if (counter >= 800000) {
 8000532:	4b0e      	ldr	r3, [pc, #56]	@ (800056c <SerialPrintLastLength+0x4c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a0e      	ldr	r2, [pc, #56]	@ (8000570 <SerialPrintLastLength+0x50>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d912      	bls.n	8000562 <SerialPrintLastLength+0x42>
        counter = 0;
 800053c:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <SerialPrintLastLength+0x4c>)
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
        extern volatile uint16_t last_received_length;
        char buffer[64];
        //Formatting defines the printed data
        sprintf(buffer, "Last length: %u\r\n", last_received_length);
 8000542:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <SerialPrintLastLength+0x54>)
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	b29b      	uxth	r3, r3
 8000548:	461a      	mov	r2, r3
 800054a:	f107 0308 	add.w	r3, r7, #8
 800054e:	490a      	ldr	r1, [pc, #40]	@ (8000578 <SerialPrintLastLength+0x58>)
 8000550:	4618      	mov	r0, r3
 8000552:	f000 f873 	bl	800063c <siprintf>
        SerialOutputString((uint8_t *)buffer, serial_port);
 8000556:	f107 0308 	add.w	r3, r7, #8
 800055a:	6879      	ldr	r1, [r7, #4]
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff ff62 	bl	8000426 <SerialOutputString>
    }
}
 8000562:	bf00      	nop
 8000564:	3748      	adds	r7, #72	@ 0x48
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	2000048c 	.word	0x2000048c
 8000570:	000c34ff 	.word	0x000c34ff
 8000574:	20000098 	.word	0x20000098
 8000578:	08000fe0 	.word	0x08000fe0

0800057c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000584:	4a14      	ldr	r2, [pc, #80]	@ (80005d8 <_sbrk+0x5c>)
 8000586:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <_sbrk+0x60>)
 8000588:	1ad3      	subs	r3, r2, r3
 800058a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000590:	4b13      	ldr	r3, [pc, #76]	@ (80005e0 <_sbrk+0x64>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d102      	bne.n	800059e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000598:	4b11      	ldr	r3, [pc, #68]	@ (80005e0 <_sbrk+0x64>)
 800059a:	4a12      	ldr	r2, [pc, #72]	@ (80005e4 <_sbrk+0x68>)
 800059c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800059e:	4b10      	ldr	r3, [pc, #64]	@ (80005e0 <_sbrk+0x64>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	693a      	ldr	r2, [r7, #16]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d207      	bcs.n	80005bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005ac:	f000 f868 	bl	8000680 <__errno>
 80005b0:	4603      	mov	r3, r0
 80005b2:	220c      	movs	r2, #12
 80005b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ba:	e009      	b.n	80005d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005bc:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <_sbrk+0x64>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005c2:	4b07      	ldr	r3, [pc, #28]	@ (80005e0 <_sbrk+0x64>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4413      	add	r3, r2
 80005ca:	4a05      	ldr	r2, [pc, #20]	@ (80005e0 <_sbrk+0x64>)
 80005cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ce:	68fb      	ldr	r3, [r7, #12]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3718      	adds	r7, #24
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	2000a000 	.word	0x2000a000
 80005dc:	00000400 	.word	0x00000400
 80005e0:	20000490 	.word	0x20000490
 80005e4:	200005e0 	.word	0x200005e0

080005e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005e8:	480d      	ldr	r0, [pc, #52]	@ (8000620 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f0:	480c      	ldr	r0, [pc, #48]	@ (8000624 <LoopForever+0x6>)
  ldr r1, =_edata
 80005f2:	490d      	ldr	r1, [pc, #52]	@ (8000628 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005f4:	4a0d      	ldr	r2, [pc, #52]	@ (800062c <LoopForever+0xe>)
  movs r3, #0
 80005f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f8:	e002      	b.n	8000600 <LoopCopyDataInit>

080005fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fe:	3304      	adds	r3, #4

08000600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000604:	d3f9      	bcc.n	80005fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000606:	4a0a      	ldr	r2, [pc, #40]	@ (8000630 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000608:	4c0a      	ldr	r4, [pc, #40]	@ (8000634 <LoopForever+0x16>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800060c:	e001      	b.n	8000612 <LoopFillZerobss>

0800060e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000610:	3204      	adds	r2, #4

08000612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000614:	d3fb      	bcc.n	800060e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000616:	f000 f839 	bl	800068c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800061a:	f7ff fe41 	bl	80002a0 <main>

0800061e <LoopForever>:

LoopForever:
  b LoopForever
 800061e:	e7fe      	b.n	800061e <LoopForever>
  ldr   r0, =_estack
 8000620:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000628:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800062c:	08001038 	.word	0x08001038
  ldr r2, =_sbss
 8000630:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000634:	200005dc 	.word	0x200005dc

08000638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000638:	e7fe      	b.n	8000638 <ADC1_2_IRQHandler>
	...

0800063c <siprintf>:
 800063c:	b40e      	push	{r1, r2, r3}
 800063e:	b510      	push	{r4, lr}
 8000640:	b09d      	sub	sp, #116	@ 0x74
 8000642:	ab1f      	add	r3, sp, #124	@ 0x7c
 8000644:	9002      	str	r0, [sp, #8]
 8000646:	9006      	str	r0, [sp, #24]
 8000648:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800064c:	480a      	ldr	r0, [pc, #40]	@ (8000678 <siprintf+0x3c>)
 800064e:	9107      	str	r1, [sp, #28]
 8000650:	9104      	str	r1, [sp, #16]
 8000652:	490a      	ldr	r1, [pc, #40]	@ (800067c <siprintf+0x40>)
 8000654:	f853 2b04 	ldr.w	r2, [r3], #4
 8000658:	9105      	str	r1, [sp, #20]
 800065a:	2400      	movs	r4, #0
 800065c:	a902      	add	r1, sp, #8
 800065e:	6800      	ldr	r0, [r0, #0]
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	941b      	str	r4, [sp, #108]	@ 0x6c
 8000664:	f000 f98c 	bl	8000980 <_svfiprintf_r>
 8000668:	9b02      	ldr	r3, [sp, #8]
 800066a:	701c      	strb	r4, [r3, #0]
 800066c:	b01d      	add	sp, #116	@ 0x74
 800066e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000672:	b003      	add	sp, #12
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	2000002c 	.word	0x2000002c
 800067c:	ffff0208 	.word	0xffff0208

08000680 <__errno>:
 8000680:	4b01      	ldr	r3, [pc, #4]	@ (8000688 <__errno+0x8>)
 8000682:	6818      	ldr	r0, [r3, #0]
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	2000002c 	.word	0x2000002c

0800068c <__libc_init_array>:
 800068c:	b570      	push	{r4, r5, r6, lr}
 800068e:	4d0d      	ldr	r5, [pc, #52]	@ (80006c4 <__libc_init_array+0x38>)
 8000690:	4c0d      	ldr	r4, [pc, #52]	@ (80006c8 <__libc_init_array+0x3c>)
 8000692:	1b64      	subs	r4, r4, r5
 8000694:	10a4      	asrs	r4, r4, #2
 8000696:	2600      	movs	r6, #0
 8000698:	42a6      	cmp	r6, r4
 800069a:	d109      	bne.n	80006b0 <__libc_init_array+0x24>
 800069c:	4d0b      	ldr	r5, [pc, #44]	@ (80006cc <__libc_init_array+0x40>)
 800069e:	4c0c      	ldr	r4, [pc, #48]	@ (80006d0 <__libc_init_array+0x44>)
 80006a0:	f000 fc64 	bl	8000f6c <_init>
 80006a4:	1b64      	subs	r4, r4, r5
 80006a6:	10a4      	asrs	r4, r4, #2
 80006a8:	2600      	movs	r6, #0
 80006aa:	42a6      	cmp	r6, r4
 80006ac:	d105      	bne.n	80006ba <__libc_init_array+0x2e>
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80006b4:	4798      	blx	r3
 80006b6:	3601      	adds	r6, #1
 80006b8:	e7ee      	b.n	8000698 <__libc_init_array+0xc>
 80006ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80006be:	4798      	blx	r3
 80006c0:	3601      	adds	r6, #1
 80006c2:	e7f2      	b.n	80006aa <__libc_init_array+0x1e>
 80006c4:	08001030 	.word	0x08001030
 80006c8:	08001030 	.word	0x08001030
 80006cc:	08001030 	.word	0x08001030
 80006d0:	08001034 	.word	0x08001034

080006d4 <__retarget_lock_acquire_recursive>:
 80006d4:	4770      	bx	lr

080006d6 <__retarget_lock_release_recursive>:
 80006d6:	4770      	bx	lr

080006d8 <_free_r>:
 80006d8:	b538      	push	{r3, r4, r5, lr}
 80006da:	4605      	mov	r5, r0
 80006dc:	2900      	cmp	r1, #0
 80006de:	d041      	beq.n	8000764 <_free_r+0x8c>
 80006e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80006e4:	1f0c      	subs	r4, r1, #4
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	bfb8      	it	lt
 80006ea:	18e4      	addlt	r4, r4, r3
 80006ec:	f000 f8e0 	bl	80008b0 <__malloc_lock>
 80006f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000768 <_free_r+0x90>)
 80006f2:	6813      	ldr	r3, [r2, #0]
 80006f4:	b933      	cbnz	r3, 8000704 <_free_r+0x2c>
 80006f6:	6063      	str	r3, [r4, #4]
 80006f8:	6014      	str	r4, [r2, #0]
 80006fa:	4628      	mov	r0, r5
 80006fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000700:	f000 b8dc 	b.w	80008bc <__malloc_unlock>
 8000704:	42a3      	cmp	r3, r4
 8000706:	d908      	bls.n	800071a <_free_r+0x42>
 8000708:	6820      	ldr	r0, [r4, #0]
 800070a:	1821      	adds	r1, r4, r0
 800070c:	428b      	cmp	r3, r1
 800070e:	bf01      	itttt	eq
 8000710:	6819      	ldreq	r1, [r3, #0]
 8000712:	685b      	ldreq	r3, [r3, #4]
 8000714:	1809      	addeq	r1, r1, r0
 8000716:	6021      	streq	r1, [r4, #0]
 8000718:	e7ed      	b.n	80006f6 <_free_r+0x1e>
 800071a:	461a      	mov	r2, r3
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	b10b      	cbz	r3, 8000724 <_free_r+0x4c>
 8000720:	42a3      	cmp	r3, r4
 8000722:	d9fa      	bls.n	800071a <_free_r+0x42>
 8000724:	6811      	ldr	r1, [r2, #0]
 8000726:	1850      	adds	r0, r2, r1
 8000728:	42a0      	cmp	r0, r4
 800072a:	d10b      	bne.n	8000744 <_free_r+0x6c>
 800072c:	6820      	ldr	r0, [r4, #0]
 800072e:	4401      	add	r1, r0
 8000730:	1850      	adds	r0, r2, r1
 8000732:	4283      	cmp	r3, r0
 8000734:	6011      	str	r1, [r2, #0]
 8000736:	d1e0      	bne.n	80006fa <_free_r+0x22>
 8000738:	6818      	ldr	r0, [r3, #0]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	6053      	str	r3, [r2, #4]
 800073e:	4408      	add	r0, r1
 8000740:	6010      	str	r0, [r2, #0]
 8000742:	e7da      	b.n	80006fa <_free_r+0x22>
 8000744:	d902      	bls.n	800074c <_free_r+0x74>
 8000746:	230c      	movs	r3, #12
 8000748:	602b      	str	r3, [r5, #0]
 800074a:	e7d6      	b.n	80006fa <_free_r+0x22>
 800074c:	6820      	ldr	r0, [r4, #0]
 800074e:	1821      	adds	r1, r4, r0
 8000750:	428b      	cmp	r3, r1
 8000752:	bf04      	itt	eq
 8000754:	6819      	ldreq	r1, [r3, #0]
 8000756:	685b      	ldreq	r3, [r3, #4]
 8000758:	6063      	str	r3, [r4, #4]
 800075a:	bf04      	itt	eq
 800075c:	1809      	addeq	r1, r1, r0
 800075e:	6021      	streq	r1, [r4, #0]
 8000760:	6054      	str	r4, [r2, #4]
 8000762:	e7ca      	b.n	80006fa <_free_r+0x22>
 8000764:	bd38      	pop	{r3, r4, r5, pc}
 8000766:	bf00      	nop
 8000768:	200005d8 	.word	0x200005d8

0800076c <sbrk_aligned>:
 800076c:	b570      	push	{r4, r5, r6, lr}
 800076e:	4e0f      	ldr	r6, [pc, #60]	@ (80007ac <sbrk_aligned+0x40>)
 8000770:	460c      	mov	r4, r1
 8000772:	6831      	ldr	r1, [r6, #0]
 8000774:	4605      	mov	r5, r0
 8000776:	b911      	cbnz	r1, 800077e <sbrk_aligned+0x12>
 8000778:	f000 fba4 	bl	8000ec4 <_sbrk_r>
 800077c:	6030      	str	r0, [r6, #0]
 800077e:	4621      	mov	r1, r4
 8000780:	4628      	mov	r0, r5
 8000782:	f000 fb9f 	bl	8000ec4 <_sbrk_r>
 8000786:	1c43      	adds	r3, r0, #1
 8000788:	d103      	bne.n	8000792 <sbrk_aligned+0x26>
 800078a:	f04f 34ff 	mov.w	r4, #4294967295
 800078e:	4620      	mov	r0, r4
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	1cc4      	adds	r4, r0, #3
 8000794:	f024 0403 	bic.w	r4, r4, #3
 8000798:	42a0      	cmp	r0, r4
 800079a:	d0f8      	beq.n	800078e <sbrk_aligned+0x22>
 800079c:	1a21      	subs	r1, r4, r0
 800079e:	4628      	mov	r0, r5
 80007a0:	f000 fb90 	bl	8000ec4 <_sbrk_r>
 80007a4:	3001      	adds	r0, #1
 80007a6:	d1f2      	bne.n	800078e <sbrk_aligned+0x22>
 80007a8:	e7ef      	b.n	800078a <sbrk_aligned+0x1e>
 80007aa:	bf00      	nop
 80007ac:	200005d4 	.word	0x200005d4

080007b0 <_malloc_r>:
 80007b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007b4:	1ccd      	adds	r5, r1, #3
 80007b6:	f025 0503 	bic.w	r5, r5, #3
 80007ba:	3508      	adds	r5, #8
 80007bc:	2d0c      	cmp	r5, #12
 80007be:	bf38      	it	cc
 80007c0:	250c      	movcc	r5, #12
 80007c2:	2d00      	cmp	r5, #0
 80007c4:	4606      	mov	r6, r0
 80007c6:	db01      	blt.n	80007cc <_malloc_r+0x1c>
 80007c8:	42a9      	cmp	r1, r5
 80007ca:	d904      	bls.n	80007d6 <_malloc_r+0x26>
 80007cc:	230c      	movs	r3, #12
 80007ce:	6033      	str	r3, [r6, #0]
 80007d0:	2000      	movs	r0, #0
 80007d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80008ac <_malloc_r+0xfc>
 80007da:	f000 f869 	bl	80008b0 <__malloc_lock>
 80007de:	f8d8 3000 	ldr.w	r3, [r8]
 80007e2:	461c      	mov	r4, r3
 80007e4:	bb44      	cbnz	r4, 8000838 <_malloc_r+0x88>
 80007e6:	4629      	mov	r1, r5
 80007e8:	4630      	mov	r0, r6
 80007ea:	f7ff ffbf 	bl	800076c <sbrk_aligned>
 80007ee:	1c43      	adds	r3, r0, #1
 80007f0:	4604      	mov	r4, r0
 80007f2:	d158      	bne.n	80008a6 <_malloc_r+0xf6>
 80007f4:	f8d8 4000 	ldr.w	r4, [r8]
 80007f8:	4627      	mov	r7, r4
 80007fa:	2f00      	cmp	r7, #0
 80007fc:	d143      	bne.n	8000886 <_malloc_r+0xd6>
 80007fe:	2c00      	cmp	r4, #0
 8000800:	d04b      	beq.n	800089a <_malloc_r+0xea>
 8000802:	6823      	ldr	r3, [r4, #0]
 8000804:	4639      	mov	r1, r7
 8000806:	4630      	mov	r0, r6
 8000808:	eb04 0903 	add.w	r9, r4, r3
 800080c:	f000 fb5a 	bl	8000ec4 <_sbrk_r>
 8000810:	4581      	cmp	r9, r0
 8000812:	d142      	bne.n	800089a <_malloc_r+0xea>
 8000814:	6821      	ldr	r1, [r4, #0]
 8000816:	1a6d      	subs	r5, r5, r1
 8000818:	4629      	mov	r1, r5
 800081a:	4630      	mov	r0, r6
 800081c:	f7ff ffa6 	bl	800076c <sbrk_aligned>
 8000820:	3001      	adds	r0, #1
 8000822:	d03a      	beq.n	800089a <_malloc_r+0xea>
 8000824:	6823      	ldr	r3, [r4, #0]
 8000826:	442b      	add	r3, r5
 8000828:	6023      	str	r3, [r4, #0]
 800082a:	f8d8 3000 	ldr.w	r3, [r8]
 800082e:	685a      	ldr	r2, [r3, #4]
 8000830:	bb62      	cbnz	r2, 800088c <_malloc_r+0xdc>
 8000832:	f8c8 7000 	str.w	r7, [r8]
 8000836:	e00f      	b.n	8000858 <_malloc_r+0xa8>
 8000838:	6822      	ldr	r2, [r4, #0]
 800083a:	1b52      	subs	r2, r2, r5
 800083c:	d420      	bmi.n	8000880 <_malloc_r+0xd0>
 800083e:	2a0b      	cmp	r2, #11
 8000840:	d917      	bls.n	8000872 <_malloc_r+0xc2>
 8000842:	1961      	adds	r1, r4, r5
 8000844:	42a3      	cmp	r3, r4
 8000846:	6025      	str	r5, [r4, #0]
 8000848:	bf18      	it	ne
 800084a:	6059      	strne	r1, [r3, #4]
 800084c:	6863      	ldr	r3, [r4, #4]
 800084e:	bf08      	it	eq
 8000850:	f8c8 1000 	streq.w	r1, [r8]
 8000854:	5162      	str	r2, [r4, r5]
 8000856:	604b      	str	r3, [r1, #4]
 8000858:	4630      	mov	r0, r6
 800085a:	f000 f82f 	bl	80008bc <__malloc_unlock>
 800085e:	f104 000b 	add.w	r0, r4, #11
 8000862:	1d23      	adds	r3, r4, #4
 8000864:	f020 0007 	bic.w	r0, r0, #7
 8000868:	1ac2      	subs	r2, r0, r3
 800086a:	bf1c      	itt	ne
 800086c:	1a1b      	subne	r3, r3, r0
 800086e:	50a3      	strne	r3, [r4, r2]
 8000870:	e7af      	b.n	80007d2 <_malloc_r+0x22>
 8000872:	6862      	ldr	r2, [r4, #4]
 8000874:	42a3      	cmp	r3, r4
 8000876:	bf0c      	ite	eq
 8000878:	f8c8 2000 	streq.w	r2, [r8]
 800087c:	605a      	strne	r2, [r3, #4]
 800087e:	e7eb      	b.n	8000858 <_malloc_r+0xa8>
 8000880:	4623      	mov	r3, r4
 8000882:	6864      	ldr	r4, [r4, #4]
 8000884:	e7ae      	b.n	80007e4 <_malloc_r+0x34>
 8000886:	463c      	mov	r4, r7
 8000888:	687f      	ldr	r7, [r7, #4]
 800088a:	e7b6      	b.n	80007fa <_malloc_r+0x4a>
 800088c:	461a      	mov	r2, r3
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	42a3      	cmp	r3, r4
 8000892:	d1fb      	bne.n	800088c <_malloc_r+0xdc>
 8000894:	2300      	movs	r3, #0
 8000896:	6053      	str	r3, [r2, #4]
 8000898:	e7de      	b.n	8000858 <_malloc_r+0xa8>
 800089a:	230c      	movs	r3, #12
 800089c:	6033      	str	r3, [r6, #0]
 800089e:	4630      	mov	r0, r6
 80008a0:	f000 f80c 	bl	80008bc <__malloc_unlock>
 80008a4:	e794      	b.n	80007d0 <_malloc_r+0x20>
 80008a6:	6005      	str	r5, [r0, #0]
 80008a8:	e7d6      	b.n	8000858 <_malloc_r+0xa8>
 80008aa:	bf00      	nop
 80008ac:	200005d8 	.word	0x200005d8

080008b0 <__malloc_lock>:
 80008b0:	4801      	ldr	r0, [pc, #4]	@ (80008b8 <__malloc_lock+0x8>)
 80008b2:	f7ff bf0f 	b.w	80006d4 <__retarget_lock_acquire_recursive>
 80008b6:	bf00      	nop
 80008b8:	200005d0 	.word	0x200005d0

080008bc <__malloc_unlock>:
 80008bc:	4801      	ldr	r0, [pc, #4]	@ (80008c4 <__malloc_unlock+0x8>)
 80008be:	f7ff bf0a 	b.w	80006d6 <__retarget_lock_release_recursive>
 80008c2:	bf00      	nop
 80008c4:	200005d0 	.word	0x200005d0

080008c8 <__ssputs_r>:
 80008c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008cc:	688e      	ldr	r6, [r1, #8]
 80008ce:	461f      	mov	r7, r3
 80008d0:	42be      	cmp	r6, r7
 80008d2:	680b      	ldr	r3, [r1, #0]
 80008d4:	4682      	mov	sl, r0
 80008d6:	460c      	mov	r4, r1
 80008d8:	4690      	mov	r8, r2
 80008da:	d82d      	bhi.n	8000938 <__ssputs_r+0x70>
 80008dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80008e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80008e4:	d026      	beq.n	8000934 <__ssputs_r+0x6c>
 80008e6:	6965      	ldr	r5, [r4, #20]
 80008e8:	6909      	ldr	r1, [r1, #16]
 80008ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80008ee:	eba3 0901 	sub.w	r9, r3, r1
 80008f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80008f6:	1c7b      	adds	r3, r7, #1
 80008f8:	444b      	add	r3, r9
 80008fa:	106d      	asrs	r5, r5, #1
 80008fc:	429d      	cmp	r5, r3
 80008fe:	bf38      	it	cc
 8000900:	461d      	movcc	r5, r3
 8000902:	0553      	lsls	r3, r2, #21
 8000904:	d527      	bpl.n	8000956 <__ssputs_r+0x8e>
 8000906:	4629      	mov	r1, r5
 8000908:	f7ff ff52 	bl	80007b0 <_malloc_r>
 800090c:	4606      	mov	r6, r0
 800090e:	b360      	cbz	r0, 800096a <__ssputs_r+0xa2>
 8000910:	6921      	ldr	r1, [r4, #16]
 8000912:	464a      	mov	r2, r9
 8000914:	f000 fae6 	bl	8000ee4 <memcpy>
 8000918:	89a3      	ldrh	r3, [r4, #12]
 800091a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800091e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000922:	81a3      	strh	r3, [r4, #12]
 8000924:	6126      	str	r6, [r4, #16]
 8000926:	6165      	str	r5, [r4, #20]
 8000928:	444e      	add	r6, r9
 800092a:	eba5 0509 	sub.w	r5, r5, r9
 800092e:	6026      	str	r6, [r4, #0]
 8000930:	60a5      	str	r5, [r4, #8]
 8000932:	463e      	mov	r6, r7
 8000934:	42be      	cmp	r6, r7
 8000936:	d900      	bls.n	800093a <__ssputs_r+0x72>
 8000938:	463e      	mov	r6, r7
 800093a:	6820      	ldr	r0, [r4, #0]
 800093c:	4632      	mov	r2, r6
 800093e:	4641      	mov	r1, r8
 8000940:	f000 faa6 	bl	8000e90 <memmove>
 8000944:	68a3      	ldr	r3, [r4, #8]
 8000946:	1b9b      	subs	r3, r3, r6
 8000948:	60a3      	str	r3, [r4, #8]
 800094a:	6823      	ldr	r3, [r4, #0]
 800094c:	4433      	add	r3, r6
 800094e:	6023      	str	r3, [r4, #0]
 8000950:	2000      	movs	r0, #0
 8000952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000956:	462a      	mov	r2, r5
 8000958:	f000 fad2 	bl	8000f00 <_realloc_r>
 800095c:	4606      	mov	r6, r0
 800095e:	2800      	cmp	r0, #0
 8000960:	d1e0      	bne.n	8000924 <__ssputs_r+0x5c>
 8000962:	6921      	ldr	r1, [r4, #16]
 8000964:	4650      	mov	r0, sl
 8000966:	f7ff feb7 	bl	80006d8 <_free_r>
 800096a:	230c      	movs	r3, #12
 800096c:	f8ca 3000 	str.w	r3, [sl]
 8000970:	89a3      	ldrh	r3, [r4, #12]
 8000972:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000976:	81a3      	strh	r3, [r4, #12]
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	e7e9      	b.n	8000952 <__ssputs_r+0x8a>
	...

08000980 <_svfiprintf_r>:
 8000980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000984:	4698      	mov	r8, r3
 8000986:	898b      	ldrh	r3, [r1, #12]
 8000988:	061b      	lsls	r3, r3, #24
 800098a:	b09d      	sub	sp, #116	@ 0x74
 800098c:	4607      	mov	r7, r0
 800098e:	460d      	mov	r5, r1
 8000990:	4614      	mov	r4, r2
 8000992:	d510      	bpl.n	80009b6 <_svfiprintf_r+0x36>
 8000994:	690b      	ldr	r3, [r1, #16]
 8000996:	b973      	cbnz	r3, 80009b6 <_svfiprintf_r+0x36>
 8000998:	2140      	movs	r1, #64	@ 0x40
 800099a:	f7ff ff09 	bl	80007b0 <_malloc_r>
 800099e:	6028      	str	r0, [r5, #0]
 80009a0:	6128      	str	r0, [r5, #16]
 80009a2:	b930      	cbnz	r0, 80009b2 <_svfiprintf_r+0x32>
 80009a4:	230c      	movs	r3, #12
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	b01d      	add	sp, #116	@ 0x74
 80009ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009b2:	2340      	movs	r3, #64	@ 0x40
 80009b4:	616b      	str	r3, [r5, #20]
 80009b6:	2300      	movs	r3, #0
 80009b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80009ba:	2320      	movs	r3, #32
 80009bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80009c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80009c4:	2330      	movs	r3, #48	@ 0x30
 80009c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000b64 <_svfiprintf_r+0x1e4>
 80009ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80009ce:	f04f 0901 	mov.w	r9, #1
 80009d2:	4623      	mov	r3, r4
 80009d4:	469a      	mov	sl, r3
 80009d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80009da:	b10a      	cbz	r2, 80009e0 <_svfiprintf_r+0x60>
 80009dc:	2a25      	cmp	r2, #37	@ 0x25
 80009de:	d1f9      	bne.n	80009d4 <_svfiprintf_r+0x54>
 80009e0:	ebba 0b04 	subs.w	fp, sl, r4
 80009e4:	d00b      	beq.n	80009fe <_svfiprintf_r+0x7e>
 80009e6:	465b      	mov	r3, fp
 80009e8:	4622      	mov	r2, r4
 80009ea:	4629      	mov	r1, r5
 80009ec:	4638      	mov	r0, r7
 80009ee:	f7ff ff6b 	bl	80008c8 <__ssputs_r>
 80009f2:	3001      	adds	r0, #1
 80009f4:	f000 80a7 	beq.w	8000b46 <_svfiprintf_r+0x1c6>
 80009f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80009fa:	445a      	add	r2, fp
 80009fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80009fe:	f89a 3000 	ldrb.w	r3, [sl]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	f000 809f 	beq.w	8000b46 <_svfiprintf_r+0x1c6>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a12:	f10a 0a01 	add.w	sl, sl, #1
 8000a16:	9304      	str	r3, [sp, #16]
 8000a18:	9307      	str	r3, [sp, #28]
 8000a1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000a1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8000a20:	4654      	mov	r4, sl
 8000a22:	2205      	movs	r2, #5
 8000a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a28:	484e      	ldr	r0, [pc, #312]	@ (8000b64 <_svfiprintf_r+0x1e4>)
 8000a2a:	f7ff fbd9 	bl	80001e0 <memchr>
 8000a2e:	9a04      	ldr	r2, [sp, #16]
 8000a30:	b9d8      	cbnz	r0, 8000a6a <_svfiprintf_r+0xea>
 8000a32:	06d0      	lsls	r0, r2, #27
 8000a34:	bf44      	itt	mi
 8000a36:	2320      	movmi	r3, #32
 8000a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a3c:	0711      	lsls	r1, r2, #28
 8000a3e:	bf44      	itt	mi
 8000a40:	232b      	movmi	r3, #43	@ 0x2b
 8000a42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a46:	f89a 3000 	ldrb.w	r3, [sl]
 8000a4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a4c:	d015      	beq.n	8000a7a <_svfiprintf_r+0xfa>
 8000a4e:	9a07      	ldr	r2, [sp, #28]
 8000a50:	4654      	mov	r4, sl
 8000a52:	2000      	movs	r0, #0
 8000a54:	f04f 0c0a 	mov.w	ip, #10
 8000a58:	4621      	mov	r1, r4
 8000a5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000a5e:	3b30      	subs	r3, #48	@ 0x30
 8000a60:	2b09      	cmp	r3, #9
 8000a62:	d94b      	bls.n	8000afc <_svfiprintf_r+0x17c>
 8000a64:	b1b0      	cbz	r0, 8000a94 <_svfiprintf_r+0x114>
 8000a66:	9207      	str	r2, [sp, #28]
 8000a68:	e014      	b.n	8000a94 <_svfiprintf_r+0x114>
 8000a6a:	eba0 0308 	sub.w	r3, r0, r8
 8000a6e:	fa09 f303 	lsl.w	r3, r9, r3
 8000a72:	4313      	orrs	r3, r2
 8000a74:	9304      	str	r3, [sp, #16]
 8000a76:	46a2      	mov	sl, r4
 8000a78:	e7d2      	b.n	8000a20 <_svfiprintf_r+0xa0>
 8000a7a:	9b03      	ldr	r3, [sp, #12]
 8000a7c:	1d19      	adds	r1, r3, #4
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	9103      	str	r1, [sp, #12]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	bfbb      	ittet	lt
 8000a86:	425b      	neglt	r3, r3
 8000a88:	f042 0202 	orrlt.w	r2, r2, #2
 8000a8c:	9307      	strge	r3, [sp, #28]
 8000a8e:	9307      	strlt	r3, [sp, #28]
 8000a90:	bfb8      	it	lt
 8000a92:	9204      	strlt	r2, [sp, #16]
 8000a94:	7823      	ldrb	r3, [r4, #0]
 8000a96:	2b2e      	cmp	r3, #46	@ 0x2e
 8000a98:	d10a      	bne.n	8000ab0 <_svfiprintf_r+0x130>
 8000a9a:	7863      	ldrb	r3, [r4, #1]
 8000a9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a9e:	d132      	bne.n	8000b06 <_svfiprintf_r+0x186>
 8000aa0:	9b03      	ldr	r3, [sp, #12]
 8000aa2:	1d1a      	adds	r2, r3, #4
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	9203      	str	r2, [sp, #12]
 8000aa8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000aac:	3402      	adds	r4, #2
 8000aae:	9305      	str	r3, [sp, #20]
 8000ab0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000b74 <_svfiprintf_r+0x1f4>
 8000ab4:	7821      	ldrb	r1, [r4, #0]
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	4650      	mov	r0, sl
 8000aba:	f7ff fb91 	bl	80001e0 <memchr>
 8000abe:	b138      	cbz	r0, 8000ad0 <_svfiprintf_r+0x150>
 8000ac0:	9b04      	ldr	r3, [sp, #16]
 8000ac2:	eba0 000a 	sub.w	r0, r0, sl
 8000ac6:	2240      	movs	r2, #64	@ 0x40
 8000ac8:	4082      	lsls	r2, r0
 8000aca:	4313      	orrs	r3, r2
 8000acc:	3401      	adds	r4, #1
 8000ace:	9304      	str	r3, [sp, #16]
 8000ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ad4:	4824      	ldr	r0, [pc, #144]	@ (8000b68 <_svfiprintf_r+0x1e8>)
 8000ad6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000ada:	2206      	movs	r2, #6
 8000adc:	f7ff fb80 	bl	80001e0 <memchr>
 8000ae0:	2800      	cmp	r0, #0
 8000ae2:	d036      	beq.n	8000b52 <_svfiprintf_r+0x1d2>
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <_svfiprintf_r+0x1ec>)
 8000ae6:	bb1b      	cbnz	r3, 8000b30 <_svfiprintf_r+0x1b0>
 8000ae8:	9b03      	ldr	r3, [sp, #12]
 8000aea:	3307      	adds	r3, #7
 8000aec:	f023 0307 	bic.w	r3, r3, #7
 8000af0:	3308      	adds	r3, #8
 8000af2:	9303      	str	r3, [sp, #12]
 8000af4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000af6:	4433      	add	r3, r6
 8000af8:	9309      	str	r3, [sp, #36]	@ 0x24
 8000afa:	e76a      	b.n	80009d2 <_svfiprintf_r+0x52>
 8000afc:	fb0c 3202 	mla	r2, ip, r2, r3
 8000b00:	460c      	mov	r4, r1
 8000b02:	2001      	movs	r0, #1
 8000b04:	e7a8      	b.n	8000a58 <_svfiprintf_r+0xd8>
 8000b06:	2300      	movs	r3, #0
 8000b08:	3401      	adds	r4, #1
 8000b0a:	9305      	str	r3, [sp, #20]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f04f 0c0a 	mov.w	ip, #10
 8000b12:	4620      	mov	r0, r4
 8000b14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b18:	3a30      	subs	r2, #48	@ 0x30
 8000b1a:	2a09      	cmp	r2, #9
 8000b1c:	d903      	bls.n	8000b26 <_svfiprintf_r+0x1a6>
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d0c6      	beq.n	8000ab0 <_svfiprintf_r+0x130>
 8000b22:	9105      	str	r1, [sp, #20]
 8000b24:	e7c4      	b.n	8000ab0 <_svfiprintf_r+0x130>
 8000b26:	fb0c 2101 	mla	r1, ip, r1, r2
 8000b2a:	4604      	mov	r4, r0
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e7f0      	b.n	8000b12 <_svfiprintf_r+0x192>
 8000b30:	ab03      	add	r3, sp, #12
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	462a      	mov	r2, r5
 8000b36:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <_svfiprintf_r+0x1f0>)
 8000b38:	a904      	add	r1, sp, #16
 8000b3a:	4638      	mov	r0, r7
 8000b3c:	f3af 8000 	nop.w
 8000b40:	1c42      	adds	r2, r0, #1
 8000b42:	4606      	mov	r6, r0
 8000b44:	d1d6      	bne.n	8000af4 <_svfiprintf_r+0x174>
 8000b46:	89ab      	ldrh	r3, [r5, #12]
 8000b48:	065b      	lsls	r3, r3, #25
 8000b4a:	f53f af2d 	bmi.w	80009a8 <_svfiprintf_r+0x28>
 8000b4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000b50:	e72c      	b.n	80009ac <_svfiprintf_r+0x2c>
 8000b52:	ab03      	add	r3, sp, #12
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	462a      	mov	r2, r5
 8000b58:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <_svfiprintf_r+0x1f0>)
 8000b5a:	a904      	add	r1, sp, #16
 8000b5c:	4638      	mov	r0, r7
 8000b5e:	f000 f879 	bl	8000c54 <_printf_i>
 8000b62:	e7ed      	b.n	8000b40 <_svfiprintf_r+0x1c0>
 8000b64:	08000ff2 	.word	0x08000ff2
 8000b68:	08000ffc 	.word	0x08000ffc
 8000b6c:	00000000 	.word	0x00000000
 8000b70:	080008c9 	.word	0x080008c9
 8000b74:	08000ff8 	.word	0x08000ff8

08000b78 <_printf_common>:
 8000b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b7c:	4616      	mov	r6, r2
 8000b7e:	4698      	mov	r8, r3
 8000b80:	688a      	ldr	r2, [r1, #8]
 8000b82:	690b      	ldr	r3, [r1, #16]
 8000b84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	bfb8      	it	lt
 8000b8c:	4613      	movlt	r3, r2
 8000b8e:	6033      	str	r3, [r6, #0]
 8000b90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000b94:	4607      	mov	r7, r0
 8000b96:	460c      	mov	r4, r1
 8000b98:	b10a      	cbz	r2, 8000b9e <_printf_common+0x26>
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	6033      	str	r3, [r6, #0]
 8000b9e:	6823      	ldr	r3, [r4, #0]
 8000ba0:	0699      	lsls	r1, r3, #26
 8000ba2:	bf42      	ittt	mi
 8000ba4:	6833      	ldrmi	r3, [r6, #0]
 8000ba6:	3302      	addmi	r3, #2
 8000ba8:	6033      	strmi	r3, [r6, #0]
 8000baa:	6825      	ldr	r5, [r4, #0]
 8000bac:	f015 0506 	ands.w	r5, r5, #6
 8000bb0:	d106      	bne.n	8000bc0 <_printf_common+0x48>
 8000bb2:	f104 0a19 	add.w	sl, r4, #25
 8000bb6:	68e3      	ldr	r3, [r4, #12]
 8000bb8:	6832      	ldr	r2, [r6, #0]
 8000bba:	1a9b      	subs	r3, r3, r2
 8000bbc:	42ab      	cmp	r3, r5
 8000bbe:	dc26      	bgt.n	8000c0e <_printf_common+0x96>
 8000bc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000bc4:	6822      	ldr	r2, [r4, #0]
 8000bc6:	3b00      	subs	r3, #0
 8000bc8:	bf18      	it	ne
 8000bca:	2301      	movne	r3, #1
 8000bcc:	0692      	lsls	r2, r2, #26
 8000bce:	d42b      	bmi.n	8000c28 <_printf_common+0xb0>
 8000bd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000bd4:	4641      	mov	r1, r8
 8000bd6:	4638      	mov	r0, r7
 8000bd8:	47c8      	blx	r9
 8000bda:	3001      	adds	r0, #1
 8000bdc:	d01e      	beq.n	8000c1c <_printf_common+0xa4>
 8000bde:	6823      	ldr	r3, [r4, #0]
 8000be0:	6922      	ldr	r2, [r4, #16]
 8000be2:	f003 0306 	and.w	r3, r3, #6
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	bf02      	ittt	eq
 8000bea:	68e5      	ldreq	r5, [r4, #12]
 8000bec:	6833      	ldreq	r3, [r6, #0]
 8000bee:	1aed      	subeq	r5, r5, r3
 8000bf0:	68a3      	ldr	r3, [r4, #8]
 8000bf2:	bf0c      	ite	eq
 8000bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000bf8:	2500      	movne	r5, #0
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	bfc4      	itt	gt
 8000bfe:	1a9b      	subgt	r3, r3, r2
 8000c00:	18ed      	addgt	r5, r5, r3
 8000c02:	2600      	movs	r6, #0
 8000c04:	341a      	adds	r4, #26
 8000c06:	42b5      	cmp	r5, r6
 8000c08:	d11a      	bne.n	8000c40 <_printf_common+0xc8>
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	e008      	b.n	8000c20 <_printf_common+0xa8>
 8000c0e:	2301      	movs	r3, #1
 8000c10:	4652      	mov	r2, sl
 8000c12:	4641      	mov	r1, r8
 8000c14:	4638      	mov	r0, r7
 8000c16:	47c8      	blx	r9
 8000c18:	3001      	adds	r0, #1
 8000c1a:	d103      	bne.n	8000c24 <_printf_common+0xac>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c24:	3501      	adds	r5, #1
 8000c26:	e7c6      	b.n	8000bb6 <_printf_common+0x3e>
 8000c28:	18e1      	adds	r1, r4, r3
 8000c2a:	1c5a      	adds	r2, r3, #1
 8000c2c:	2030      	movs	r0, #48	@ 0x30
 8000c2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000c32:	4422      	add	r2, r4
 8000c34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000c38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000c3c:	3302      	adds	r3, #2
 8000c3e:	e7c7      	b.n	8000bd0 <_printf_common+0x58>
 8000c40:	2301      	movs	r3, #1
 8000c42:	4622      	mov	r2, r4
 8000c44:	4641      	mov	r1, r8
 8000c46:	4638      	mov	r0, r7
 8000c48:	47c8      	blx	r9
 8000c4a:	3001      	adds	r0, #1
 8000c4c:	d0e6      	beq.n	8000c1c <_printf_common+0xa4>
 8000c4e:	3601      	adds	r6, #1
 8000c50:	e7d9      	b.n	8000c06 <_printf_common+0x8e>
	...

08000c54 <_printf_i>:
 8000c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c58:	7e0f      	ldrb	r7, [r1, #24]
 8000c5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000c5c:	2f78      	cmp	r7, #120	@ 0x78
 8000c5e:	4691      	mov	r9, r2
 8000c60:	4680      	mov	r8, r0
 8000c62:	460c      	mov	r4, r1
 8000c64:	469a      	mov	sl, r3
 8000c66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000c6a:	d807      	bhi.n	8000c7c <_printf_i+0x28>
 8000c6c:	2f62      	cmp	r7, #98	@ 0x62
 8000c6e:	d80a      	bhi.n	8000c86 <_printf_i+0x32>
 8000c70:	2f00      	cmp	r7, #0
 8000c72:	f000 80d1 	beq.w	8000e18 <_printf_i+0x1c4>
 8000c76:	2f58      	cmp	r7, #88	@ 0x58
 8000c78:	f000 80b8 	beq.w	8000dec <_printf_i+0x198>
 8000c7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000c80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000c84:	e03a      	b.n	8000cfc <_printf_i+0xa8>
 8000c86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000c8a:	2b15      	cmp	r3, #21
 8000c8c:	d8f6      	bhi.n	8000c7c <_printf_i+0x28>
 8000c8e:	a101      	add	r1, pc, #4	@ (adr r1, 8000c94 <_printf_i+0x40>)
 8000c90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000c94:	08000ced 	.word	0x08000ced
 8000c98:	08000d01 	.word	0x08000d01
 8000c9c:	08000c7d 	.word	0x08000c7d
 8000ca0:	08000c7d 	.word	0x08000c7d
 8000ca4:	08000c7d 	.word	0x08000c7d
 8000ca8:	08000c7d 	.word	0x08000c7d
 8000cac:	08000d01 	.word	0x08000d01
 8000cb0:	08000c7d 	.word	0x08000c7d
 8000cb4:	08000c7d 	.word	0x08000c7d
 8000cb8:	08000c7d 	.word	0x08000c7d
 8000cbc:	08000c7d 	.word	0x08000c7d
 8000cc0:	08000dff 	.word	0x08000dff
 8000cc4:	08000d2b 	.word	0x08000d2b
 8000cc8:	08000db9 	.word	0x08000db9
 8000ccc:	08000c7d 	.word	0x08000c7d
 8000cd0:	08000c7d 	.word	0x08000c7d
 8000cd4:	08000e21 	.word	0x08000e21
 8000cd8:	08000c7d 	.word	0x08000c7d
 8000cdc:	08000d2b 	.word	0x08000d2b
 8000ce0:	08000c7d 	.word	0x08000c7d
 8000ce4:	08000c7d 	.word	0x08000c7d
 8000ce8:	08000dc1 	.word	0x08000dc1
 8000cec:	6833      	ldr	r3, [r6, #0]
 8000cee:	1d1a      	adds	r2, r3, #4
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6032      	str	r2, [r6, #0]
 8000cf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000cf8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e09c      	b.n	8000e3a <_printf_i+0x1e6>
 8000d00:	6833      	ldr	r3, [r6, #0]
 8000d02:	6820      	ldr	r0, [r4, #0]
 8000d04:	1d19      	adds	r1, r3, #4
 8000d06:	6031      	str	r1, [r6, #0]
 8000d08:	0606      	lsls	r6, r0, #24
 8000d0a:	d501      	bpl.n	8000d10 <_printf_i+0xbc>
 8000d0c:	681d      	ldr	r5, [r3, #0]
 8000d0e:	e003      	b.n	8000d18 <_printf_i+0xc4>
 8000d10:	0645      	lsls	r5, r0, #25
 8000d12:	d5fb      	bpl.n	8000d0c <_printf_i+0xb8>
 8000d14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000d18:	2d00      	cmp	r5, #0
 8000d1a:	da03      	bge.n	8000d24 <_printf_i+0xd0>
 8000d1c:	232d      	movs	r3, #45	@ 0x2d
 8000d1e:	426d      	negs	r5, r5
 8000d20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000d24:	4858      	ldr	r0, [pc, #352]	@ (8000e88 <_printf_i+0x234>)
 8000d26:	230a      	movs	r3, #10
 8000d28:	e011      	b.n	8000d4e <_printf_i+0xfa>
 8000d2a:	6821      	ldr	r1, [r4, #0]
 8000d2c:	6833      	ldr	r3, [r6, #0]
 8000d2e:	0608      	lsls	r0, r1, #24
 8000d30:	f853 5b04 	ldr.w	r5, [r3], #4
 8000d34:	d402      	bmi.n	8000d3c <_printf_i+0xe8>
 8000d36:	0649      	lsls	r1, r1, #25
 8000d38:	bf48      	it	mi
 8000d3a:	b2ad      	uxthmi	r5, r5
 8000d3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8000d3e:	4852      	ldr	r0, [pc, #328]	@ (8000e88 <_printf_i+0x234>)
 8000d40:	6033      	str	r3, [r6, #0]
 8000d42:	bf14      	ite	ne
 8000d44:	230a      	movne	r3, #10
 8000d46:	2308      	moveq	r3, #8
 8000d48:	2100      	movs	r1, #0
 8000d4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000d4e:	6866      	ldr	r6, [r4, #4]
 8000d50:	60a6      	str	r6, [r4, #8]
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	db05      	blt.n	8000d62 <_printf_i+0x10e>
 8000d56:	6821      	ldr	r1, [r4, #0]
 8000d58:	432e      	orrs	r6, r5
 8000d5a:	f021 0104 	bic.w	r1, r1, #4
 8000d5e:	6021      	str	r1, [r4, #0]
 8000d60:	d04b      	beq.n	8000dfa <_printf_i+0x1a6>
 8000d62:	4616      	mov	r6, r2
 8000d64:	fbb5 f1f3 	udiv	r1, r5, r3
 8000d68:	fb03 5711 	mls	r7, r3, r1, r5
 8000d6c:	5dc7      	ldrb	r7, [r0, r7]
 8000d6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000d72:	462f      	mov	r7, r5
 8000d74:	42bb      	cmp	r3, r7
 8000d76:	460d      	mov	r5, r1
 8000d78:	d9f4      	bls.n	8000d64 <_printf_i+0x110>
 8000d7a:	2b08      	cmp	r3, #8
 8000d7c:	d10b      	bne.n	8000d96 <_printf_i+0x142>
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	07df      	lsls	r7, r3, #31
 8000d82:	d508      	bpl.n	8000d96 <_printf_i+0x142>
 8000d84:	6923      	ldr	r3, [r4, #16]
 8000d86:	6861      	ldr	r1, [r4, #4]
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	bfde      	ittt	le
 8000d8c:	2330      	movle	r3, #48	@ 0x30
 8000d8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000d92:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000d96:	1b92      	subs	r2, r2, r6
 8000d98:	6122      	str	r2, [r4, #16]
 8000d9a:	f8cd a000 	str.w	sl, [sp]
 8000d9e:	464b      	mov	r3, r9
 8000da0:	aa03      	add	r2, sp, #12
 8000da2:	4621      	mov	r1, r4
 8000da4:	4640      	mov	r0, r8
 8000da6:	f7ff fee7 	bl	8000b78 <_printf_common>
 8000daa:	3001      	adds	r0, #1
 8000dac:	d14a      	bne.n	8000e44 <_printf_i+0x1f0>
 8000dae:	f04f 30ff 	mov.w	r0, #4294967295
 8000db2:	b004      	add	sp, #16
 8000db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db8:	6823      	ldr	r3, [r4, #0]
 8000dba:	f043 0320 	orr.w	r3, r3, #32
 8000dbe:	6023      	str	r3, [r4, #0]
 8000dc0:	4832      	ldr	r0, [pc, #200]	@ (8000e8c <_printf_i+0x238>)
 8000dc2:	2778      	movs	r7, #120	@ 0x78
 8000dc4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000dc8:	6823      	ldr	r3, [r4, #0]
 8000dca:	6831      	ldr	r1, [r6, #0]
 8000dcc:	061f      	lsls	r7, r3, #24
 8000dce:	f851 5b04 	ldr.w	r5, [r1], #4
 8000dd2:	d402      	bmi.n	8000dda <_printf_i+0x186>
 8000dd4:	065f      	lsls	r7, r3, #25
 8000dd6:	bf48      	it	mi
 8000dd8:	b2ad      	uxthmi	r5, r5
 8000dda:	6031      	str	r1, [r6, #0]
 8000ddc:	07d9      	lsls	r1, r3, #31
 8000dde:	bf44      	itt	mi
 8000de0:	f043 0320 	orrmi.w	r3, r3, #32
 8000de4:	6023      	strmi	r3, [r4, #0]
 8000de6:	b11d      	cbz	r5, 8000df0 <_printf_i+0x19c>
 8000de8:	2310      	movs	r3, #16
 8000dea:	e7ad      	b.n	8000d48 <_printf_i+0xf4>
 8000dec:	4826      	ldr	r0, [pc, #152]	@ (8000e88 <_printf_i+0x234>)
 8000dee:	e7e9      	b.n	8000dc4 <_printf_i+0x170>
 8000df0:	6823      	ldr	r3, [r4, #0]
 8000df2:	f023 0320 	bic.w	r3, r3, #32
 8000df6:	6023      	str	r3, [r4, #0]
 8000df8:	e7f6      	b.n	8000de8 <_printf_i+0x194>
 8000dfa:	4616      	mov	r6, r2
 8000dfc:	e7bd      	b.n	8000d7a <_printf_i+0x126>
 8000dfe:	6833      	ldr	r3, [r6, #0]
 8000e00:	6825      	ldr	r5, [r4, #0]
 8000e02:	6961      	ldr	r1, [r4, #20]
 8000e04:	1d18      	adds	r0, r3, #4
 8000e06:	6030      	str	r0, [r6, #0]
 8000e08:	062e      	lsls	r6, r5, #24
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	d501      	bpl.n	8000e12 <_printf_i+0x1be>
 8000e0e:	6019      	str	r1, [r3, #0]
 8000e10:	e002      	b.n	8000e18 <_printf_i+0x1c4>
 8000e12:	0668      	lsls	r0, r5, #25
 8000e14:	d5fb      	bpl.n	8000e0e <_printf_i+0x1ba>
 8000e16:	8019      	strh	r1, [r3, #0]
 8000e18:	2300      	movs	r3, #0
 8000e1a:	6123      	str	r3, [r4, #16]
 8000e1c:	4616      	mov	r6, r2
 8000e1e:	e7bc      	b.n	8000d9a <_printf_i+0x146>
 8000e20:	6833      	ldr	r3, [r6, #0]
 8000e22:	1d1a      	adds	r2, r3, #4
 8000e24:	6032      	str	r2, [r6, #0]
 8000e26:	681e      	ldr	r6, [r3, #0]
 8000e28:	6862      	ldr	r2, [r4, #4]
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4630      	mov	r0, r6
 8000e2e:	f7ff f9d7 	bl	80001e0 <memchr>
 8000e32:	b108      	cbz	r0, 8000e38 <_printf_i+0x1e4>
 8000e34:	1b80      	subs	r0, r0, r6
 8000e36:	6060      	str	r0, [r4, #4]
 8000e38:	6863      	ldr	r3, [r4, #4]
 8000e3a:	6123      	str	r3, [r4, #16]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e42:	e7aa      	b.n	8000d9a <_printf_i+0x146>
 8000e44:	6923      	ldr	r3, [r4, #16]
 8000e46:	4632      	mov	r2, r6
 8000e48:	4649      	mov	r1, r9
 8000e4a:	4640      	mov	r0, r8
 8000e4c:	47d0      	blx	sl
 8000e4e:	3001      	adds	r0, #1
 8000e50:	d0ad      	beq.n	8000dae <_printf_i+0x15a>
 8000e52:	6823      	ldr	r3, [r4, #0]
 8000e54:	079b      	lsls	r3, r3, #30
 8000e56:	d413      	bmi.n	8000e80 <_printf_i+0x22c>
 8000e58:	68e0      	ldr	r0, [r4, #12]
 8000e5a:	9b03      	ldr	r3, [sp, #12]
 8000e5c:	4298      	cmp	r0, r3
 8000e5e:	bfb8      	it	lt
 8000e60:	4618      	movlt	r0, r3
 8000e62:	e7a6      	b.n	8000db2 <_printf_i+0x15e>
 8000e64:	2301      	movs	r3, #1
 8000e66:	4632      	mov	r2, r6
 8000e68:	4649      	mov	r1, r9
 8000e6a:	4640      	mov	r0, r8
 8000e6c:	47d0      	blx	sl
 8000e6e:	3001      	adds	r0, #1
 8000e70:	d09d      	beq.n	8000dae <_printf_i+0x15a>
 8000e72:	3501      	adds	r5, #1
 8000e74:	68e3      	ldr	r3, [r4, #12]
 8000e76:	9903      	ldr	r1, [sp, #12]
 8000e78:	1a5b      	subs	r3, r3, r1
 8000e7a:	42ab      	cmp	r3, r5
 8000e7c:	dcf2      	bgt.n	8000e64 <_printf_i+0x210>
 8000e7e:	e7eb      	b.n	8000e58 <_printf_i+0x204>
 8000e80:	2500      	movs	r5, #0
 8000e82:	f104 0619 	add.w	r6, r4, #25
 8000e86:	e7f5      	b.n	8000e74 <_printf_i+0x220>
 8000e88:	08001003 	.word	0x08001003
 8000e8c:	08001014 	.word	0x08001014

08000e90 <memmove>:
 8000e90:	4288      	cmp	r0, r1
 8000e92:	b510      	push	{r4, lr}
 8000e94:	eb01 0402 	add.w	r4, r1, r2
 8000e98:	d902      	bls.n	8000ea0 <memmove+0x10>
 8000e9a:	4284      	cmp	r4, r0
 8000e9c:	4623      	mov	r3, r4
 8000e9e:	d807      	bhi.n	8000eb0 <memmove+0x20>
 8000ea0:	1e43      	subs	r3, r0, #1
 8000ea2:	42a1      	cmp	r1, r4
 8000ea4:	d008      	beq.n	8000eb8 <memmove+0x28>
 8000ea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000eaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000eae:	e7f8      	b.n	8000ea2 <memmove+0x12>
 8000eb0:	4402      	add	r2, r0
 8000eb2:	4601      	mov	r1, r0
 8000eb4:	428a      	cmp	r2, r1
 8000eb6:	d100      	bne.n	8000eba <memmove+0x2a>
 8000eb8:	bd10      	pop	{r4, pc}
 8000eba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000ebe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000ec2:	e7f7      	b.n	8000eb4 <memmove+0x24>

08000ec4 <_sbrk_r>:
 8000ec4:	b538      	push	{r3, r4, r5, lr}
 8000ec6:	4d06      	ldr	r5, [pc, #24]	@ (8000ee0 <_sbrk_r+0x1c>)
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4604      	mov	r4, r0
 8000ecc:	4608      	mov	r0, r1
 8000ece:	602b      	str	r3, [r5, #0]
 8000ed0:	f7ff fb54 	bl	800057c <_sbrk>
 8000ed4:	1c43      	adds	r3, r0, #1
 8000ed6:	d102      	bne.n	8000ede <_sbrk_r+0x1a>
 8000ed8:	682b      	ldr	r3, [r5, #0]
 8000eda:	b103      	cbz	r3, 8000ede <_sbrk_r+0x1a>
 8000edc:	6023      	str	r3, [r4, #0]
 8000ede:	bd38      	pop	{r3, r4, r5, pc}
 8000ee0:	200005cc 	.word	0x200005cc

08000ee4 <memcpy>:
 8000ee4:	440a      	add	r2, r1
 8000ee6:	4291      	cmp	r1, r2
 8000ee8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eec:	d100      	bne.n	8000ef0 <memcpy+0xc>
 8000eee:	4770      	bx	lr
 8000ef0:	b510      	push	{r4, lr}
 8000ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000ef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000efa:	4291      	cmp	r1, r2
 8000efc:	d1f9      	bne.n	8000ef2 <memcpy+0xe>
 8000efe:	bd10      	pop	{r4, pc}

08000f00 <_realloc_r>:
 8000f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f04:	4607      	mov	r7, r0
 8000f06:	4614      	mov	r4, r2
 8000f08:	460d      	mov	r5, r1
 8000f0a:	b921      	cbnz	r1, 8000f16 <_realloc_r+0x16>
 8000f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f10:	4611      	mov	r1, r2
 8000f12:	f7ff bc4d 	b.w	80007b0 <_malloc_r>
 8000f16:	b92a      	cbnz	r2, 8000f24 <_realloc_r+0x24>
 8000f18:	f7ff fbde 	bl	80006d8 <_free_r>
 8000f1c:	4625      	mov	r5, r4
 8000f1e:	4628      	mov	r0, r5
 8000f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f24:	f000 f81a 	bl	8000f5c <_malloc_usable_size_r>
 8000f28:	4284      	cmp	r4, r0
 8000f2a:	4606      	mov	r6, r0
 8000f2c:	d802      	bhi.n	8000f34 <_realloc_r+0x34>
 8000f2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8000f32:	d8f4      	bhi.n	8000f1e <_realloc_r+0x1e>
 8000f34:	4621      	mov	r1, r4
 8000f36:	4638      	mov	r0, r7
 8000f38:	f7ff fc3a 	bl	80007b0 <_malloc_r>
 8000f3c:	4680      	mov	r8, r0
 8000f3e:	b908      	cbnz	r0, 8000f44 <_realloc_r+0x44>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ec      	b.n	8000f1e <_realloc_r+0x1e>
 8000f44:	42b4      	cmp	r4, r6
 8000f46:	4622      	mov	r2, r4
 8000f48:	4629      	mov	r1, r5
 8000f4a:	bf28      	it	cs
 8000f4c:	4632      	movcs	r2, r6
 8000f4e:	f7ff ffc9 	bl	8000ee4 <memcpy>
 8000f52:	4629      	mov	r1, r5
 8000f54:	4638      	mov	r0, r7
 8000f56:	f7ff fbbf 	bl	80006d8 <_free_r>
 8000f5a:	e7f1      	b.n	8000f40 <_realloc_r+0x40>

08000f5c <_malloc_usable_size_r>:
 8000f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f60:	1f18      	subs	r0, r3, #4
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	bfbc      	itt	lt
 8000f66:	580b      	ldrlt	r3, [r1, r0]
 8000f68:	18c0      	addlt	r0, r0, r3
 8000f6a:	4770      	bx	lr

08000f6c <_init>:
 8000f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6e:	bf00      	nop
 8000f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f72:	bc08      	pop	{r3}
 8000f74:	469e      	mov	lr, r3
 8000f76:	4770      	bx	lr

08000f78 <_fini>:
 8000f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7a:	bf00      	nop
 8000f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f7e:	bc08      	pop	{r3}
 8000f80:	469e      	mov	lr, r3
 8000f82:	4770      	bx	lr

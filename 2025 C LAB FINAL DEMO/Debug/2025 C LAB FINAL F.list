
2025 C LAB FINAL F.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f68  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000037c  08002108  08002108  00003108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002484  08002484  00004088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002484  08002484  00003484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800248c  0800248c  00004088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800248c  0800248c  0000348c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002490  08002490  00003490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08002494  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004088  2**0
                  CONTENTS
 10 .bss          00000d40  20000088  20000088  00004088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000dc8  20000dc8  00004088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002cf0  00000000  00000000  000040b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b50  00000000  00000000  00006da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000270  00000000  00000000  000078f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001b3  00000000  00000000  00007b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016e9c  00000000  00000000  00007d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003190  00000000  00000000  0001ebb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007877c  00000000  00000000  00021d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0009a4c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001294  00000000  00000000  0009a508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  0009b79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080020f0 	.word	0x080020f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	080020f0 	.word	0x080020f0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <leds_off>:
#include "command.h"        // Command part header file


//Internal LED utility function: Turn off all LEDs
static inline void leds_off(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
	//Turn off all the LEDs
	for (int i = 0; i < 8; ++i) dio_setLED(i, false);
 80002b6:	2300      	movs	r3, #0
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	e006      	b.n	80002ca <leds_off+0x1a>
 80002bc:	2100      	movs	r1, #0
 80002be:	6878      	ldr	r0, [r7, #4]
 80002c0:	f000 f9e4 	bl	800068c <dio_setLED>
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	3301      	adds	r3, #1
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b07      	cmp	r3, #7
 80002ce:	ddf5      	ble.n	80002bc <leds_off+0xc>
}
 80002d0:	bf00      	nop
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <flash_all_once>:


//One-shot timer callback function, the LED will flash once
static void flash_all_once(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
	//Turn on all the LEDs
	for (int i = 0; i < 8; ++i) dio_setLED(i, true);
 80002e2:	2300      	movs	r3, #0
 80002e4:	607b      	str	r3, [r7, #4]
 80002e6:	e006      	b.n	80002f6 <flash_all_once+0x1a>
 80002e8:	2101      	movs	r1, #1
 80002ea:	6878      	ldr	r0, [r7, #4]
 80002ec:	f000 f9ce 	bl	800068c <dio_setLED>
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	3301      	adds	r3, #1
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2b07      	cmp	r3, #7
 80002fa:	ddf5      	ble.n	80002e8 <flash_all_once+0xc>
	//Simple implementation of blinking through delay anbout 50 ms
	for (volatile uint32_t d = 0; d < 400000; ++d) __NOP();
 80002fc:	2300      	movs	r3, #0
 80002fe:	603b      	str	r3, [r7, #0]
 8000300:	e003      	b.n	800030a <flash_all_once+0x2e>
 8000302:	bf00      	nop
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	3301      	adds	r3, #1
 8000308:	603b      	str	r3, [r7, #0]
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	4a04      	ldr	r2, [pc, #16]	@ (8000320 <flash_all_once+0x44>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d9f7      	bls.n	8000302 <flash_all_once+0x26>
	//Turn off all the LEDs
	leds_off();
 8000312:	f7ff ffcd 	bl	80002b0 <leds_off>
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	00061a7f 	.word	0x00061a7f

08000324 <blink_toggle_all>:


//timer Periodic Timer Callback Function,Perform flashing
static void blink_toggle_all(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
	//Toggle the states one by one to achieve the blinking effect.
	for (int i = 0; i < 8; ++i) dio_toggleLED(i);
 800032a:	2300      	movs	r3, #0
 800032c:	607b      	str	r3, [r7, #4]
 800032e:	e005      	b.n	800033c <blink_toggle_all+0x18>
 8000330:	6878      	ldr	r0, [r7, #4]
 8000332:	f000 f9f7 	bl	8000724 <dio_toggleLED>
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	3301      	adds	r3, #1
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2b07      	cmp	r3, #7
 8000340:	ddf6      	ble.n	8000330 <blink_toggle_all+0xc>
}
 8000342:	bf00      	nop
 8000344:	bf00      	nop
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <For_receive_done>:


//Serial port data judgment callback function
void For_receive_done(uint8_t *data, uint32_t len)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b088      	sub	sp, #32
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	6039      	str	r1, [r7, #0]
    // The double buffering is set in the serial interface.
	//ere, the received data is processed by using ps_buffer.
    data[len] = '\0';  //Append \0 at the end of the string.
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	4413      	add	r3, r2
 800035c:	2200      	movs	r2, #0
 800035e:	701a      	strb	r2, [r3, #0]

    //Use the strtok function to split the string. When encountering a space character, convert it to '\0'.
    //Then extract "cmd" as the command. "arg" refers to a parameter.
    char *cmd = strtok((char *)data, " ");    //Command
 8000360:	495b      	ldr	r1, [pc, #364]	@ (80004d0 <For_receive_done+0x184>)
 8000362:	6878      	ldr	r0, [r7, #4]
 8000364:	f000 ffca 	bl	80012fc <strtok>
 8000368:	61b8      	str	r0, [r7, #24]
    char *arg = strtok(NULL, "");             //Parameter
 800036a:	495a      	ldr	r1, [pc, #360]	@ (80004d4 <For_receive_done+0x188>)
 800036c:	2000      	movs	r0, #0
 800036e:	f000 ffc5 	bl	80012fc <strtok>
 8000372:	6178      	str	r0, [r7, #20]
    //If the command is empty
    if (!cmd) {
 8000374:	69bb      	ldr	r3, [r7, #24]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d104      	bne.n	8000384 <For_receive_done+0x38>
        //Output error message prompt information
    	SerialOutputString((uint8_t *)"\r\n[ERROR] Empty command\r\n", &USART1_PORT);
 800037a:	4957      	ldr	r1, [pc, #348]	@ (80004d8 <For_receive_done+0x18c>)
 800037c:	4857      	ldr	r0, [pc, #348]	@ (80004dc <For_receive_done+0x190>)
 800037e:	f000 fb31 	bl	80009e4 <SerialOutputString>
        return;
 8000382:	e0a1      	b.n	80004c8 <For_receive_done+0x17c>
    }

    //LED operation command: When the user inputs, the LED will turn on the
	//corresponding LED according to the parameters.
    if (strcmp(cmd, "led") == 0) {
 8000384:	4956      	ldr	r1, [pc, #344]	@ (80004e0 <For_receive_done+0x194>)
 8000386:	69b8      	ldr	r0, [r7, #24]
 8000388:	f7ff ff2a 	bl	80001e0 <strcmp>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d13d      	bne.n	800040e <For_receive_done+0xc2>
        //Stop the current timer (to prevent conflict with LED flashing)
    	timer_stop();
 8000392:	f000 fdbf 	bl	8000f14 <timer_stop>
        //Check whether the parameters are 8 bits in total and each bit is either 0 or 1.
    	if (!arg || strlen(arg) != 8) {
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d005      	beq.n	80003a8 <For_receive_done+0x5c>
 800039c:	6978      	ldr	r0, [r7, #20]
 800039e:	f7ff ff29 	bl	80001f4 <strlen>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b08      	cmp	r3, #8
 80003a6:	d004      	beq.n	80003b2 <For_receive_done+0x66>
            //Output error message prompt information
    		SerialOutputString((uint8_t *)"\r\n[ERROR] led expects 8-bit binary\r\n", &USART1_PORT);
 80003a8:	494b      	ldr	r1, [pc, #300]	@ (80004d8 <For_receive_done+0x18c>)
 80003aa:	484e      	ldr	r0, [pc, #312]	@ (80004e4 <For_receive_done+0x198>)
 80003ac:	f000 fb1a 	bl	80009e4 <SerialOutputString>
            return;
 80003b0:	e08a      	b.n	80004c8 <For_receive_done+0x17c>
        }
        //Check string
    	for (int i = 0; i < 8; ++i) {
 80003b2:	2300      	movs	r3, #0
 80003b4:	61fb      	str	r3, [r7, #28]
 80003b6:	e022      	b.n	80003fe <For_receive_done+0xb2>
    		//Check whether the parameters each bit is either 0 or 1.
    		if (arg[i] != '0' && arg[i] != '1') {
 80003b8:	69fb      	ldr	r3, [r7, #28]
 80003ba:	697a      	ldr	r2, [r7, #20]
 80003bc:	4413      	add	r3, r2
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	2b30      	cmp	r3, #48	@ 0x30
 80003c2:	d00a      	beq.n	80003da <For_receive_done+0x8e>
 80003c4:	69fb      	ldr	r3, [r7, #28]
 80003c6:	697a      	ldr	r2, [r7, #20]
 80003c8:	4413      	add	r3, r2
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2b31      	cmp	r3, #49	@ 0x31
 80003ce:	d004      	beq.n	80003da <For_receive_done+0x8e>
    			//Output error message prompt information
    			SerialOutputString((uint8_t *)"\r\n[ERROR] led pattern must be 0/1\r\n", &USART1_PORT);
 80003d0:	4941      	ldr	r1, [pc, #260]	@ (80004d8 <For_receive_done+0x18c>)
 80003d2:	4845      	ldr	r0, [pc, #276]	@ (80004e8 <For_receive_done+0x19c>)
 80003d4:	f000 fb06 	bl	80009e4 <SerialOutputString>
                return;
 80003d8:	e076      	b.n	80004c8 <For_receive_done+0x17c>
            }
    		//Turn on the LED according to the parameters.
    		dio_setLED(7 - i, arg[i] == '1');
 80003da:	69fb      	ldr	r3, [r7, #28]
 80003dc:	f1c3 0007 	rsb	r0, r3, #7
 80003e0:	69fb      	ldr	r3, [r7, #28]
 80003e2:	697a      	ldr	r2, [r7, #20]
 80003e4:	4413      	add	r3, r2
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b31      	cmp	r3, #49	@ 0x31
 80003ea:	bf0c      	ite	eq
 80003ec:	2301      	moveq	r3, #1
 80003ee:	2300      	movne	r3, #0
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	4619      	mov	r1, r3
 80003f4:	f000 f94a 	bl	800068c <dio_setLED>
    	for (int i = 0; i < 8; ++i) {
 80003f8:	69fb      	ldr	r3, [r7, #28]
 80003fa:	3301      	adds	r3, #1
 80003fc:	61fb      	str	r3, [r7, #28]
 80003fe:	69fb      	ldr	r3, [r7, #28]
 8000400:	2b07      	cmp	r3, #7
 8000402:	ddd9      	ble.n	80003b8 <For_receive_done+0x6c>
        }
        SerialOutputString((uint8_t *)"\r\n[Successful] LED pattern set\r\n", &USART1_PORT);
 8000404:	4934      	ldr	r1, [pc, #208]	@ (80004d8 <For_receive_done+0x18c>)
 8000406:	4839      	ldr	r0, [pc, #228]	@ (80004ec <For_receive_done+0x1a0>)
 8000408:	f000 faec 	bl	80009e4 <SerialOutputString>
 800040c:	e05c      	b.n	80004c8 <For_receive_done+0x17c>



    //Serial part command: When the user enters serial,
    //the system checks and displays the character string entered by the user.
    else if (strcmp(cmd, "serial") == 0) {
 800040e:	4938      	ldr	r1, [pc, #224]	@ (80004f0 <For_receive_done+0x1a4>)
 8000410:	69b8      	ldr	r0, [r7, #24]
 8000412:	f7ff fee5 	bl	80001e0 <strcmp>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d10f      	bne.n	800043c <For_receive_done+0xf0>
    	//Performs line feed and outputs the corresponding parameters
    	SerialOutputString((uint8_t *)"\r\n", &USART1_PORT);
 800041c:	492e      	ldr	r1, [pc, #184]	@ (80004d8 <For_receive_done+0x18c>)
 800041e:	4835      	ldr	r0, [pc, #212]	@ (80004f4 <For_receive_done+0x1a8>)
 8000420:	f000 fae0 	bl	80009e4 <SerialOutputString>
        if (arg) {
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d003      	beq.n	8000432 <For_receive_done+0xe6>
            SerialOutputString((uint8_t *)arg, &USART1_PORT);
 800042a:	492b      	ldr	r1, [pc, #172]	@ (80004d8 <For_receive_done+0x18c>)
 800042c:	6978      	ldr	r0, [r7, #20]
 800042e:	f000 fad9 	bl	80009e4 <SerialOutputString>
        }
        SerialOutputString((uint8_t *)"\r\n", &USART1_PORT);
 8000432:	4929      	ldr	r1, [pc, #164]	@ (80004d8 <For_receive_done+0x18c>)
 8000434:	482f      	ldr	r0, [pc, #188]	@ (80004f4 <For_receive_done+0x1a8>)
 8000436:	f000 fad5 	bl	80009e4 <SerialOutputString>
 800043a:	e045      	b.n	80004c8 <For_receive_done+0x17c>
    }


    //One shot part command:Execute one-time delay.
    else if (strcmp(cmd, "oneshot") == 0) {
 800043c:	492e      	ldr	r1, [pc, #184]	@ (80004f8 <For_receive_done+0x1ac>)
 800043e:	69b8      	ldr	r0, [r7, #24]
 8000440:	f7ff fece 	bl	80001e0 <strcmp>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d119      	bne.n	800047e <For_receive_done+0x132>
        //If the parameter is null or incorrect, an error message is displayed
    	if (!arg) {
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d104      	bne.n	800045a <For_receive_done+0x10e>
            SerialOutputString((uint8_t *)"\r\n[ERROR] oneshot expects delay\r\n", &USART1_PORT);
 8000450:	4921      	ldr	r1, [pc, #132]	@ (80004d8 <For_receive_done+0x18c>)
 8000452:	482a      	ldr	r0, [pc, #168]	@ (80004fc <For_receive_done+0x1b0>)
 8000454:	f000 fac6 	bl	80009e4 <SerialOutputString>
            return;
 8000458:	e036      	b.n	80004c8 <For_receive_done+0x17c>
        }
        //Converts a string argument to an integer, in milliseconds
    	//atoi function converts a parameter string to an integer
    	uint32_t delay = (uint32_t)atoi(arg);
 800045a:	6978      	ldr	r0, [r7, #20]
 800045c:	f000 fdb7 	bl	8000fce <atoi>
 8000460:	4603      	mov	r3, r0
 8000462:	60fb      	str	r3, [r7, #12]
    	//Stop existing timers and turn off all leds
        timer_stop();
 8000464:	f000 fd56 	bl	8000f14 <timer_stop>
        leds_off();
 8000468:	f7ff ff22 	bl	80002b0 <leds_off>
        //Execute the one shot function to implement a one-time delay
        timer_oneshot(delay, flash_all_once);
 800046c:	4924      	ldr	r1, [pc, #144]	@ (8000500 <For_receive_done+0x1b4>)
 800046e:	68f8      	ldr	r0, [r7, #12]
 8000470:	f000 fd3e 	bl	8000ef0 <timer_oneshot>
        SerialOutputString((uint8_t *)"\r\n[Successful] oneshot set\r\n", &USART1_PORT);
 8000474:	4918      	ldr	r1, [pc, #96]	@ (80004d8 <For_receive_done+0x18c>)
 8000476:	4823      	ldr	r0, [pc, #140]	@ (8000504 <For_receive_done+0x1b8>)
 8000478:	f000 fab4 	bl	80009e4 <SerialOutputString>
 800047c:	e024      	b.n	80004c8 <For_receive_done+0x17c>
    }


    //timer part command:Execute delay and flash leds
    else if (strcmp(cmd, "timer") == 0) {
 800047e:	4922      	ldr	r1, [pc, #136]	@ (8000508 <For_receive_done+0x1bc>)
 8000480:	69b8      	ldr	r0, [r7, #24]
 8000482:	f7ff fead 	bl	80001e0 <strcmp>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d119      	bne.n	80004c0 <For_receive_done+0x174>
        //Check that the parameters provided are reasonable and non-null
    	if (!arg) {
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d104      	bne.n	800049c <For_receive_done+0x150>
            //Output a error message
    		SerialOutputString((uint8_t *)"\r\n[ERROR] timer expects period\r\n", &USART1_PORT);
 8000492:	4911      	ldr	r1, [pc, #68]	@ (80004d8 <For_receive_done+0x18c>)
 8000494:	481d      	ldr	r0, [pc, #116]	@ (800050c <For_receive_done+0x1c0>)
 8000496:	f000 faa5 	bl	80009e4 <SerialOutputString>
            return;
 800049a:	e015      	b.n	80004c8 <For_receive_done+0x17c>
        }
    	//Converts a string argument to an integer, in milliseconds
    	//atoi function converts a parameter string to an integer
    	uint32_t period = (uint32_t)atoi(arg);
 800049c:	6978      	ldr	r0, [r7, #20]
 800049e:	f000 fd96 	bl	8000fce <atoi>
 80004a2:	4603      	mov	r3, r0
 80004a4:	613b      	str	r3, [r7, #16]
    	//Stop the old timer and turn off all leds
        timer_stop();
 80004a6:	f000 fd35 	bl	8000f14 <timer_stop>
        leds_off();
 80004aa:	f7ff ff01 	bl	80002b0 <leds_off>
        //Set a periodic timer, achieve periodic reversal led
        timer_init(period, blink_toggle_all);
 80004ae:	4918      	ldr	r1, [pc, #96]	@ (8000510 <For_receive_done+0x1c4>)
 80004b0:	6938      	ldr	r0, [r7, #16]
 80004b2:	f000 fd05 	bl	8000ec0 <timer_init>
        SerialOutputString((uint8_t *)"\r\n[Successful] timer started\r\n", &USART1_PORT);
 80004b6:	4908      	ldr	r1, [pc, #32]	@ (80004d8 <For_receive_done+0x18c>)
 80004b8:	4816      	ldr	r0, [pc, #88]	@ (8000514 <For_receive_done+0x1c8>)
 80004ba:	f000 fa93 	bl	80009e4 <SerialOutputString>
 80004be:	e003      	b.n	80004c8 <For_receive_done+0x17c>
    }

    //An unrecognized command: prompts an error message
    else {
        SerialOutputString((uint8_t *)"\r\n[ERROR] Unknown command\r\n", &USART1_PORT);
 80004c0:	4905      	ldr	r1, [pc, #20]	@ (80004d8 <For_receive_done+0x18c>)
 80004c2:	4815      	ldr	r0, [pc, #84]	@ (8000518 <For_receive_done+0x1cc>)
 80004c4:	f000 fa8e 	bl	80009e4 <SerialOutputString>
    }
}
 80004c8:	3720      	adds	r7, #32
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	08002108 	.word	0x08002108
 80004d4:	0800210c 	.word	0x0800210c
 80004d8:	20000004 	.word	0x20000004
 80004dc:	08002110 	.word	0x08002110
 80004e0:	0800212c 	.word	0x0800212c
 80004e4:	08002130 	.word	0x08002130
 80004e8:	08002158 	.word	0x08002158
 80004ec:	0800217c 	.word	0x0800217c
 80004f0:	080021a0 	.word	0x080021a0
 80004f4:	080021a8 	.word	0x080021a8
 80004f8:	080021ac 	.word	0x080021ac
 80004fc:	080021b4 	.word	0x080021b4
 8000500:	080002dd 	.word	0x080002dd
 8000504:	080021d8 	.word	0x080021d8
 8000508:	080021f8 	.word	0x080021f8
 800050c:	08002200 	.word	0x08002200
 8000510:	08000325 	.word	0x08000325
 8000514:	08002224 	.word	0x08002224
 8000518:	08002244 	.word	0x08002244

0800051c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800052a:	2b00      	cmp	r3, #0
 800052c:	db0b      	blt.n	8000546 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	f003 021f 	and.w	r2, r3, #31
 8000534:	4907      	ldr	r1, [pc, #28]	@ (8000554 <__NVIC_EnableIRQ+0x38>)
 8000536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800053a:	095b      	lsrs	r3, r3, #5
 800053c:	2001      	movs	r0, #1
 800053e:	fa00 f202 	lsl.w	r2, r0, r2
 8000542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	e000e100 	.word	0xe000e100

08000558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	6039      	str	r1, [r7, #0]
 8000562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000568:	2b00      	cmp	r3, #0
 800056a:	db0a      	blt.n	8000582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	b2da      	uxtb	r2, r3
 8000570:	490c      	ldr	r1, [pc, #48]	@ (80005a4 <__NVIC_SetPriority+0x4c>)
 8000572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000576:	0112      	lsls	r2, r2, #4
 8000578:	b2d2      	uxtb	r2, r2
 800057a:	440b      	add	r3, r1
 800057c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000580:	e00a      	b.n	8000598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4908      	ldr	r1, [pc, #32]	@ (80005a8 <__NVIC_SetPriority+0x50>)
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	f003 030f 	and.w	r3, r3, #15
 800058e:	3b04      	subs	r3, #4
 8000590:	0112      	lsls	r2, r2, #4
 8000592:	b2d2      	uxtb	r2, r2
 8000594:	440b      	add	r3, r1
 8000596:	761a      	strb	r2, [r3, #24]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	e000e100 	.word	0xe000e100
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <dio_init>:
static void (*button_callback)(void) = 0;	//Button interrupt callback function pointer
static uint8_t led_state = 0;				//Current LED status (each represents one LED on/off)


//Initialize button and LED GPIO
void dio_init(void (*callback)(void)) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    //Save the button callback
    button_callback = callback;
 80005b4:	4a25      	ldr	r2, [pc, #148]	@ (800064c <dio_init+0xa0>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	6013      	str	r3, [r2, #0]
    //Enable clocks for GPIOA (button) and GPIOE (LEDs)
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOEEN;
 80005ba:	4b25      	ldr	r3, [pc, #148]	@ (8000650 <dio_init+0xa4>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a24      	ldr	r2, [pc, #144]	@ (8000650 <dio_init+0xa4>)
 80005c0:	f443 1308 	orr.w	r3, r3, #2228224	@ 0x220000
 80005c4:	6153      	str	r3, [r2, #20]
    //Set PE8–PE15 as outputs
    for (int i = 8; i <= 15; i++) {
 80005c6:	2308      	movs	r3, #8
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	e019      	b.n	8000600 <dio_init+0x54>
        GPIOE->MODER &= ~(3 << (2 * i));  // Clear
 80005cc:	4b21      	ldr	r3, [pc, #132]	@ (8000654 <dio_init+0xa8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	68fa      	ldr	r2, [r7, #12]
 80005d2:	0052      	lsls	r2, r2, #1
 80005d4:	2103      	movs	r1, #3
 80005d6:	fa01 f202 	lsl.w	r2, r1, r2
 80005da:	43d2      	mvns	r2, r2
 80005dc:	4611      	mov	r1, r2
 80005de:	4a1d      	ldr	r2, [pc, #116]	@ (8000654 <dio_init+0xa8>)
 80005e0:	400b      	ands	r3, r1
 80005e2:	6013      	str	r3, [r2, #0]
        GPIOE->MODER |=  (1 << (2 * i));  // Output
 80005e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000654 <dio_init+0xa8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	0052      	lsls	r2, r2, #1
 80005ec:	2101      	movs	r1, #1
 80005ee:	fa01 f202 	lsl.w	r2, r1, r2
 80005f2:	4611      	mov	r1, r2
 80005f4:	4a17      	ldr	r2, [pc, #92]	@ (8000654 <dio_init+0xa8>)
 80005f6:	430b      	orrs	r3, r1
 80005f8:	6013      	str	r3, [r2, #0]
    for (int i = 8; i <= 15; i++) {
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	3301      	adds	r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	2b0f      	cmp	r3, #15
 8000604:	dde2      	ble.n	80005cc <dio_init+0x20>
    }
    //Enable SYSCFG for EXTI
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000606:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <dio_init+0xa4>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	4a11      	ldr	r2, [pc, #68]	@ (8000650 <dio_init+0xa4>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6193      	str	r3, [r2, #24]
    //Configure PA0 as EXTI0
    SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0;  // 0 = PA0
 8000612:	4b11      	ldr	r3, [pc, #68]	@ (8000658 <dio_init+0xac>)
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	4a10      	ldr	r2, [pc, #64]	@ (8000658 <dio_init+0xac>)
 8000618:	f023 030f 	bic.w	r3, r3, #15
 800061c:	6093      	str	r3, [r2, #8]
    EXTI->RTSR |= EXTI_RTSR_TR0;
 800061e:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <dio_init+0xb0>)
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	4a0e      	ldr	r2, [pc, #56]	@ (800065c <dio_init+0xb0>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6093      	str	r3, [r2, #8]
    EXTI->IMR  |= EXTI_IMR_MR0;
 800062a:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <dio_init+0xb0>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a0b      	ldr	r2, [pc, #44]	@ (800065c <dio_init+0xb0>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6013      	str	r3, [r2, #0]
    //Configure the interrupt priority and enable the interrupt
    NVIC_SetPriority(EXTI0_IRQn, 1);
 8000636:	2101      	movs	r1, #1
 8000638:	2006      	movs	r0, #6
 800063a:	f7ff ff8d 	bl	8000558 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);
 800063e:	2006      	movs	r0, #6
 8000640:	f7ff ff6c 	bl	800051c <__NVIC_EnableIRQ>
}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200000a4 	.word	0x200000a4
 8000650:	40021000 	.word	0x40021000
 8000654:	48001000 	.word	0x48001000
 8000658:	40010000 	.word	0x40010000
 800065c:	40010400 	.word	0x40010400

08000660 <EXTI0_IRQHandler>:


//Interrupt handler (triggered when button is pressed)
void EXTI0_IRQHandler(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
    if (button_callback) {
 8000664:	4b07      	ldr	r3, [pc, #28]	@ (8000684 <EXTI0_IRQHandler+0x24>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d002      	beq.n	8000672 <EXTI0_IRQHandler+0x12>
        button_callback();	//Callback function
 800066c:	4b05      	ldr	r3, [pc, #20]	@ (8000684 <EXTI0_IRQHandler+0x24>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4798      	blx	r3
    }
    EXTI->PR |= EXTI_PR_PR0;
 8000672:	4b05      	ldr	r3, [pc, #20]	@ (8000688 <EXTI0_IRQHandler+0x28>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	4a04      	ldr	r2, [pc, #16]	@ (8000688 <EXTI0_IRQHandler+0x28>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6153      	str	r3, [r2, #20]
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200000a4 	.word	0x200000a4
 8000688:	40010400 	.word	0x40010400

0800068c <dio_setLED>:


//Set the status of the specified LED (index: 0~7)
void dio_setLED(int index, bool state) {
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	70fb      	strb	r3, [r7, #3]
    if (index < 0 || index > 7) return;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b00      	cmp	r3, #0
 800069c:	db37      	blt.n	800070e <dio_setLED+0x82>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b07      	cmp	r3, #7
 80006a2:	dc34      	bgt.n	800070e <dio_setLED+0x82>
    //Calculate the bitmask of PE8 to PE15
    uint16_t bit = 1 << (8 + index);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3308      	adds	r3, #8
 80006a8:	2201      	movs	r2, #1
 80006aa:	fa02 f303 	lsl.w	r3, r2, r3
 80006ae:	81fb      	strh	r3, [r7, #14]

    if (state) {
 80006b0:	78fb      	ldrb	r3, [r7, #3]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d013      	beq.n	80006de <dio_setLED+0x52>
    	//Output high level (light LED)
    	GPIOE->ODR |= bit;
 80006b6:	4b19      	ldr	r3, [pc, #100]	@ (800071c <dio_setLED+0x90>)
 80006b8:	695a      	ldr	r2, [r3, #20]
 80006ba:	89fb      	ldrh	r3, [r7, #14]
 80006bc:	4917      	ldr	r1, [pc, #92]	@ (800071c <dio_setLED+0x90>)
 80006be:	4313      	orrs	r3, r2
 80006c0:	614b      	str	r3, [r1, #20]
        led_state |= (1 << index);
 80006c2:	2201      	movs	r2, #1
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	b25a      	sxtb	r2, r3
 80006cc:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <dio_setLED+0x94>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <dio_setLED+0x94>)
 80006da:	701a      	strb	r2, [r3, #0]
 80006dc:	e018      	b.n	8000710 <dio_setLED+0x84>
    } else {
    	//Output low level (extinguish LED)
    	GPIOE->ODR &= ~bit;
 80006de:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <dio_setLED+0x90>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	89fa      	ldrh	r2, [r7, #14]
 80006e4:	43d2      	mvns	r2, r2
 80006e6:	4611      	mov	r1, r2
 80006e8:	4a0c      	ldr	r2, [pc, #48]	@ (800071c <dio_setLED+0x90>)
 80006ea:	400b      	ands	r3, r1
 80006ec:	6153      	str	r3, [r2, #20]
        led_state &= ~(1 << index);
 80006ee:	2201      	movs	r2, #1
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	b25b      	sxtb	r3, r3
 80006f8:	43db      	mvns	r3, r3
 80006fa:	b25a      	sxtb	r2, r3
 80006fc:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <dio_setLED+0x94>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	b25b      	sxtb	r3, r3
 8000702:	4013      	ands	r3, r2
 8000704:	b25b      	sxtb	r3, r3
 8000706:	b2da      	uxtb	r2, r3
 8000708:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <dio_setLED+0x94>)
 800070a:	701a      	strb	r2, [r3, #0]
 800070c:	e000      	b.n	8000710 <dio_setLED+0x84>
    if (index < 0 || index > 7) return;
 800070e:	bf00      	nop
    }
}
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	48001000 	.word	0x48001000
 8000720:	200000a8 	.word	0x200000a8

08000724 <dio_toggleLED>:


//Flip the status of the specified LED
void dio_toggleLED(int index) {
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
    if (index < 0 || index > 7) return;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	db1c      	blt.n	800076c <dio_toggleLED+0x48>
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b07      	cmp	r3, #7
 8000736:	dc19      	bgt.n	800076c <dio_toggleLED+0x48>
    uint16_t bit = 1 << (8 + index);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3308      	adds	r3, #8
 800073c:	2201      	movs	r2, #1
 800073e:	fa02 f303 	lsl.w	r3, r2, r3
 8000742:	81fb      	strh	r3, [r7, #14]
    GPIOE->ODR ^= bit;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <dio_toggleLED+0x54>)
 8000746:	695a      	ldr	r2, [r3, #20]
 8000748:	89fb      	ldrh	r3, [r7, #14]
 800074a:	490b      	ldr	r1, [pc, #44]	@ (8000778 <dio_toggleLED+0x54>)
 800074c:	4053      	eors	r3, r2
 800074e:	614b      	str	r3, [r1, #20]
    led_state ^= (1 << index);
 8000750:	2201      	movs	r2, #1
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	fa02 f303 	lsl.w	r3, r2, r3
 8000758:	b25a      	sxtb	r2, r3
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <dio_toggleLED+0x58>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	b25b      	sxtb	r3, r3
 8000760:	4053      	eors	r3, r2
 8000762:	b25b      	sxtb	r3, r3
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4b05      	ldr	r3, [pc, #20]	@ (800077c <dio_toggleLED+0x58>)
 8000768:	701a      	strb	r2, [r3, #0]
 800076a:	e000      	b.n	800076e <dio_toggleLED+0x4a>
    if (index < 0 || index > 7) return;
 800076c:	bf00      	nop
}
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	48001000 	.word	0x48001000
 800077c:	200000a8 	.word	0x200000a8

08000780 <main>:
#include "timer.h"			//timer part header file
#include "command.h"		//command part header file

//Main function
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
    SerialInitialise(BAUD_115200, &USART1_PORT, For_receive_done);
 8000784:	4a09      	ldr	r2, [pc, #36]	@ (80007ac <main+0x2c>)
 8000786:	490a      	ldr	r1, [pc, #40]	@ (80007b0 <main+0x30>)
 8000788:	2004      	movs	r0, #4
 800078a:	f000 f85b 	bl	8000844 <SerialInitialise>
    SerialSetTermChar('#');
 800078e:	2023      	movs	r0, #35	@ 0x23
 8000790:	f000 f8d8 	bl	8000944 <SerialSetTermChar>
    SerialPrintPrompt(&USART1_PORT);
 8000794:	4806      	ldr	r0, [pc, #24]	@ (80007b0 <main+0x30>)
 8000796:	f000 f93d 	bl	8000a14 <SerialPrintPrompt>
    Enable_Serial_Interrupt();
 800079a:	f000 f9a7 	bl	8000aec <Enable_Serial_Interrupt>
    dio_init(NULL);
 800079e:	2000      	movs	r0, #0
 80007a0:	f7ff ff04 	bl	80005ac <dio_init>
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	0800034d 	.word	0x0800034d
 80007b0:	20000004 	.word	0x20000004

080007b4 <__NVIC_EnableIRQ>:
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	db0b      	blt.n	80007de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	f003 021f 	and.w	r2, r3, #31
 80007cc:	4907      	ldr	r1, [pc, #28]	@ (80007ec <__NVIC_EnableIRQ+0x38>)
 80007ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d2:	095b      	lsrs	r3, r3, #5
 80007d4:	2001      	movs	r0, #1
 80007d6:	fa00 f202 	lsl.w	r2, r0, r2
 80007da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000e100 	.word	0xe000e100

080007f0 <__NVIC_SetPriority>:
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000800:	2b00      	cmp	r3, #0
 8000802:	db0a      	blt.n	800081a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	b2da      	uxtb	r2, r3
 8000808:	490c      	ldr	r1, [pc, #48]	@ (800083c <__NVIC_SetPriority+0x4c>)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	0112      	lsls	r2, r2, #4
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	440b      	add	r3, r1
 8000814:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000818:	e00a      	b.n	8000830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4908      	ldr	r1, [pc, #32]	@ (8000840 <__NVIC_SetPriority+0x50>)
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	f003 030f 	and.w	r3, r3, #15
 8000826:	3b04      	subs	r3, #4
 8000828:	0112      	lsls	r2, r2, #4
 800082a:	b2d2      	uxtb	r2, r2
 800082c:	440b      	add	r3, r1
 800082e:	761a      	strb	r2, [r3, #24]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	e000e100 	.word	0xe000e100
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <SerialInitialise>:
		0x00 						// default function pointer is NULL
		};


// InitialiseSerial - Initialize the serial port, input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint8_t *, uint32_t)) {
 8000844:	b480      	push	{r7}
 8000846:	b087      	sub	sp, #28
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
	serial_port->completion_function = completion_function;
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	625a      	str	r2, [r3, #36]	@ 0x24
	// enable clock power, system configuration clock and GPIOC common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000856:	4b3a      	ldr	r3, [pc, #232]	@ (8000940 <SerialInitialise+0xfc>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	4a39      	ldr	r2, [pc, #228]	@ (8000940 <SerialInitialise+0xfc>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000860:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000862:	4b37      	ldr	r3, [pc, #220]	@ (8000940 <SerialInitialise+0xfc>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	4a36      	ldr	r2, [pc, #216]	@ (8000940 <SerialInitialise+0xfc>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6193      	str	r3, [r2, #24]
	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	691a      	ldr	r2, [r3, #16]
 8000872:	4b33      	ldr	r3, [pc, #204]	@ (8000940 <SerialInitialise+0xfc>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	4932      	ldr	r1, [pc, #200]	@ (8000940 <SerialInitialise+0xfc>)
 8000878:	4313      	orrs	r3, r2
 800087a:	614b      	str	r3, [r1, #20]
	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	68ba      	ldr	r2, [r7, #8]
 8000882:	6952      	ldr	r2, [r2, #20]
 8000884:	601a      	str	r2, [r3, #0]
	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	6992      	ldr	r2, [r2, #24]
 800088e:	609a      	str	r2, [r3, #8]
	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	69d9      	ldr	r1, [r3, #28]
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	6a1a      	ldr	r2, [r3, #32]
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	430a      	orrs	r2, r1
 80008a0:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	6a19      	ldr	r1, [r3, #32]
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	430a      	orrs	r2, r1
 80008b2:	625a      	str	r2, [r3, #36]	@ 0x24
	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	68da      	ldr	r2, [r3, #12]
 80008b8:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <SerialInitialise+0xfc>)
 80008ba:	69db      	ldr	r3, [r3, #28]
 80008bc:	4920      	ldr	r1, [pc, #128]	@ (8000940 <SerialInitialise+0xfc>)
 80008be:	4313      	orrs	r3, r2
 80008c0:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000940 <SerialInitialise+0xfc>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	491d      	ldr	r1, [pc, #116]	@ (8000940 <SerialInitialise+0xfc>)
 80008cc:	4313      	orrs	r3, r2
 80008ce:	618b      	str	r3, [r1, #24]
	// Get a pointer to the 16 bits of the BRR register that we want to change
    uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR;
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	330c      	adds	r3, #12
 80008d6:	617b      	str	r3, [r7, #20]
    // Baud rate at 8M Hz
    switch (baudRate) {
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	2b04      	cmp	r3, #4
 80008dc:	d822      	bhi.n	8000924 <SerialInitialise+0xe0>
 80008de:	a201      	add	r2, pc, #4	@ (adr r2, 80008e4 <SerialInitialise+0xa0>)
 80008e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e4:	080008f9 	.word	0x080008f9
 80008e8:	08000903 	.word	0x08000903
 80008ec:	0800090d 	.word	0x0800090d
 80008f0:	08000915 	.word	0x08000915
 80008f4:	0800091d 	.word	0x0800091d
    case BAUD_9600:
    	// BRR(USARTDIV): 833 = 0x341
    	*baud_rate_config = 8000000 / 9600;
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	f240 3241 	movw	r2, #833	@ 0x341
 80008fe:	801a      	strh	r2, [r3, #0]
    	break;
 8000900:	e010      	b.n	8000924 <SerialInitialise+0xe0>
    case BAUD_19200:
    	// BRR(USARTDIV): 416 = 0x1A0
    	*baud_rate_config = 8000000 / 19200;
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8000908:	801a      	strh	r2, [r3, #0]
        break;
 800090a:	e00b      	b.n	8000924 <SerialInitialise+0xe0>
    case BAUD_38400:
    	// BRR(USARTDIV): 208 = 0xD0
    	*baud_rate_config = 8000000 / 38400;
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	22d0      	movs	r2, #208	@ 0xd0
 8000910:	801a      	strh	r2, [r3, #0]
        break;
 8000912:	e007      	b.n	8000924 <SerialInitialise+0xe0>
    case BAUD_57600:
    	// BRR(USARTDIV): 139 = 0x8B
    	*baud_rate_config = 8000000 / 57600;
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	228a      	movs	r2, #138	@ 0x8a
 8000918:	801a      	strh	r2, [r3, #0]
        break;
 800091a:	e003      	b.n	8000924 <SerialInitialise+0xe0>
    case BAUD_115200:
    	// BRR(USARTDIV): 69.44 ≈ 0x46
    	*baud_rate_config = 8000000 / 115200;
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	2245      	movs	r2, #69	@ 0x45
 8000920:	801a      	strh	r2, [r3, #0]
        break;
 8000922:	bf00      	nop
	}
    serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f042 020d 	orr.w	r2, r2, #13
 8000932:	601a      	str	r2, [r3, #0]
}
 8000934:	bf00      	nop
 8000936:	371c      	adds	r7, #28
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	40021000 	.word	0x40021000

08000944 <SerialSetTermChar>:


//Set terminating character
void SerialSetTermChar(char terminator_ch) {
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
    term_char = terminator_ch;
 800094e:	4a04      	ldr	r2, [pc, #16]	@ (8000960 <SerialSetTermChar+0x1c>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	7013      	strb	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	20000000 	.word	0x20000000

08000964 <SerialFifotransmission>:


//Writes a byte to the serial send buffer (tx_buffer) and initiates
//the interrupt send. Use non-blocking sending.
static void SerialFifotransmission(uint8_t byte) {
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
    //Calculate the next write index
    uint16_t next = tx_in_index + 1;
 800096e:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <SerialFifotransmission+0x54>)
 8000970:	881b      	ldrh	r3, [r3, #0]
 8000972:	3301      	adds	r3, #1
 8000974:	81fb      	strh	r3, [r7, #14]
    //Determine if it is out of bounds and loop back to 0
    if (next >= TX_BUFFER_SIZE)
 8000976:	89fb      	ldrh	r3, [r7, #14]
 8000978:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800097c:	d301      	bcc.n	8000982 <SerialFifotransmission+0x1e>
        next = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	81fb      	strh	r3, [r7, #14]
    //The detection buffer is full
    while (next == tx_out_index) {
 8000982:	bf00      	nop
 8000984:	4b0d      	ldr	r3, [pc, #52]	@ (80009bc <SerialFifotransmission+0x58>)
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	89fa      	ldrh	r2, [r7, #14]
 800098a:	429a      	cmp	r2, r3
 800098c:	d0fa      	beq.n	8000984 <SerialFifotransmission+0x20>
    }
    //Current data write
    tx_buffer[tx_in_index] = byte;
 800098e:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <SerialFifotransmission+0x54>)
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	4619      	mov	r1, r3
 8000994:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <SerialFifotransmission+0x5c>)
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	5453      	strb	r3, [r2, r1]
    //Update write pointer index + 1
    tx_in_index = next;
 800099a:	4a07      	ldr	r2, [pc, #28]	@ (80009b8 <SerialFifotransmission+0x54>)
 800099c:	89fb      	ldrh	r3, [r7, #14]
 800099e:	8013      	strh	r3, [r2, #0]
    //Start the sending process (let the interrupt handle the data sending)
    USART1->CR1 |= USART_CR1_TXEIE;
 80009a0:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <SerialFifotransmission+0x60>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a07      	ldr	r2, [pc, #28]	@ (80009c4 <SerialFifotransmission+0x60>)
 80009a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009aa:	6013      	str	r3, [r2, #0]
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	20000c68 	.word	0x20000c68
 80009bc:	20000c6a 	.word	0x20000c6a
 80009c0:	20000880 	.word	0x20000880
 80009c4:	40013800 	.word	0x40013800

080009c8 <SerialOutputChar>:


//Send a character data to the serial port
void SerialOutputChar(uint8_t data, SerialPort *serial_port)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	6039      	str	r1, [r7, #0]
 80009d2:	71fb      	strb	r3, [r7, #7]
    (void)serial_port;          // 目前仅支持 USART1
    SerialFifotransmission(data);
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ffc4 	bl	8000964 <SerialFifotransmission>
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <SerialOutputString>:


//Sends a string characters
void SerialOutputString(uint8_t *str, SerialPort *serial_port)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
	while (*str) {
 80009ee:	e008      	b.n	8000a02 <SerialOutputString+0x1e>
	    SerialOutputChar(*str, serial_port);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	6839      	ldr	r1, [r7, #0]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ffe6 	bl	80009c8 <SerialOutputChar>
	    str++;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3301      	adds	r3, #1
 8000a00:	607b      	str	r3, [r7, #4]
	while (*str) {
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1f2      	bne.n	80009f0 <SerialOutputString+0xc>
	}
}
 8000a0a:	bf00      	nop
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <SerialPrintPrompt>:


//Print user input prompt to the serial port
void SerialPrintPrompt(SerialPort *serial_port) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
    static int prompt_shown = 0;
    if (!prompt_shown) {
 8000a1c:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <SerialPrintPrompt+0x28>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d106      	bne.n	8000a32 <SerialPrintPrompt+0x1e>
        SerialOutputString((uint8_t *)"User input interface (end with '#'):\r\n", serial_port);
 8000a24:	6879      	ldr	r1, [r7, #4]
 8000a26:	4806      	ldr	r0, [pc, #24]	@ (8000a40 <SerialPrintPrompt+0x2c>)
 8000a28:	f7ff ffdc 	bl	80009e4 <SerialOutputString>
        prompt_shown = 1;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	@ (8000a3c <SerialPrintPrompt+0x28>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	601a      	str	r2, [r3, #0]
    }
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000c6c 	.word	0x20000c6c
 8000a40:	08002260 	.word	0x08002260

08000a44 <SerialInputReceive>:


//Received incoming user input character
void SerialInputReceive(char c, SerialPort *serial_port) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	71fb      	strb	r3, [r7, #7]
	//Check whether the buffer overflow
    if (rx_index < RX_BUFFER_SIZE - 1) {		//Leave space in the buffer
 8000a50:	4b21      	ldr	r3, [pc, #132]	@ (8000ad8 <SerialInputReceive+0x94>)
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d80f      	bhi.n	8000a7c <SerialInputReceive+0x38>
        rx_buffer[rx_index++] = (uint8_t)c;		//Store the character and index + 1
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <SerialInputReceive+0x94>)
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	1c5a      	adds	r2, r3, #1
 8000a62:	b291      	uxth	r1, r2
 8000a64:	4a1c      	ldr	r2, [pc, #112]	@ (8000ad8 <SerialInputReceive+0x94>)
 8000a66:	8011      	strh	r1, [r2, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000adc <SerialInputReceive+0x98>)
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	5453      	strb	r3, [r2, r1]
    	memset(rx_buffer, 0, RX_BUFFER_SIZE);
        rx_index = 0;
        return;
    }
    //Check if it is a terminator.
    if (c == term_char) {
 8000a70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae0 <SerialInputReceive+0x9c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	79fa      	ldrb	r2, [r7, #7]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d12b      	bne.n	8000ad2 <SerialInputReceive+0x8e>
 8000a7a:	e00d      	b.n	8000a98 <SerialInputReceive+0x54>
    	SerialOutputString((uint8_t *)"[ERROR] Buffer Overflow!\r\n", serial_port);
 8000a7c:	6839      	ldr	r1, [r7, #0]
 8000a7e:	4819      	ldr	r0, [pc, #100]	@ (8000ae4 <SerialInputReceive+0xa0>)
 8000a80:	f7ff ffb0 	bl	80009e4 <SerialOutputString>
    	memset(rx_buffer, 0, RX_BUFFER_SIZE);
 8000a84:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4814      	ldr	r0, [pc, #80]	@ (8000adc <SerialInputReceive+0x98>)
 8000a8c:	f000 fc2d 	bl	80012ea <memset>
        rx_index = 0;
 8000a90:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <SerialInputReceive+0x94>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	801a      	strh	r2, [r3, #0]
        return;
 8000a96:	e01c      	b.n	8000ad2 <SerialInputReceive+0x8e>
        rx_buffer[rx_index] = '\0';
 8000a98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <SerialInputReceive+0x94>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <SerialInputReceive+0x98>)
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	5499      	strb	r1, [r3, r2]
        //Copy data into the processing buffer. The call back function uses a processing
		//buffer. Implement double buffering.
        memcpy(ps_buffer, rx_buffer, rx_index + 1);
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <SerialInputReceive+0x94>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	461a      	mov	r2, r3
 8000aac:	490b      	ldr	r1, [pc, #44]	@ (8000adc <SerialInputReceive+0x98>)
 8000aae:	480e      	ldr	r0, [pc, #56]	@ (8000ae8 <SerialInputReceive+0xa4>)
 8000ab0:	f000 fcf3 	bl	800149a <memcpy>
        //Completion callback
        if (serial_port->completion_function) {
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d007      	beq.n	8000acc <SerialInputReceive+0x88>
            serial_port->completion_function(ps_buffer, rx_index - 1);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ac0:	4a05      	ldr	r2, [pc, #20]	@ (8000ad8 <SerialInputReceive+0x94>)
 8000ac2:	8812      	ldrh	r2, [r2, #0]
 8000ac4:	3a01      	subs	r2, #1
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	4807      	ldr	r0, [pc, #28]	@ (8000ae8 <SerialInputReceive+0xa4>)
 8000aca:	4798      	blx	r3
        }
        rx_index = 0;
 8000acc:	4b02      	ldr	r3, [pc, #8]	@ (8000ad8 <SerialInputReceive+0x94>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	801a      	strh	r2, [r3, #0]
    }
}
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	2000087c 	.word	0x2000087c
 8000adc:	200000ac 	.word	0x200000ac
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	08002288 	.word	0x08002288
 8000ae8:	20000494 	.word	0x20000494

08000aec <Enable_Serial_Interrupt>:


//Enable the function for the serial port to interrupt
void Enable_Serial_Interrupt(void) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
    __disable_irq();
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000af4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <Enable_Serial_Interrupt+0x44>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b30 <Enable_Serial_Interrupt+0x44>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	6193      	str	r3, [r2, #24]
    EXTI->IMR |= EXTI_IMR_MR25;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <Enable_Serial_Interrupt+0x48>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0b      	ldr	r2, [pc, #44]	@ (8000b34 <Enable_Serial_Interrupt+0x48>)
 8000b06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b0a:	6013      	str	r3, [r2, #0]
    USART1->CR1 |= USART_CR1_RXNEIE;
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <Enable_Serial_Interrupt+0x4c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a09      	ldr	r2, [pc, #36]	@ (8000b38 <Enable_Serial_Interrupt+0x4c>)
 8000b12:	f043 0320 	orr.w	r3, r3, #32
 8000b16:	6013      	str	r3, [r2, #0]
    NVIC_SetPriority(USART1_IRQn, 1);
 8000b18:	2101      	movs	r1, #1
 8000b1a:	2025      	movs	r0, #37	@ 0x25
 8000b1c:	f7ff fe68 	bl	80007f0 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART1_IRQn);
 8000b20:	2025      	movs	r0, #37	@ 0x25
 8000b22:	f7ff fe47 	bl	80007b4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b26:	b662      	cpsie	i
}
 8000b28:	bf00      	nop
    __enable_irq();
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40010400 	.word	0x40010400
 8000b38:	40013800 	.word	0x40013800

08000b3c <USART1_EXTI25_IRQHandler>:


//USART1 interrupt handler function
void USART1_EXTI25_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
	//Received interrupt function: Received data。 Check whether RXNE
	//interrupt flag is displayed
    if (USART1->ISR & USART_ISR_RXNE) {
 8000b42:	4b20      	ldr	r3, [pc, #128]	@ (8000bc4 <USART1_EXTI25_IRQHandler+0x88>)
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	f003 0320 	and.w	r3, r3, #32
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d008      	beq.n	8000b60 <USART1_EXTI25_IRQHandler+0x24>
        //Reads a byte from the receive data register
        char c = (char)USART1->RDR;
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc4 <USART1_EXTI25_IRQHandler+0x88>)
 8000b50:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	71fb      	strb	r3, [r7, #7]
        //Call the receive function and put rx_buffer
        SerialInputReceive(c, &USART1_PORT);
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	491b      	ldr	r1, [pc, #108]	@ (8000bc8 <USART1_EXTI25_IRQHandler+0x8c>)
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff ff72 	bl	8000a44 <SerialInputReceive>
    }

    //Transmission interrupt function:Transmission data
    if ((USART1->ISR & USART_ISR_TXE) && (USART1->CR1 & USART_CR1_TXEIE)) {
 8000b60:	4b18      	ldr	r3, [pc, #96]	@ (8000bc4 <USART1_EXTI25_IRQHandler+0x88>)
 8000b62:	69db      	ldr	r3, [r3, #28]
 8000b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d027      	beq.n	8000bbc <USART1_EXTI25_IRQHandler+0x80>
 8000b6c:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <USART1_EXTI25_IRQHandler+0x88>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d021      	beq.n	8000bbc <USART1_EXTI25_IRQHandler+0x80>
        //Writing a pointer to be equal to reading a pointer does not
    	//require any further data processing
        if (tx_in_index == tx_out_index) {
 8000b78:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <USART1_EXTI25_IRQHandler+0x90>)
 8000b7a:	881a      	ldrh	r2, [r3, #0]
 8000b7c:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <USART1_EXTI25_IRQHandler+0x94>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d106      	bne.n	8000b92 <USART1_EXTI25_IRQHandler+0x56>
            USART1->CR1 &= ~USART_CR1_TXEIE;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <USART1_EXTI25_IRQHandler+0x88>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0e      	ldr	r2, [pc, #56]	@ (8000bc4 <USART1_EXTI25_IRQHandler+0x88>)
 8000b8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000b8e:	6013      	str	r3, [r2, #0]
            if (tx_out_index >= TX_BUFFER_SIZE) {
                tx_out_index = 0;
            }
        }
    }
}
 8000b90:	e014      	b.n	8000bbc <USART1_EXTI25_IRQHandler+0x80>
            USART1->TDR = tx_buffer[tx_out_index];
 8000b92:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <USART1_EXTI25_IRQHandler+0x94>)
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <USART1_EXTI25_IRQHandler+0x98>)
 8000b9a:	5c9a      	ldrb	r2, [r3, r2]
 8000b9c:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <USART1_EXTI25_IRQHandler+0x88>)
 8000b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
            tx_out_index++;
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <USART1_EXTI25_IRQHandler+0x94>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <USART1_EXTI25_IRQHandler+0x94>)
 8000baa:	801a      	strh	r2, [r3, #0]
            if (tx_out_index >= TX_BUFFER_SIZE) {
 8000bac:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <USART1_EXTI25_IRQHandler+0x94>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000bb4:	d302      	bcc.n	8000bbc <USART1_EXTI25_IRQHandler+0x80>
                tx_out_index = 0;
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <USART1_EXTI25_IRQHandler+0x94>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	801a      	strh	r2, [r3, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40013800 	.word	0x40013800
 8000bc8:	20000004 	.word	0x20000004
 8000bcc:	20000c68 	.word	0x20000c68
 8000bd0:	20000c6a 	.word	0x20000c6a
 8000bd4:	20000880 	.word	0x20000880

08000bd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return 1;
 8000bdc:	2301      	movs	r3, #1
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <_kill>:

int _kill(int pid, int sig)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bf2:	f000 fc25 	bl	8001440 <__errno>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2216      	movs	r2, #22
 8000bfa:	601a      	str	r2, [r3, #0]
  return -1;
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <_exit>:

void _exit (int status)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c10:	f04f 31ff 	mov.w	r1, #4294967295
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff ffe7 	bl	8000be8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c1a:	bf00      	nop
 8000c1c:	e7fd      	b.n	8000c1a <_exit+0x12>

08000c1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b086      	sub	sp, #24
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	60f8      	str	r0, [r7, #12]
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	e00a      	b.n	8000c46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c30:	f3af 8000 	nop.w
 8000c34:	4601      	mov	r1, r0
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1c5a      	adds	r2, r3, #1
 8000c3a:	60ba      	str	r2, [r7, #8]
 8000c3c:	b2ca      	uxtb	r2, r1
 8000c3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	3301      	adds	r3, #1
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	dbf0      	blt.n	8000c30 <_read+0x12>
  }

  return len;
 8000c4e:	687b      	ldr	r3, [r7, #4]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	e009      	b.n	8000c7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	1c5a      	adds	r2, r3, #1
 8000c6e:	60ba      	str	r2, [r7, #8]
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	697a      	ldr	r2, [r7, #20]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	dbf1      	blt.n	8000c6a <_write+0x12>
  }
  return len;
 8000c86:	687b      	ldr	r3, [r7, #4]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <_close>:

int _close(int file)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cb8:	605a      	str	r2, [r3, #4]
  return 0;
 8000cba:	2300      	movs	r3, #0
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <_isatty>:

int _isatty(int file)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cd0:	2301      	movs	r3, #1
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b085      	sub	sp, #20
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d00:	4a14      	ldr	r2, [pc, #80]	@ (8000d54 <_sbrk+0x5c>)
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <_sbrk+0x60>)
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d14:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <_sbrk+0x64>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	@ (8000d60 <_sbrk+0x68>)
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1a:	4b10      	ldr	r3, [pc, #64]	@ (8000d5c <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d207      	bcs.n	8000d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d28:	f000 fb8a 	bl	8001440 <__errno>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	220c      	movs	r2, #12
 8000d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
 8000d36:	e009      	b.n	8000d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a05      	ldr	r2, [pc, #20]	@ (8000d5c <_sbrk+0x64>)
 8000d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	2000a000 	.word	0x2000a000
 8000d58:	00000400 	.word	0x00000400
 8000d5c:	20000c70 	.word	0x20000c70
 8000d60:	20000dc8 	.word	0x20000dc8

08000d64 <__NVIC_EnableIRQ>:
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	db0b      	blt.n	8000d8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	f003 021f 	and.w	r2, r3, #31
 8000d7c:	4907      	ldr	r1, [pc, #28]	@ (8000d9c <__NVIC_EnableIRQ+0x38>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	095b      	lsrs	r3, r3, #5
 8000d84:	2001      	movs	r0, #1
 8000d86:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000e100 	.word	0xe000e100

08000da0 <__NVIC_DisableIRQ>:
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	db12      	blt.n	8000dd8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f003 021f 	and.w	r2, r3, #31
 8000db8:	490a      	ldr	r1, [pc, #40]	@ (8000de4 <__NVIC_DisableIRQ+0x44>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	095b      	lsrs	r3, r3, #5
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc6:	3320      	adds	r3, #32
 8000dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dcc:	f3bf 8f4f 	dsb	sy
}
 8000dd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dd2:	f3bf 8f6f 	isb	sy
}
 8000dd6:	bf00      	nop
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <__NVIC_SetPriority>:
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	@ (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	@ (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <tim2_config_start>:
static uint32_t timer_period_ms = 0;


//Configure and start TIM2
static void tim2_config_start(uint32_t ms, int oneshot)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
	//Enabled the TIM2 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000e46:	4b1d      	ldr	r3, [pc, #116]	@ (8000ebc <tim2_config_start+0x80>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ebc <tim2_config_start+0x80>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	61d3      	str	r3, [r2, #28]
    TIM2->CR1 = 0;
 8000e52:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
    TIM2->CNT = 0;
 8000e5a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e5e:	2200      	movs	r2, #0
 8000e60:	625a      	str	r2, [r3, #36]	@ 0x24
    //Set the prescale value so that the timing is in ms
    TIM2->PSC = 8000 - 1;
 8000e62:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e66:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000e6a:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = (uint16_t)ms;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e74:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM2->EGR = TIM_EGR_UG;
 8000e76:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	615a      	str	r2, [r3, #20]
    // Clear the flag
    TIM2->SR  = 0;
 8000e7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
    // Allow update interrupt
    TIM2->DIER = TIM_DIER_UIE;
 8000e86:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	60da      	str	r2, [r3, #12]
    if (oneshot)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d004      	beq.n	8000e9e <tim2_config_start+0x62>
        TIM2->CR1 = TIM_CR1_OPM | TIM_CR1_CEN;
 8000e94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e98:	2209      	movs	r2, #9
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	e003      	b.n	8000ea6 <tim2_config_start+0x6a>
    else
        TIM2->CR1 = TIM_CR1_CEN;
 8000e9e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	601a      	str	r2, [r3, #0]
    //Interrupt the priority configuration
    NVIC_SetPriority(TIM2_IRQn, 1);
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	201c      	movs	r0, #28
 8000eaa:	f7ff ff9d 	bl	8000de8 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 8000eae:	201c      	movs	r0, #28
 8000eb0:	f7ff ff58 	bl	8000d64 <__NVIC_EnableIRQ>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <timer_init>:


//Periodic timer that automatically uses callback function when interrupted
void timer_init(uint32_t period_ms, void (*callback)(void))
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
    timer_callback  = callback;
 8000eca:	4a07      	ldr	r2, [pc, #28]	@ (8000ee8 <timer_init+0x28>)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	6013      	str	r3, [r2, #0]
    timer_period_ms = period_ms;
 8000ed0:	4a06      	ldr	r2, [pc, #24]	@ (8000eec <timer_init+0x2c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
    tim2_config_start(period_ms, 0);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ffaf 	bl	8000e3c <tim2_config_start>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000c74 	.word	0x20000c74
 8000eec:	20000c78 	.word	0x20000c78

08000ef0 <timer_oneshot>:


//TIM2 (one-shot) timer, Only execute the callback once the delay is over
void timer_oneshot(uint32_t delay_ms, void (*callback)(void))
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
    timer_callback = callback;
 8000efa:	4a05      	ldr	r2, [pc, #20]	@ (8000f10 <timer_oneshot+0x20>)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	6013      	str	r3, [r2, #0]
    tim2_config_start(delay_ms, 1);
 8000f00:	2101      	movs	r1, #1
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ff9a 	bl	8000e3c <tim2_config_start>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000c74 	.word	0x20000c74

08000f14 <timer_stop>:
}


//Timer stop function
void timer_stop(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
    //Stop counting
	TIM2->CR1  = 0;
 8000f18:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
    TIM2->DIER = 0;
 8000f20:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
    NVIC_DisableIRQ(TIM2_IRQn);
 8000f28:	201c      	movs	r0, #28
 8000f2a:	f7ff ff39 	bl	8000da0 <__NVIC_DisableIRQ>
    //Clear all flags
    TIM2->SR   = 0;
 8000f2e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
    timer_callback = 0;
 8000f36:	4b02      	ldr	r3, [pc, #8]	@ (8000f40 <timer_stop+0x2c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000c74 	.word	0x20000c74

08000f44 <TIM2_IRQHandler>:


//TIM2 global interrupt handler
void TIM2_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	//Check UIF bit for TIM2 Whether set
    if (TIM2->SR & TIM_SR_UIF) {
 8000f48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d00e      	beq.n	8000f74 <TIM2_IRQHandler+0x30>
    	//Clearing UIF
    	TIM2->SR &= ~TIM_SR_UIF;
 8000f56:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f60:	f023 0301 	bic.w	r3, r3, #1
 8000f64:	6113      	str	r3, [r2, #16]
        //Callback function
    	if (timer_callback) {
 8000f66:	4b04      	ldr	r3, [pc, #16]	@ (8000f78 <TIM2_IRQHandler+0x34>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d002      	beq.n	8000f74 <TIM2_IRQHandler+0x30>
            timer_callback();
 8000f6e:	4b02      	ldr	r3, [pc, #8]	@ (8000f78 <TIM2_IRQHandler+0x34>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4798      	blx	r3
        }
    }
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000c74 	.word	0x20000c74

08000f7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f7c:	480d      	ldr	r0, [pc, #52]	@ (8000fb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f7e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f80:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f84:	480c      	ldr	r0, [pc, #48]	@ (8000fb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f86:	490d      	ldr	r1, [pc, #52]	@ (8000fbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f88:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc0 <LoopForever+0xe>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f8c:	e002      	b.n	8000f94 <LoopCopyDataInit>

08000f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f92:	3304      	adds	r3, #4

08000f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f98:	d3f9      	bcc.n	8000f8e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000fc8 <LoopForever+0x16>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa0:	e001      	b.n	8000fa6 <LoopFillZerobss>

08000fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa4:	3204      	adds	r2, #4

08000fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa8:	d3fb      	bcc.n	8000fa2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000faa:	f000 fa4f 	bl	800144c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fae:	f7ff fbe7 	bl	8000780 <main>

08000fb2 <LoopForever>:

LoopForever:
  b LoopForever
 8000fb2:	e7fe      	b.n	8000fb2 <LoopForever>
  ldr   r0, =_estack
 8000fb4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fbc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000fc0:	08002494 	.word	0x08002494
  ldr r2, =_sbss
 8000fc4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000fc8:	20000dc8 	.word	0x20000dc8

08000fcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC1_2_IRQHandler>

08000fce <atoi>:
 8000fce:	220a      	movs	r2, #10
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	f000 b87b 	b.w	80010cc <strtol>
	...

08000fd8 <_strtol_l.isra.0>:
 8000fd8:	2b24      	cmp	r3, #36	@ 0x24
 8000fda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fde:	4686      	mov	lr, r0
 8000fe0:	4690      	mov	r8, r2
 8000fe2:	d801      	bhi.n	8000fe8 <_strtol_l.isra.0+0x10>
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d106      	bne.n	8000ff6 <_strtol_l.isra.0+0x1e>
 8000fe8:	f000 fa2a 	bl	8001440 <__errno>
 8000fec:	2316      	movs	r3, #22
 8000fee:	6003      	str	r3, [r0, #0]
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	4834      	ldr	r0, [pc, #208]	@ (80010c8 <_strtol_l.isra.0+0xf0>)
 8000ff8:	460d      	mov	r5, r1
 8000ffa:	462a      	mov	r2, r5
 8000ffc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001000:	5d06      	ldrb	r6, [r0, r4]
 8001002:	f016 0608 	ands.w	r6, r6, #8
 8001006:	d1f8      	bne.n	8000ffa <_strtol_l.isra.0+0x22>
 8001008:	2c2d      	cmp	r4, #45	@ 0x2d
 800100a:	d110      	bne.n	800102e <_strtol_l.isra.0+0x56>
 800100c:	782c      	ldrb	r4, [r5, #0]
 800100e:	2601      	movs	r6, #1
 8001010:	1c95      	adds	r5, r2, #2
 8001012:	f033 0210 	bics.w	r2, r3, #16
 8001016:	d115      	bne.n	8001044 <_strtol_l.isra.0+0x6c>
 8001018:	2c30      	cmp	r4, #48	@ 0x30
 800101a:	d10d      	bne.n	8001038 <_strtol_l.isra.0+0x60>
 800101c:	782a      	ldrb	r2, [r5, #0]
 800101e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8001022:	2a58      	cmp	r2, #88	@ 0x58
 8001024:	d108      	bne.n	8001038 <_strtol_l.isra.0+0x60>
 8001026:	786c      	ldrb	r4, [r5, #1]
 8001028:	3502      	adds	r5, #2
 800102a:	2310      	movs	r3, #16
 800102c:	e00a      	b.n	8001044 <_strtol_l.isra.0+0x6c>
 800102e:	2c2b      	cmp	r4, #43	@ 0x2b
 8001030:	bf04      	itt	eq
 8001032:	782c      	ldrbeq	r4, [r5, #0]
 8001034:	1c95      	addeq	r5, r2, #2
 8001036:	e7ec      	b.n	8001012 <_strtol_l.isra.0+0x3a>
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1f6      	bne.n	800102a <_strtol_l.isra.0+0x52>
 800103c:	2c30      	cmp	r4, #48	@ 0x30
 800103e:	bf14      	ite	ne
 8001040:	230a      	movne	r3, #10
 8001042:	2308      	moveq	r3, #8
 8001044:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8001048:	f10c 3cff 	add.w	ip, ip, #4294967295
 800104c:	2200      	movs	r2, #0
 800104e:	fbbc f9f3 	udiv	r9, ip, r3
 8001052:	4610      	mov	r0, r2
 8001054:	fb03 ca19 	mls	sl, r3, r9, ip
 8001058:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800105c:	2f09      	cmp	r7, #9
 800105e:	d80f      	bhi.n	8001080 <_strtol_l.isra.0+0xa8>
 8001060:	463c      	mov	r4, r7
 8001062:	42a3      	cmp	r3, r4
 8001064:	dd1b      	ble.n	800109e <_strtol_l.isra.0+0xc6>
 8001066:	1c57      	adds	r7, r2, #1
 8001068:	d007      	beq.n	800107a <_strtol_l.isra.0+0xa2>
 800106a:	4581      	cmp	r9, r0
 800106c:	d314      	bcc.n	8001098 <_strtol_l.isra.0+0xc0>
 800106e:	d101      	bne.n	8001074 <_strtol_l.isra.0+0x9c>
 8001070:	45a2      	cmp	sl, r4
 8001072:	db11      	blt.n	8001098 <_strtol_l.isra.0+0xc0>
 8001074:	fb00 4003 	mla	r0, r0, r3, r4
 8001078:	2201      	movs	r2, #1
 800107a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800107e:	e7eb      	b.n	8001058 <_strtol_l.isra.0+0x80>
 8001080:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8001084:	2f19      	cmp	r7, #25
 8001086:	d801      	bhi.n	800108c <_strtol_l.isra.0+0xb4>
 8001088:	3c37      	subs	r4, #55	@ 0x37
 800108a:	e7ea      	b.n	8001062 <_strtol_l.isra.0+0x8a>
 800108c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8001090:	2f19      	cmp	r7, #25
 8001092:	d804      	bhi.n	800109e <_strtol_l.isra.0+0xc6>
 8001094:	3c57      	subs	r4, #87	@ 0x57
 8001096:	e7e4      	b.n	8001062 <_strtol_l.isra.0+0x8a>
 8001098:	f04f 32ff 	mov.w	r2, #4294967295
 800109c:	e7ed      	b.n	800107a <_strtol_l.isra.0+0xa2>
 800109e:	1c53      	adds	r3, r2, #1
 80010a0:	d108      	bne.n	80010b4 <_strtol_l.isra.0+0xdc>
 80010a2:	2322      	movs	r3, #34	@ 0x22
 80010a4:	f8ce 3000 	str.w	r3, [lr]
 80010a8:	4660      	mov	r0, ip
 80010aa:	f1b8 0f00 	cmp.w	r8, #0
 80010ae:	d0a0      	beq.n	8000ff2 <_strtol_l.isra.0+0x1a>
 80010b0:	1e69      	subs	r1, r5, #1
 80010b2:	e006      	b.n	80010c2 <_strtol_l.isra.0+0xea>
 80010b4:	b106      	cbz	r6, 80010b8 <_strtol_l.isra.0+0xe0>
 80010b6:	4240      	negs	r0, r0
 80010b8:	f1b8 0f00 	cmp.w	r8, #0
 80010bc:	d099      	beq.n	8000ff2 <_strtol_l.isra.0+0x1a>
 80010be:	2a00      	cmp	r2, #0
 80010c0:	d1f6      	bne.n	80010b0 <_strtol_l.isra.0+0xd8>
 80010c2:	f8c8 1000 	str.w	r1, [r8]
 80010c6:	e794      	b.n	8000ff2 <_strtol_l.isra.0+0x1a>
 80010c8:	080022a4 	.word	0x080022a4

080010cc <strtol>:
 80010cc:	4613      	mov	r3, r2
 80010ce:	460a      	mov	r2, r1
 80010d0:	4601      	mov	r1, r0
 80010d2:	4802      	ldr	r0, [pc, #8]	@ (80010dc <strtol+0x10>)
 80010d4:	6800      	ldr	r0, [r0, #0]
 80010d6:	f7ff bf7f 	b.w	8000fd8 <_strtol_l.isra.0>
 80010da:	bf00      	nop
 80010dc:	20000038 	.word	0x20000038

080010e0 <std>:
 80010e0:	2300      	movs	r3, #0
 80010e2:	b510      	push	{r4, lr}
 80010e4:	4604      	mov	r4, r0
 80010e6:	e9c0 3300 	strd	r3, r3, [r0]
 80010ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80010ee:	6083      	str	r3, [r0, #8]
 80010f0:	8181      	strh	r1, [r0, #12]
 80010f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80010f4:	81c2      	strh	r2, [r0, #14]
 80010f6:	6183      	str	r3, [r0, #24]
 80010f8:	4619      	mov	r1, r3
 80010fa:	2208      	movs	r2, #8
 80010fc:	305c      	adds	r0, #92	@ 0x5c
 80010fe:	f000 f8f4 	bl	80012ea <memset>
 8001102:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <std+0x58>)
 8001104:	6263      	str	r3, [r4, #36]	@ 0x24
 8001106:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <std+0x5c>)
 8001108:	62a3      	str	r3, [r4, #40]	@ 0x28
 800110a:	4b0d      	ldr	r3, [pc, #52]	@ (8001140 <std+0x60>)
 800110c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800110e:	4b0d      	ldr	r3, [pc, #52]	@ (8001144 <std+0x64>)
 8001110:	6323      	str	r3, [r4, #48]	@ 0x30
 8001112:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <std+0x68>)
 8001114:	6224      	str	r4, [r4, #32]
 8001116:	429c      	cmp	r4, r3
 8001118:	d006      	beq.n	8001128 <std+0x48>
 800111a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800111e:	4294      	cmp	r4, r2
 8001120:	d002      	beq.n	8001128 <std+0x48>
 8001122:	33d0      	adds	r3, #208	@ 0xd0
 8001124:	429c      	cmp	r4, r3
 8001126:	d105      	bne.n	8001134 <std+0x54>
 8001128:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800112c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001130:	f000 b9b0 	b.w	8001494 <__retarget_lock_init_recursive>
 8001134:	bd10      	pop	{r4, pc}
 8001136:	bf00      	nop
 8001138:	08001265 	.word	0x08001265
 800113c:	08001287 	.word	0x08001287
 8001140:	080012bf 	.word	0x080012bf
 8001144:	080012e3 	.word	0x080012e3
 8001148:	20000c7c 	.word	0x20000c7c

0800114c <stdio_exit_handler>:
 800114c:	4a02      	ldr	r2, [pc, #8]	@ (8001158 <stdio_exit_handler+0xc>)
 800114e:	4903      	ldr	r1, [pc, #12]	@ (800115c <stdio_exit_handler+0x10>)
 8001150:	4803      	ldr	r0, [pc, #12]	@ (8001160 <stdio_exit_handler+0x14>)
 8001152:	f000 b869 	b.w	8001228 <_fwalk_sglue>
 8001156:	bf00      	nop
 8001158:	2000002c 	.word	0x2000002c
 800115c:	080017fd 	.word	0x080017fd
 8001160:	2000003c 	.word	0x2000003c

08001164 <cleanup_stdio>:
 8001164:	6841      	ldr	r1, [r0, #4]
 8001166:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <cleanup_stdio+0x34>)
 8001168:	4299      	cmp	r1, r3
 800116a:	b510      	push	{r4, lr}
 800116c:	4604      	mov	r4, r0
 800116e:	d001      	beq.n	8001174 <cleanup_stdio+0x10>
 8001170:	f000 fb44 	bl	80017fc <_fflush_r>
 8001174:	68a1      	ldr	r1, [r4, #8]
 8001176:	4b09      	ldr	r3, [pc, #36]	@ (800119c <cleanup_stdio+0x38>)
 8001178:	4299      	cmp	r1, r3
 800117a:	d002      	beq.n	8001182 <cleanup_stdio+0x1e>
 800117c:	4620      	mov	r0, r4
 800117e:	f000 fb3d 	bl	80017fc <_fflush_r>
 8001182:	68e1      	ldr	r1, [r4, #12]
 8001184:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <cleanup_stdio+0x3c>)
 8001186:	4299      	cmp	r1, r3
 8001188:	d004      	beq.n	8001194 <cleanup_stdio+0x30>
 800118a:	4620      	mov	r0, r4
 800118c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001190:	f000 bb34 	b.w	80017fc <_fflush_r>
 8001194:	bd10      	pop	{r4, pc}
 8001196:	bf00      	nop
 8001198:	20000c7c 	.word	0x20000c7c
 800119c:	20000ce4 	.word	0x20000ce4
 80011a0:	20000d4c 	.word	0x20000d4c

080011a4 <global_stdio_init.part.0>:
 80011a4:	b510      	push	{r4, lr}
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <global_stdio_init.part.0+0x30>)
 80011a8:	4c0b      	ldr	r4, [pc, #44]	@ (80011d8 <global_stdio_init.part.0+0x34>)
 80011aa:	4a0c      	ldr	r2, [pc, #48]	@ (80011dc <global_stdio_init.part.0+0x38>)
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	4620      	mov	r0, r4
 80011b0:	2200      	movs	r2, #0
 80011b2:	2104      	movs	r1, #4
 80011b4:	f7ff ff94 	bl	80010e0 <std>
 80011b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80011bc:	2201      	movs	r2, #1
 80011be:	2109      	movs	r1, #9
 80011c0:	f7ff ff8e 	bl	80010e0 <std>
 80011c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80011c8:	2202      	movs	r2, #2
 80011ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011ce:	2112      	movs	r1, #18
 80011d0:	f7ff bf86 	b.w	80010e0 <std>
 80011d4:	20000db4 	.word	0x20000db4
 80011d8:	20000c7c 	.word	0x20000c7c
 80011dc:	0800114d 	.word	0x0800114d

080011e0 <__sfp_lock_acquire>:
 80011e0:	4801      	ldr	r0, [pc, #4]	@ (80011e8 <__sfp_lock_acquire+0x8>)
 80011e2:	f000 b958 	b.w	8001496 <__retarget_lock_acquire_recursive>
 80011e6:	bf00      	nop
 80011e8:	20000dbd 	.word	0x20000dbd

080011ec <__sfp_lock_release>:
 80011ec:	4801      	ldr	r0, [pc, #4]	@ (80011f4 <__sfp_lock_release+0x8>)
 80011ee:	f000 b953 	b.w	8001498 <__retarget_lock_release_recursive>
 80011f2:	bf00      	nop
 80011f4:	20000dbd 	.word	0x20000dbd

080011f8 <__sinit>:
 80011f8:	b510      	push	{r4, lr}
 80011fa:	4604      	mov	r4, r0
 80011fc:	f7ff fff0 	bl	80011e0 <__sfp_lock_acquire>
 8001200:	6a23      	ldr	r3, [r4, #32]
 8001202:	b11b      	cbz	r3, 800120c <__sinit+0x14>
 8001204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001208:	f7ff bff0 	b.w	80011ec <__sfp_lock_release>
 800120c:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <__sinit+0x28>)
 800120e:	6223      	str	r3, [r4, #32]
 8001210:	4b04      	ldr	r3, [pc, #16]	@ (8001224 <__sinit+0x2c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1f5      	bne.n	8001204 <__sinit+0xc>
 8001218:	f7ff ffc4 	bl	80011a4 <global_stdio_init.part.0>
 800121c:	e7f2      	b.n	8001204 <__sinit+0xc>
 800121e:	bf00      	nop
 8001220:	08001165 	.word	0x08001165
 8001224:	20000db4 	.word	0x20000db4

08001228 <_fwalk_sglue>:
 8001228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800122c:	4607      	mov	r7, r0
 800122e:	4688      	mov	r8, r1
 8001230:	4614      	mov	r4, r2
 8001232:	2600      	movs	r6, #0
 8001234:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001238:	f1b9 0901 	subs.w	r9, r9, #1
 800123c:	d505      	bpl.n	800124a <_fwalk_sglue+0x22>
 800123e:	6824      	ldr	r4, [r4, #0]
 8001240:	2c00      	cmp	r4, #0
 8001242:	d1f7      	bne.n	8001234 <_fwalk_sglue+0xc>
 8001244:	4630      	mov	r0, r6
 8001246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800124a:	89ab      	ldrh	r3, [r5, #12]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d907      	bls.n	8001260 <_fwalk_sglue+0x38>
 8001250:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001254:	3301      	adds	r3, #1
 8001256:	d003      	beq.n	8001260 <_fwalk_sglue+0x38>
 8001258:	4629      	mov	r1, r5
 800125a:	4638      	mov	r0, r7
 800125c:	47c0      	blx	r8
 800125e:	4306      	orrs	r6, r0
 8001260:	3568      	adds	r5, #104	@ 0x68
 8001262:	e7e9      	b.n	8001238 <_fwalk_sglue+0x10>

08001264 <__sread>:
 8001264:	b510      	push	{r4, lr}
 8001266:	460c      	mov	r4, r1
 8001268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800126c:	f000 f8c4 	bl	80013f8 <_read_r>
 8001270:	2800      	cmp	r0, #0
 8001272:	bfab      	itete	ge
 8001274:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001276:	89a3      	ldrhlt	r3, [r4, #12]
 8001278:	181b      	addge	r3, r3, r0
 800127a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800127e:	bfac      	ite	ge
 8001280:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001282:	81a3      	strhlt	r3, [r4, #12]
 8001284:	bd10      	pop	{r4, pc}

08001286 <__swrite>:
 8001286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800128a:	461f      	mov	r7, r3
 800128c:	898b      	ldrh	r3, [r1, #12]
 800128e:	05db      	lsls	r3, r3, #23
 8001290:	4605      	mov	r5, r0
 8001292:	460c      	mov	r4, r1
 8001294:	4616      	mov	r6, r2
 8001296:	d505      	bpl.n	80012a4 <__swrite+0x1e>
 8001298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800129c:	2302      	movs	r3, #2
 800129e:	2200      	movs	r2, #0
 80012a0:	f000 f898 	bl	80013d4 <_lseek_r>
 80012a4:	89a3      	ldrh	r3, [r4, #12]
 80012a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80012ae:	81a3      	strh	r3, [r4, #12]
 80012b0:	4632      	mov	r2, r6
 80012b2:	463b      	mov	r3, r7
 80012b4:	4628      	mov	r0, r5
 80012b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012ba:	f000 b8af 	b.w	800141c <_write_r>

080012be <__sseek>:
 80012be:	b510      	push	{r4, lr}
 80012c0:	460c      	mov	r4, r1
 80012c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012c6:	f000 f885 	bl	80013d4 <_lseek_r>
 80012ca:	1c43      	adds	r3, r0, #1
 80012cc:	89a3      	ldrh	r3, [r4, #12]
 80012ce:	bf15      	itete	ne
 80012d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80012d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80012d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80012da:	81a3      	strheq	r3, [r4, #12]
 80012dc:	bf18      	it	ne
 80012de:	81a3      	strhne	r3, [r4, #12]
 80012e0:	bd10      	pop	{r4, pc}

080012e2 <__sclose>:
 80012e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012e6:	f000 b865 	b.w	80013b4 <_close_r>

080012ea <memset>:
 80012ea:	4402      	add	r2, r0
 80012ec:	4603      	mov	r3, r0
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d100      	bne.n	80012f4 <memset+0xa>
 80012f2:	4770      	bx	lr
 80012f4:	f803 1b01 	strb.w	r1, [r3], #1
 80012f8:	e7f9      	b.n	80012ee <memset+0x4>
	...

080012fc <strtok>:
 80012fc:	4b16      	ldr	r3, [pc, #88]	@ (8001358 <strtok+0x5c>)
 80012fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001302:	681f      	ldr	r7, [r3, #0]
 8001304:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8001306:	4605      	mov	r5, r0
 8001308:	460e      	mov	r6, r1
 800130a:	b9ec      	cbnz	r4, 8001348 <strtok+0x4c>
 800130c:	2050      	movs	r0, #80	@ 0x50
 800130e:	f000 f93b 	bl	8001588 <malloc>
 8001312:	4602      	mov	r2, r0
 8001314:	6478      	str	r0, [r7, #68]	@ 0x44
 8001316:	b920      	cbnz	r0, 8001322 <strtok+0x26>
 8001318:	4b10      	ldr	r3, [pc, #64]	@ (800135c <strtok+0x60>)
 800131a:	4811      	ldr	r0, [pc, #68]	@ (8001360 <strtok+0x64>)
 800131c:	215b      	movs	r1, #91	@ 0x5b
 800131e:	f000 f8cb 	bl	80014b8 <__assert_func>
 8001322:	e9c0 4400 	strd	r4, r4, [r0]
 8001326:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800132a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800132e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8001332:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8001336:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800133a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800133e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8001342:	6184      	str	r4, [r0, #24]
 8001344:	7704      	strb	r4, [r0, #28]
 8001346:	6244      	str	r4, [r0, #36]	@ 0x24
 8001348:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800134a:	4631      	mov	r1, r6
 800134c:	4628      	mov	r0, r5
 800134e:	2301      	movs	r3, #1
 8001350:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001354:	f000 b806 	b.w	8001364 <__strtok_r>
 8001358:	20000038 	.word	0x20000038
 800135c:	080023a4 	.word	0x080023a4
 8001360:	080023bb 	.word	0x080023bb

08001364 <__strtok_r>:
 8001364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001366:	4604      	mov	r4, r0
 8001368:	b908      	cbnz	r0, 800136e <__strtok_r+0xa>
 800136a:	6814      	ldr	r4, [r2, #0]
 800136c:	b144      	cbz	r4, 8001380 <__strtok_r+0x1c>
 800136e:	4620      	mov	r0, r4
 8001370:	f814 5b01 	ldrb.w	r5, [r4], #1
 8001374:	460f      	mov	r7, r1
 8001376:	f817 6b01 	ldrb.w	r6, [r7], #1
 800137a:	b91e      	cbnz	r6, 8001384 <__strtok_r+0x20>
 800137c:	b965      	cbnz	r5, 8001398 <__strtok_r+0x34>
 800137e:	6015      	str	r5, [r2, #0]
 8001380:	2000      	movs	r0, #0
 8001382:	e005      	b.n	8001390 <__strtok_r+0x2c>
 8001384:	42b5      	cmp	r5, r6
 8001386:	d1f6      	bne.n	8001376 <__strtok_r+0x12>
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f0      	bne.n	800136e <__strtok_r+0xa>
 800138c:	6014      	str	r4, [r2, #0]
 800138e:	7003      	strb	r3, [r0, #0]
 8001390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001392:	461c      	mov	r4, r3
 8001394:	e00c      	b.n	80013b0 <__strtok_r+0x4c>
 8001396:	b91d      	cbnz	r5, 80013a0 <__strtok_r+0x3c>
 8001398:	4627      	mov	r7, r4
 800139a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800139e:	460e      	mov	r6, r1
 80013a0:	f816 5b01 	ldrb.w	r5, [r6], #1
 80013a4:	42ab      	cmp	r3, r5
 80013a6:	d1f6      	bne.n	8001396 <__strtok_r+0x32>
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f2      	beq.n	8001392 <__strtok_r+0x2e>
 80013ac:	2300      	movs	r3, #0
 80013ae:	703b      	strb	r3, [r7, #0]
 80013b0:	6014      	str	r4, [r2, #0]
 80013b2:	e7ed      	b.n	8001390 <__strtok_r+0x2c>

080013b4 <_close_r>:
 80013b4:	b538      	push	{r3, r4, r5, lr}
 80013b6:	4d06      	ldr	r5, [pc, #24]	@ (80013d0 <_close_r+0x1c>)
 80013b8:	2300      	movs	r3, #0
 80013ba:	4604      	mov	r4, r0
 80013bc:	4608      	mov	r0, r1
 80013be:	602b      	str	r3, [r5, #0]
 80013c0:	f7ff fc66 	bl	8000c90 <_close>
 80013c4:	1c43      	adds	r3, r0, #1
 80013c6:	d102      	bne.n	80013ce <_close_r+0x1a>
 80013c8:	682b      	ldr	r3, [r5, #0]
 80013ca:	b103      	cbz	r3, 80013ce <_close_r+0x1a>
 80013cc:	6023      	str	r3, [r4, #0]
 80013ce:	bd38      	pop	{r3, r4, r5, pc}
 80013d0:	20000db8 	.word	0x20000db8

080013d4 <_lseek_r>:
 80013d4:	b538      	push	{r3, r4, r5, lr}
 80013d6:	4d07      	ldr	r5, [pc, #28]	@ (80013f4 <_lseek_r+0x20>)
 80013d8:	4604      	mov	r4, r0
 80013da:	4608      	mov	r0, r1
 80013dc:	4611      	mov	r1, r2
 80013de:	2200      	movs	r2, #0
 80013e0:	602a      	str	r2, [r5, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	f7ff fc7b 	bl	8000cde <_lseek>
 80013e8:	1c43      	adds	r3, r0, #1
 80013ea:	d102      	bne.n	80013f2 <_lseek_r+0x1e>
 80013ec:	682b      	ldr	r3, [r5, #0]
 80013ee:	b103      	cbz	r3, 80013f2 <_lseek_r+0x1e>
 80013f0:	6023      	str	r3, [r4, #0]
 80013f2:	bd38      	pop	{r3, r4, r5, pc}
 80013f4:	20000db8 	.word	0x20000db8

080013f8 <_read_r>:
 80013f8:	b538      	push	{r3, r4, r5, lr}
 80013fa:	4d07      	ldr	r5, [pc, #28]	@ (8001418 <_read_r+0x20>)
 80013fc:	4604      	mov	r4, r0
 80013fe:	4608      	mov	r0, r1
 8001400:	4611      	mov	r1, r2
 8001402:	2200      	movs	r2, #0
 8001404:	602a      	str	r2, [r5, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	f7ff fc09 	bl	8000c1e <_read>
 800140c:	1c43      	adds	r3, r0, #1
 800140e:	d102      	bne.n	8001416 <_read_r+0x1e>
 8001410:	682b      	ldr	r3, [r5, #0]
 8001412:	b103      	cbz	r3, 8001416 <_read_r+0x1e>
 8001414:	6023      	str	r3, [r4, #0]
 8001416:	bd38      	pop	{r3, r4, r5, pc}
 8001418:	20000db8 	.word	0x20000db8

0800141c <_write_r>:
 800141c:	b538      	push	{r3, r4, r5, lr}
 800141e:	4d07      	ldr	r5, [pc, #28]	@ (800143c <_write_r+0x20>)
 8001420:	4604      	mov	r4, r0
 8001422:	4608      	mov	r0, r1
 8001424:	4611      	mov	r1, r2
 8001426:	2200      	movs	r2, #0
 8001428:	602a      	str	r2, [r5, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	f7ff fc14 	bl	8000c58 <_write>
 8001430:	1c43      	adds	r3, r0, #1
 8001432:	d102      	bne.n	800143a <_write_r+0x1e>
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	b103      	cbz	r3, 800143a <_write_r+0x1e>
 8001438:	6023      	str	r3, [r4, #0]
 800143a:	bd38      	pop	{r3, r4, r5, pc}
 800143c:	20000db8 	.word	0x20000db8

08001440 <__errno>:
 8001440:	4b01      	ldr	r3, [pc, #4]	@ (8001448 <__errno+0x8>)
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000038 	.word	0x20000038

0800144c <__libc_init_array>:
 800144c:	b570      	push	{r4, r5, r6, lr}
 800144e:	4d0d      	ldr	r5, [pc, #52]	@ (8001484 <__libc_init_array+0x38>)
 8001450:	4c0d      	ldr	r4, [pc, #52]	@ (8001488 <__libc_init_array+0x3c>)
 8001452:	1b64      	subs	r4, r4, r5
 8001454:	10a4      	asrs	r4, r4, #2
 8001456:	2600      	movs	r6, #0
 8001458:	42a6      	cmp	r6, r4
 800145a:	d109      	bne.n	8001470 <__libc_init_array+0x24>
 800145c:	4d0b      	ldr	r5, [pc, #44]	@ (800148c <__libc_init_array+0x40>)
 800145e:	4c0c      	ldr	r4, [pc, #48]	@ (8001490 <__libc_init_array+0x44>)
 8001460:	f000 fe46 	bl	80020f0 <_init>
 8001464:	1b64      	subs	r4, r4, r5
 8001466:	10a4      	asrs	r4, r4, #2
 8001468:	2600      	movs	r6, #0
 800146a:	42a6      	cmp	r6, r4
 800146c:	d105      	bne.n	800147a <__libc_init_array+0x2e>
 800146e:	bd70      	pop	{r4, r5, r6, pc}
 8001470:	f855 3b04 	ldr.w	r3, [r5], #4
 8001474:	4798      	blx	r3
 8001476:	3601      	adds	r6, #1
 8001478:	e7ee      	b.n	8001458 <__libc_init_array+0xc>
 800147a:	f855 3b04 	ldr.w	r3, [r5], #4
 800147e:	4798      	blx	r3
 8001480:	3601      	adds	r6, #1
 8001482:	e7f2      	b.n	800146a <__libc_init_array+0x1e>
 8001484:	0800248c 	.word	0x0800248c
 8001488:	0800248c 	.word	0x0800248c
 800148c:	0800248c 	.word	0x0800248c
 8001490:	08002490 	.word	0x08002490

08001494 <__retarget_lock_init_recursive>:
 8001494:	4770      	bx	lr

08001496 <__retarget_lock_acquire_recursive>:
 8001496:	4770      	bx	lr

08001498 <__retarget_lock_release_recursive>:
 8001498:	4770      	bx	lr

0800149a <memcpy>:
 800149a:	440a      	add	r2, r1
 800149c:	4291      	cmp	r1, r2
 800149e:	f100 33ff 	add.w	r3, r0, #4294967295
 80014a2:	d100      	bne.n	80014a6 <memcpy+0xc>
 80014a4:	4770      	bx	lr
 80014a6:	b510      	push	{r4, lr}
 80014a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80014ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80014b0:	4291      	cmp	r1, r2
 80014b2:	d1f9      	bne.n	80014a8 <memcpy+0xe>
 80014b4:	bd10      	pop	{r4, pc}
	...

080014b8 <__assert_func>:
 80014b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80014ba:	4614      	mov	r4, r2
 80014bc:	461a      	mov	r2, r3
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <__assert_func+0x2c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4605      	mov	r5, r0
 80014c4:	68d8      	ldr	r0, [r3, #12]
 80014c6:	b14c      	cbz	r4, 80014dc <__assert_func+0x24>
 80014c8:	4b07      	ldr	r3, [pc, #28]	@ (80014e8 <__assert_func+0x30>)
 80014ca:	9100      	str	r1, [sp, #0]
 80014cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80014d0:	4906      	ldr	r1, [pc, #24]	@ (80014ec <__assert_func+0x34>)
 80014d2:	462b      	mov	r3, r5
 80014d4:	f000 f9ba 	bl	800184c <fiprintf>
 80014d8:	f000 f9da 	bl	8001890 <abort>
 80014dc:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <__assert_func+0x38>)
 80014de:	461c      	mov	r4, r3
 80014e0:	e7f3      	b.n	80014ca <__assert_func+0x12>
 80014e2:	bf00      	nop
 80014e4:	20000038 	.word	0x20000038
 80014e8:	08002415 	.word	0x08002415
 80014ec:	08002422 	.word	0x08002422
 80014f0:	08002450 	.word	0x08002450

080014f4 <_free_r>:
 80014f4:	b538      	push	{r3, r4, r5, lr}
 80014f6:	4605      	mov	r5, r0
 80014f8:	2900      	cmp	r1, #0
 80014fa:	d041      	beq.n	8001580 <_free_r+0x8c>
 80014fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001500:	1f0c      	subs	r4, r1, #4
 8001502:	2b00      	cmp	r3, #0
 8001504:	bfb8      	it	lt
 8001506:	18e4      	addlt	r4, r4, r3
 8001508:	f000 f8e8 	bl	80016dc <__malloc_lock>
 800150c:	4a1d      	ldr	r2, [pc, #116]	@ (8001584 <_free_r+0x90>)
 800150e:	6813      	ldr	r3, [r2, #0]
 8001510:	b933      	cbnz	r3, 8001520 <_free_r+0x2c>
 8001512:	6063      	str	r3, [r4, #4]
 8001514:	6014      	str	r4, [r2, #0]
 8001516:	4628      	mov	r0, r5
 8001518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800151c:	f000 b8e4 	b.w	80016e8 <__malloc_unlock>
 8001520:	42a3      	cmp	r3, r4
 8001522:	d908      	bls.n	8001536 <_free_r+0x42>
 8001524:	6820      	ldr	r0, [r4, #0]
 8001526:	1821      	adds	r1, r4, r0
 8001528:	428b      	cmp	r3, r1
 800152a:	bf01      	itttt	eq
 800152c:	6819      	ldreq	r1, [r3, #0]
 800152e:	685b      	ldreq	r3, [r3, #4]
 8001530:	1809      	addeq	r1, r1, r0
 8001532:	6021      	streq	r1, [r4, #0]
 8001534:	e7ed      	b.n	8001512 <_free_r+0x1e>
 8001536:	461a      	mov	r2, r3
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	b10b      	cbz	r3, 8001540 <_free_r+0x4c>
 800153c:	42a3      	cmp	r3, r4
 800153e:	d9fa      	bls.n	8001536 <_free_r+0x42>
 8001540:	6811      	ldr	r1, [r2, #0]
 8001542:	1850      	adds	r0, r2, r1
 8001544:	42a0      	cmp	r0, r4
 8001546:	d10b      	bne.n	8001560 <_free_r+0x6c>
 8001548:	6820      	ldr	r0, [r4, #0]
 800154a:	4401      	add	r1, r0
 800154c:	1850      	adds	r0, r2, r1
 800154e:	4283      	cmp	r3, r0
 8001550:	6011      	str	r1, [r2, #0]
 8001552:	d1e0      	bne.n	8001516 <_free_r+0x22>
 8001554:	6818      	ldr	r0, [r3, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	6053      	str	r3, [r2, #4]
 800155a:	4408      	add	r0, r1
 800155c:	6010      	str	r0, [r2, #0]
 800155e:	e7da      	b.n	8001516 <_free_r+0x22>
 8001560:	d902      	bls.n	8001568 <_free_r+0x74>
 8001562:	230c      	movs	r3, #12
 8001564:	602b      	str	r3, [r5, #0]
 8001566:	e7d6      	b.n	8001516 <_free_r+0x22>
 8001568:	6820      	ldr	r0, [r4, #0]
 800156a:	1821      	adds	r1, r4, r0
 800156c:	428b      	cmp	r3, r1
 800156e:	bf04      	itt	eq
 8001570:	6819      	ldreq	r1, [r3, #0]
 8001572:	685b      	ldreq	r3, [r3, #4]
 8001574:	6063      	str	r3, [r4, #4]
 8001576:	bf04      	itt	eq
 8001578:	1809      	addeq	r1, r1, r0
 800157a:	6021      	streq	r1, [r4, #0]
 800157c:	6054      	str	r4, [r2, #4]
 800157e:	e7ca      	b.n	8001516 <_free_r+0x22>
 8001580:	bd38      	pop	{r3, r4, r5, pc}
 8001582:	bf00      	nop
 8001584:	20000dc4 	.word	0x20000dc4

08001588 <malloc>:
 8001588:	4b02      	ldr	r3, [pc, #8]	@ (8001594 <malloc+0xc>)
 800158a:	4601      	mov	r1, r0
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	f000 b825 	b.w	80015dc <_malloc_r>
 8001592:	bf00      	nop
 8001594:	20000038 	.word	0x20000038

08001598 <sbrk_aligned>:
 8001598:	b570      	push	{r4, r5, r6, lr}
 800159a:	4e0f      	ldr	r6, [pc, #60]	@ (80015d8 <sbrk_aligned+0x40>)
 800159c:	460c      	mov	r4, r1
 800159e:	6831      	ldr	r1, [r6, #0]
 80015a0:	4605      	mov	r5, r0
 80015a2:	b911      	cbnz	r1, 80015aa <sbrk_aligned+0x12>
 80015a4:	f000 f964 	bl	8001870 <_sbrk_r>
 80015a8:	6030      	str	r0, [r6, #0]
 80015aa:	4621      	mov	r1, r4
 80015ac:	4628      	mov	r0, r5
 80015ae:	f000 f95f 	bl	8001870 <_sbrk_r>
 80015b2:	1c43      	adds	r3, r0, #1
 80015b4:	d103      	bne.n	80015be <sbrk_aligned+0x26>
 80015b6:	f04f 34ff 	mov.w	r4, #4294967295
 80015ba:	4620      	mov	r0, r4
 80015bc:	bd70      	pop	{r4, r5, r6, pc}
 80015be:	1cc4      	adds	r4, r0, #3
 80015c0:	f024 0403 	bic.w	r4, r4, #3
 80015c4:	42a0      	cmp	r0, r4
 80015c6:	d0f8      	beq.n	80015ba <sbrk_aligned+0x22>
 80015c8:	1a21      	subs	r1, r4, r0
 80015ca:	4628      	mov	r0, r5
 80015cc:	f000 f950 	bl	8001870 <_sbrk_r>
 80015d0:	3001      	adds	r0, #1
 80015d2:	d1f2      	bne.n	80015ba <sbrk_aligned+0x22>
 80015d4:	e7ef      	b.n	80015b6 <sbrk_aligned+0x1e>
 80015d6:	bf00      	nop
 80015d8:	20000dc0 	.word	0x20000dc0

080015dc <_malloc_r>:
 80015dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015e0:	1ccd      	adds	r5, r1, #3
 80015e2:	f025 0503 	bic.w	r5, r5, #3
 80015e6:	3508      	adds	r5, #8
 80015e8:	2d0c      	cmp	r5, #12
 80015ea:	bf38      	it	cc
 80015ec:	250c      	movcc	r5, #12
 80015ee:	2d00      	cmp	r5, #0
 80015f0:	4606      	mov	r6, r0
 80015f2:	db01      	blt.n	80015f8 <_malloc_r+0x1c>
 80015f4:	42a9      	cmp	r1, r5
 80015f6:	d904      	bls.n	8001602 <_malloc_r+0x26>
 80015f8:	230c      	movs	r3, #12
 80015fa:	6033      	str	r3, [r6, #0]
 80015fc:	2000      	movs	r0, #0
 80015fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001602:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80016d8 <_malloc_r+0xfc>
 8001606:	f000 f869 	bl	80016dc <__malloc_lock>
 800160a:	f8d8 3000 	ldr.w	r3, [r8]
 800160e:	461c      	mov	r4, r3
 8001610:	bb44      	cbnz	r4, 8001664 <_malloc_r+0x88>
 8001612:	4629      	mov	r1, r5
 8001614:	4630      	mov	r0, r6
 8001616:	f7ff ffbf 	bl	8001598 <sbrk_aligned>
 800161a:	1c43      	adds	r3, r0, #1
 800161c:	4604      	mov	r4, r0
 800161e:	d158      	bne.n	80016d2 <_malloc_r+0xf6>
 8001620:	f8d8 4000 	ldr.w	r4, [r8]
 8001624:	4627      	mov	r7, r4
 8001626:	2f00      	cmp	r7, #0
 8001628:	d143      	bne.n	80016b2 <_malloc_r+0xd6>
 800162a:	2c00      	cmp	r4, #0
 800162c:	d04b      	beq.n	80016c6 <_malloc_r+0xea>
 800162e:	6823      	ldr	r3, [r4, #0]
 8001630:	4639      	mov	r1, r7
 8001632:	4630      	mov	r0, r6
 8001634:	eb04 0903 	add.w	r9, r4, r3
 8001638:	f000 f91a 	bl	8001870 <_sbrk_r>
 800163c:	4581      	cmp	r9, r0
 800163e:	d142      	bne.n	80016c6 <_malloc_r+0xea>
 8001640:	6821      	ldr	r1, [r4, #0]
 8001642:	1a6d      	subs	r5, r5, r1
 8001644:	4629      	mov	r1, r5
 8001646:	4630      	mov	r0, r6
 8001648:	f7ff ffa6 	bl	8001598 <sbrk_aligned>
 800164c:	3001      	adds	r0, #1
 800164e:	d03a      	beq.n	80016c6 <_malloc_r+0xea>
 8001650:	6823      	ldr	r3, [r4, #0]
 8001652:	442b      	add	r3, r5
 8001654:	6023      	str	r3, [r4, #0]
 8001656:	f8d8 3000 	ldr.w	r3, [r8]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	bb62      	cbnz	r2, 80016b8 <_malloc_r+0xdc>
 800165e:	f8c8 7000 	str.w	r7, [r8]
 8001662:	e00f      	b.n	8001684 <_malloc_r+0xa8>
 8001664:	6822      	ldr	r2, [r4, #0]
 8001666:	1b52      	subs	r2, r2, r5
 8001668:	d420      	bmi.n	80016ac <_malloc_r+0xd0>
 800166a:	2a0b      	cmp	r2, #11
 800166c:	d917      	bls.n	800169e <_malloc_r+0xc2>
 800166e:	1961      	adds	r1, r4, r5
 8001670:	42a3      	cmp	r3, r4
 8001672:	6025      	str	r5, [r4, #0]
 8001674:	bf18      	it	ne
 8001676:	6059      	strne	r1, [r3, #4]
 8001678:	6863      	ldr	r3, [r4, #4]
 800167a:	bf08      	it	eq
 800167c:	f8c8 1000 	streq.w	r1, [r8]
 8001680:	5162      	str	r2, [r4, r5]
 8001682:	604b      	str	r3, [r1, #4]
 8001684:	4630      	mov	r0, r6
 8001686:	f000 f82f 	bl	80016e8 <__malloc_unlock>
 800168a:	f104 000b 	add.w	r0, r4, #11
 800168e:	1d23      	adds	r3, r4, #4
 8001690:	f020 0007 	bic.w	r0, r0, #7
 8001694:	1ac2      	subs	r2, r0, r3
 8001696:	bf1c      	itt	ne
 8001698:	1a1b      	subne	r3, r3, r0
 800169a:	50a3      	strne	r3, [r4, r2]
 800169c:	e7af      	b.n	80015fe <_malloc_r+0x22>
 800169e:	6862      	ldr	r2, [r4, #4]
 80016a0:	42a3      	cmp	r3, r4
 80016a2:	bf0c      	ite	eq
 80016a4:	f8c8 2000 	streq.w	r2, [r8]
 80016a8:	605a      	strne	r2, [r3, #4]
 80016aa:	e7eb      	b.n	8001684 <_malloc_r+0xa8>
 80016ac:	4623      	mov	r3, r4
 80016ae:	6864      	ldr	r4, [r4, #4]
 80016b0:	e7ae      	b.n	8001610 <_malloc_r+0x34>
 80016b2:	463c      	mov	r4, r7
 80016b4:	687f      	ldr	r7, [r7, #4]
 80016b6:	e7b6      	b.n	8001626 <_malloc_r+0x4a>
 80016b8:	461a      	mov	r2, r3
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	42a3      	cmp	r3, r4
 80016be:	d1fb      	bne.n	80016b8 <_malloc_r+0xdc>
 80016c0:	2300      	movs	r3, #0
 80016c2:	6053      	str	r3, [r2, #4]
 80016c4:	e7de      	b.n	8001684 <_malloc_r+0xa8>
 80016c6:	230c      	movs	r3, #12
 80016c8:	6033      	str	r3, [r6, #0]
 80016ca:	4630      	mov	r0, r6
 80016cc:	f000 f80c 	bl	80016e8 <__malloc_unlock>
 80016d0:	e794      	b.n	80015fc <_malloc_r+0x20>
 80016d2:	6005      	str	r5, [r0, #0]
 80016d4:	e7d6      	b.n	8001684 <_malloc_r+0xa8>
 80016d6:	bf00      	nop
 80016d8:	20000dc4 	.word	0x20000dc4

080016dc <__malloc_lock>:
 80016dc:	4801      	ldr	r0, [pc, #4]	@ (80016e4 <__malloc_lock+0x8>)
 80016de:	f7ff beda 	b.w	8001496 <__retarget_lock_acquire_recursive>
 80016e2:	bf00      	nop
 80016e4:	20000dbc 	.word	0x20000dbc

080016e8 <__malloc_unlock>:
 80016e8:	4801      	ldr	r0, [pc, #4]	@ (80016f0 <__malloc_unlock+0x8>)
 80016ea:	f7ff bed5 	b.w	8001498 <__retarget_lock_release_recursive>
 80016ee:	bf00      	nop
 80016f0:	20000dbc 	.word	0x20000dbc

080016f4 <__sflush_r>:
 80016f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80016f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016fc:	0716      	lsls	r6, r2, #28
 80016fe:	4605      	mov	r5, r0
 8001700:	460c      	mov	r4, r1
 8001702:	d454      	bmi.n	80017ae <__sflush_r+0xba>
 8001704:	684b      	ldr	r3, [r1, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	dc02      	bgt.n	8001710 <__sflush_r+0x1c>
 800170a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800170c:	2b00      	cmp	r3, #0
 800170e:	dd48      	ble.n	80017a2 <__sflush_r+0xae>
 8001710:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001712:	2e00      	cmp	r6, #0
 8001714:	d045      	beq.n	80017a2 <__sflush_r+0xae>
 8001716:	2300      	movs	r3, #0
 8001718:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800171c:	682f      	ldr	r7, [r5, #0]
 800171e:	6a21      	ldr	r1, [r4, #32]
 8001720:	602b      	str	r3, [r5, #0]
 8001722:	d030      	beq.n	8001786 <__sflush_r+0x92>
 8001724:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001726:	89a3      	ldrh	r3, [r4, #12]
 8001728:	0759      	lsls	r1, r3, #29
 800172a:	d505      	bpl.n	8001738 <__sflush_r+0x44>
 800172c:	6863      	ldr	r3, [r4, #4]
 800172e:	1ad2      	subs	r2, r2, r3
 8001730:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001732:	b10b      	cbz	r3, 8001738 <__sflush_r+0x44>
 8001734:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001736:	1ad2      	subs	r2, r2, r3
 8001738:	2300      	movs	r3, #0
 800173a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800173c:	6a21      	ldr	r1, [r4, #32]
 800173e:	4628      	mov	r0, r5
 8001740:	47b0      	blx	r6
 8001742:	1c43      	adds	r3, r0, #1
 8001744:	89a3      	ldrh	r3, [r4, #12]
 8001746:	d106      	bne.n	8001756 <__sflush_r+0x62>
 8001748:	6829      	ldr	r1, [r5, #0]
 800174a:	291d      	cmp	r1, #29
 800174c:	d82b      	bhi.n	80017a6 <__sflush_r+0xb2>
 800174e:	4a2a      	ldr	r2, [pc, #168]	@ (80017f8 <__sflush_r+0x104>)
 8001750:	40ca      	lsrs	r2, r1
 8001752:	07d6      	lsls	r6, r2, #31
 8001754:	d527      	bpl.n	80017a6 <__sflush_r+0xb2>
 8001756:	2200      	movs	r2, #0
 8001758:	6062      	str	r2, [r4, #4]
 800175a:	04d9      	lsls	r1, r3, #19
 800175c:	6922      	ldr	r2, [r4, #16]
 800175e:	6022      	str	r2, [r4, #0]
 8001760:	d504      	bpl.n	800176c <__sflush_r+0x78>
 8001762:	1c42      	adds	r2, r0, #1
 8001764:	d101      	bne.n	800176a <__sflush_r+0x76>
 8001766:	682b      	ldr	r3, [r5, #0]
 8001768:	b903      	cbnz	r3, 800176c <__sflush_r+0x78>
 800176a:	6560      	str	r0, [r4, #84]	@ 0x54
 800176c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800176e:	602f      	str	r7, [r5, #0]
 8001770:	b1b9      	cbz	r1, 80017a2 <__sflush_r+0xae>
 8001772:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001776:	4299      	cmp	r1, r3
 8001778:	d002      	beq.n	8001780 <__sflush_r+0x8c>
 800177a:	4628      	mov	r0, r5
 800177c:	f7ff feba 	bl	80014f4 <_free_r>
 8001780:	2300      	movs	r3, #0
 8001782:	6363      	str	r3, [r4, #52]	@ 0x34
 8001784:	e00d      	b.n	80017a2 <__sflush_r+0xae>
 8001786:	2301      	movs	r3, #1
 8001788:	4628      	mov	r0, r5
 800178a:	47b0      	blx	r6
 800178c:	4602      	mov	r2, r0
 800178e:	1c50      	adds	r0, r2, #1
 8001790:	d1c9      	bne.n	8001726 <__sflush_r+0x32>
 8001792:	682b      	ldr	r3, [r5, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0c6      	beq.n	8001726 <__sflush_r+0x32>
 8001798:	2b1d      	cmp	r3, #29
 800179a:	d001      	beq.n	80017a0 <__sflush_r+0xac>
 800179c:	2b16      	cmp	r3, #22
 800179e:	d11e      	bne.n	80017de <__sflush_r+0xea>
 80017a0:	602f      	str	r7, [r5, #0]
 80017a2:	2000      	movs	r0, #0
 80017a4:	e022      	b.n	80017ec <__sflush_r+0xf8>
 80017a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017aa:	b21b      	sxth	r3, r3
 80017ac:	e01b      	b.n	80017e6 <__sflush_r+0xf2>
 80017ae:	690f      	ldr	r7, [r1, #16]
 80017b0:	2f00      	cmp	r7, #0
 80017b2:	d0f6      	beq.n	80017a2 <__sflush_r+0xae>
 80017b4:	0793      	lsls	r3, r2, #30
 80017b6:	680e      	ldr	r6, [r1, #0]
 80017b8:	bf08      	it	eq
 80017ba:	694b      	ldreq	r3, [r1, #20]
 80017bc:	600f      	str	r7, [r1, #0]
 80017be:	bf18      	it	ne
 80017c0:	2300      	movne	r3, #0
 80017c2:	eba6 0807 	sub.w	r8, r6, r7
 80017c6:	608b      	str	r3, [r1, #8]
 80017c8:	f1b8 0f00 	cmp.w	r8, #0
 80017cc:	dde9      	ble.n	80017a2 <__sflush_r+0xae>
 80017ce:	6a21      	ldr	r1, [r4, #32]
 80017d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80017d2:	4643      	mov	r3, r8
 80017d4:	463a      	mov	r2, r7
 80017d6:	4628      	mov	r0, r5
 80017d8:	47b0      	blx	r6
 80017da:	2800      	cmp	r0, #0
 80017dc:	dc08      	bgt.n	80017f0 <__sflush_r+0xfc>
 80017de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017e6:	81a3      	strh	r3, [r4, #12]
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017f0:	4407      	add	r7, r0
 80017f2:	eba8 0800 	sub.w	r8, r8, r0
 80017f6:	e7e7      	b.n	80017c8 <__sflush_r+0xd4>
 80017f8:	20400001 	.word	0x20400001

080017fc <_fflush_r>:
 80017fc:	b538      	push	{r3, r4, r5, lr}
 80017fe:	690b      	ldr	r3, [r1, #16]
 8001800:	4605      	mov	r5, r0
 8001802:	460c      	mov	r4, r1
 8001804:	b913      	cbnz	r3, 800180c <_fflush_r+0x10>
 8001806:	2500      	movs	r5, #0
 8001808:	4628      	mov	r0, r5
 800180a:	bd38      	pop	{r3, r4, r5, pc}
 800180c:	b118      	cbz	r0, 8001816 <_fflush_r+0x1a>
 800180e:	6a03      	ldr	r3, [r0, #32]
 8001810:	b90b      	cbnz	r3, 8001816 <_fflush_r+0x1a>
 8001812:	f7ff fcf1 	bl	80011f8 <__sinit>
 8001816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f3      	beq.n	8001806 <_fflush_r+0xa>
 800181e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001820:	07d0      	lsls	r0, r2, #31
 8001822:	d404      	bmi.n	800182e <_fflush_r+0x32>
 8001824:	0599      	lsls	r1, r3, #22
 8001826:	d402      	bmi.n	800182e <_fflush_r+0x32>
 8001828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800182a:	f7ff fe34 	bl	8001496 <__retarget_lock_acquire_recursive>
 800182e:	4628      	mov	r0, r5
 8001830:	4621      	mov	r1, r4
 8001832:	f7ff ff5f 	bl	80016f4 <__sflush_r>
 8001836:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001838:	07da      	lsls	r2, r3, #31
 800183a:	4605      	mov	r5, r0
 800183c:	d4e4      	bmi.n	8001808 <_fflush_r+0xc>
 800183e:	89a3      	ldrh	r3, [r4, #12]
 8001840:	059b      	lsls	r3, r3, #22
 8001842:	d4e1      	bmi.n	8001808 <_fflush_r+0xc>
 8001844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001846:	f7ff fe27 	bl	8001498 <__retarget_lock_release_recursive>
 800184a:	e7dd      	b.n	8001808 <_fflush_r+0xc>

0800184c <fiprintf>:
 800184c:	b40e      	push	{r1, r2, r3}
 800184e:	b503      	push	{r0, r1, lr}
 8001850:	4601      	mov	r1, r0
 8001852:	ab03      	add	r3, sp, #12
 8001854:	4805      	ldr	r0, [pc, #20]	@ (800186c <fiprintf+0x20>)
 8001856:	f853 2b04 	ldr.w	r2, [r3], #4
 800185a:	6800      	ldr	r0, [r0, #0]
 800185c:	9301      	str	r3, [sp, #4]
 800185e:	f000 f847 	bl	80018f0 <_vfiprintf_r>
 8001862:	b002      	add	sp, #8
 8001864:	f85d eb04 	ldr.w	lr, [sp], #4
 8001868:	b003      	add	sp, #12
 800186a:	4770      	bx	lr
 800186c:	20000038 	.word	0x20000038

08001870 <_sbrk_r>:
 8001870:	b538      	push	{r3, r4, r5, lr}
 8001872:	4d06      	ldr	r5, [pc, #24]	@ (800188c <_sbrk_r+0x1c>)
 8001874:	2300      	movs	r3, #0
 8001876:	4604      	mov	r4, r0
 8001878:	4608      	mov	r0, r1
 800187a:	602b      	str	r3, [r5, #0]
 800187c:	f7ff fa3c 	bl	8000cf8 <_sbrk>
 8001880:	1c43      	adds	r3, r0, #1
 8001882:	d102      	bne.n	800188a <_sbrk_r+0x1a>
 8001884:	682b      	ldr	r3, [r5, #0]
 8001886:	b103      	cbz	r3, 800188a <_sbrk_r+0x1a>
 8001888:	6023      	str	r3, [r4, #0]
 800188a:	bd38      	pop	{r3, r4, r5, pc}
 800188c:	20000db8 	.word	0x20000db8

08001890 <abort>:
 8001890:	b508      	push	{r3, lr}
 8001892:	2006      	movs	r0, #6
 8001894:	f000 fb8c 	bl	8001fb0 <raise>
 8001898:	2001      	movs	r0, #1
 800189a:	f7ff f9b5 	bl	8000c08 <_exit>

0800189e <__sfputc_r>:
 800189e:	6893      	ldr	r3, [r2, #8]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	b410      	push	{r4}
 80018a6:	6093      	str	r3, [r2, #8]
 80018a8:	da08      	bge.n	80018bc <__sfputc_r+0x1e>
 80018aa:	6994      	ldr	r4, [r2, #24]
 80018ac:	42a3      	cmp	r3, r4
 80018ae:	db01      	blt.n	80018b4 <__sfputc_r+0x16>
 80018b0:	290a      	cmp	r1, #10
 80018b2:	d103      	bne.n	80018bc <__sfputc_r+0x1e>
 80018b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018b8:	f000 babe 	b.w	8001e38 <__swbuf_r>
 80018bc:	6813      	ldr	r3, [r2, #0]
 80018be:	1c58      	adds	r0, r3, #1
 80018c0:	6010      	str	r0, [r2, #0]
 80018c2:	7019      	strb	r1, [r3, #0]
 80018c4:	4608      	mov	r0, r1
 80018c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <__sfputs_r>:
 80018cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ce:	4606      	mov	r6, r0
 80018d0:	460f      	mov	r7, r1
 80018d2:	4614      	mov	r4, r2
 80018d4:	18d5      	adds	r5, r2, r3
 80018d6:	42ac      	cmp	r4, r5
 80018d8:	d101      	bne.n	80018de <__sfputs_r+0x12>
 80018da:	2000      	movs	r0, #0
 80018dc:	e007      	b.n	80018ee <__sfputs_r+0x22>
 80018de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018e2:	463a      	mov	r2, r7
 80018e4:	4630      	mov	r0, r6
 80018e6:	f7ff ffda 	bl	800189e <__sfputc_r>
 80018ea:	1c43      	adds	r3, r0, #1
 80018ec:	d1f3      	bne.n	80018d6 <__sfputs_r+0xa>
 80018ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080018f0 <_vfiprintf_r>:
 80018f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018f4:	460d      	mov	r5, r1
 80018f6:	b09d      	sub	sp, #116	@ 0x74
 80018f8:	4614      	mov	r4, r2
 80018fa:	4698      	mov	r8, r3
 80018fc:	4606      	mov	r6, r0
 80018fe:	b118      	cbz	r0, 8001908 <_vfiprintf_r+0x18>
 8001900:	6a03      	ldr	r3, [r0, #32]
 8001902:	b90b      	cbnz	r3, 8001908 <_vfiprintf_r+0x18>
 8001904:	f7ff fc78 	bl	80011f8 <__sinit>
 8001908:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800190a:	07d9      	lsls	r1, r3, #31
 800190c:	d405      	bmi.n	800191a <_vfiprintf_r+0x2a>
 800190e:	89ab      	ldrh	r3, [r5, #12]
 8001910:	059a      	lsls	r2, r3, #22
 8001912:	d402      	bmi.n	800191a <_vfiprintf_r+0x2a>
 8001914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001916:	f7ff fdbe 	bl	8001496 <__retarget_lock_acquire_recursive>
 800191a:	89ab      	ldrh	r3, [r5, #12]
 800191c:	071b      	lsls	r3, r3, #28
 800191e:	d501      	bpl.n	8001924 <_vfiprintf_r+0x34>
 8001920:	692b      	ldr	r3, [r5, #16]
 8001922:	b99b      	cbnz	r3, 800194c <_vfiprintf_r+0x5c>
 8001924:	4629      	mov	r1, r5
 8001926:	4630      	mov	r0, r6
 8001928:	f000 fac4 	bl	8001eb4 <__swsetup_r>
 800192c:	b170      	cbz	r0, 800194c <_vfiprintf_r+0x5c>
 800192e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001930:	07dc      	lsls	r4, r3, #31
 8001932:	d504      	bpl.n	800193e <_vfiprintf_r+0x4e>
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	b01d      	add	sp, #116	@ 0x74
 800193a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800193e:	89ab      	ldrh	r3, [r5, #12]
 8001940:	0598      	lsls	r0, r3, #22
 8001942:	d4f7      	bmi.n	8001934 <_vfiprintf_r+0x44>
 8001944:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001946:	f7ff fda7 	bl	8001498 <__retarget_lock_release_recursive>
 800194a:	e7f3      	b.n	8001934 <_vfiprintf_r+0x44>
 800194c:	2300      	movs	r3, #0
 800194e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001950:	2320      	movs	r3, #32
 8001952:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001956:	f8cd 800c 	str.w	r8, [sp, #12]
 800195a:	2330      	movs	r3, #48	@ 0x30
 800195c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001b0c <_vfiprintf_r+0x21c>
 8001960:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001964:	f04f 0901 	mov.w	r9, #1
 8001968:	4623      	mov	r3, r4
 800196a:	469a      	mov	sl, r3
 800196c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001970:	b10a      	cbz	r2, 8001976 <_vfiprintf_r+0x86>
 8001972:	2a25      	cmp	r2, #37	@ 0x25
 8001974:	d1f9      	bne.n	800196a <_vfiprintf_r+0x7a>
 8001976:	ebba 0b04 	subs.w	fp, sl, r4
 800197a:	d00b      	beq.n	8001994 <_vfiprintf_r+0xa4>
 800197c:	465b      	mov	r3, fp
 800197e:	4622      	mov	r2, r4
 8001980:	4629      	mov	r1, r5
 8001982:	4630      	mov	r0, r6
 8001984:	f7ff ffa2 	bl	80018cc <__sfputs_r>
 8001988:	3001      	adds	r0, #1
 800198a:	f000 80a7 	beq.w	8001adc <_vfiprintf_r+0x1ec>
 800198e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001990:	445a      	add	r2, fp
 8001992:	9209      	str	r2, [sp, #36]	@ 0x24
 8001994:	f89a 3000 	ldrb.w	r3, [sl]
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 809f 	beq.w	8001adc <_vfiprintf_r+0x1ec>
 800199e:	2300      	movs	r3, #0
 80019a0:	f04f 32ff 	mov.w	r2, #4294967295
 80019a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80019a8:	f10a 0a01 	add.w	sl, sl, #1
 80019ac:	9304      	str	r3, [sp, #16]
 80019ae:	9307      	str	r3, [sp, #28]
 80019b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80019b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80019b6:	4654      	mov	r4, sl
 80019b8:	2205      	movs	r2, #5
 80019ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019be:	4853      	ldr	r0, [pc, #332]	@ (8001b0c <_vfiprintf_r+0x21c>)
 80019c0:	f7fe fc26 	bl	8000210 <memchr>
 80019c4:	9a04      	ldr	r2, [sp, #16]
 80019c6:	b9d8      	cbnz	r0, 8001a00 <_vfiprintf_r+0x110>
 80019c8:	06d1      	lsls	r1, r2, #27
 80019ca:	bf44      	itt	mi
 80019cc:	2320      	movmi	r3, #32
 80019ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80019d2:	0713      	lsls	r3, r2, #28
 80019d4:	bf44      	itt	mi
 80019d6:	232b      	movmi	r3, #43	@ 0x2b
 80019d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80019dc:	f89a 3000 	ldrb.w	r3, [sl]
 80019e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80019e2:	d015      	beq.n	8001a10 <_vfiprintf_r+0x120>
 80019e4:	9a07      	ldr	r2, [sp, #28]
 80019e6:	4654      	mov	r4, sl
 80019e8:	2000      	movs	r0, #0
 80019ea:	f04f 0c0a 	mov.w	ip, #10
 80019ee:	4621      	mov	r1, r4
 80019f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80019f4:	3b30      	subs	r3, #48	@ 0x30
 80019f6:	2b09      	cmp	r3, #9
 80019f8:	d94b      	bls.n	8001a92 <_vfiprintf_r+0x1a2>
 80019fa:	b1b0      	cbz	r0, 8001a2a <_vfiprintf_r+0x13a>
 80019fc:	9207      	str	r2, [sp, #28]
 80019fe:	e014      	b.n	8001a2a <_vfiprintf_r+0x13a>
 8001a00:	eba0 0308 	sub.w	r3, r0, r8
 8001a04:	fa09 f303 	lsl.w	r3, r9, r3
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	9304      	str	r3, [sp, #16]
 8001a0c:	46a2      	mov	sl, r4
 8001a0e:	e7d2      	b.n	80019b6 <_vfiprintf_r+0xc6>
 8001a10:	9b03      	ldr	r3, [sp, #12]
 8001a12:	1d19      	adds	r1, r3, #4
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	9103      	str	r1, [sp, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bfbb      	ittet	lt
 8001a1c:	425b      	neglt	r3, r3
 8001a1e:	f042 0202 	orrlt.w	r2, r2, #2
 8001a22:	9307      	strge	r3, [sp, #28]
 8001a24:	9307      	strlt	r3, [sp, #28]
 8001a26:	bfb8      	it	lt
 8001a28:	9204      	strlt	r2, [sp, #16]
 8001a2a:	7823      	ldrb	r3, [r4, #0]
 8001a2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a2e:	d10a      	bne.n	8001a46 <_vfiprintf_r+0x156>
 8001a30:	7863      	ldrb	r3, [r4, #1]
 8001a32:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a34:	d132      	bne.n	8001a9c <_vfiprintf_r+0x1ac>
 8001a36:	9b03      	ldr	r3, [sp, #12]
 8001a38:	1d1a      	adds	r2, r3, #4
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	9203      	str	r2, [sp, #12]
 8001a3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001a42:	3402      	adds	r4, #2
 8001a44:	9305      	str	r3, [sp, #20]
 8001a46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001b1c <_vfiprintf_r+0x22c>
 8001a4a:	7821      	ldrb	r1, [r4, #0]
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	4650      	mov	r0, sl
 8001a50:	f7fe fbde 	bl	8000210 <memchr>
 8001a54:	b138      	cbz	r0, 8001a66 <_vfiprintf_r+0x176>
 8001a56:	9b04      	ldr	r3, [sp, #16]
 8001a58:	eba0 000a 	sub.w	r0, r0, sl
 8001a5c:	2240      	movs	r2, #64	@ 0x40
 8001a5e:	4082      	lsls	r2, r0
 8001a60:	4313      	orrs	r3, r2
 8001a62:	3401      	adds	r4, #1
 8001a64:	9304      	str	r3, [sp, #16]
 8001a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a6a:	4829      	ldr	r0, [pc, #164]	@ (8001b10 <_vfiprintf_r+0x220>)
 8001a6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001a70:	2206      	movs	r2, #6
 8001a72:	f7fe fbcd 	bl	8000210 <memchr>
 8001a76:	2800      	cmp	r0, #0
 8001a78:	d03f      	beq.n	8001afa <_vfiprintf_r+0x20a>
 8001a7a:	4b26      	ldr	r3, [pc, #152]	@ (8001b14 <_vfiprintf_r+0x224>)
 8001a7c:	bb1b      	cbnz	r3, 8001ac6 <_vfiprintf_r+0x1d6>
 8001a7e:	9b03      	ldr	r3, [sp, #12]
 8001a80:	3307      	adds	r3, #7
 8001a82:	f023 0307 	bic.w	r3, r3, #7
 8001a86:	3308      	adds	r3, #8
 8001a88:	9303      	str	r3, [sp, #12]
 8001a8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001a8c:	443b      	add	r3, r7
 8001a8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001a90:	e76a      	b.n	8001968 <_vfiprintf_r+0x78>
 8001a92:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a96:	460c      	mov	r4, r1
 8001a98:	2001      	movs	r0, #1
 8001a9a:	e7a8      	b.n	80019ee <_vfiprintf_r+0xfe>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	3401      	adds	r4, #1
 8001aa0:	9305      	str	r3, [sp, #20]
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f04f 0c0a 	mov.w	ip, #10
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001aae:	3a30      	subs	r2, #48	@ 0x30
 8001ab0:	2a09      	cmp	r2, #9
 8001ab2:	d903      	bls.n	8001abc <_vfiprintf_r+0x1cc>
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0c6      	beq.n	8001a46 <_vfiprintf_r+0x156>
 8001ab8:	9105      	str	r1, [sp, #20]
 8001aba:	e7c4      	b.n	8001a46 <_vfiprintf_r+0x156>
 8001abc:	fb0c 2101 	mla	r1, ip, r1, r2
 8001ac0:	4604      	mov	r4, r0
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e7f0      	b.n	8001aa8 <_vfiprintf_r+0x1b8>
 8001ac6:	ab03      	add	r3, sp, #12
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	462a      	mov	r2, r5
 8001acc:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <_vfiprintf_r+0x228>)
 8001ace:	a904      	add	r1, sp, #16
 8001ad0:	4630      	mov	r0, r6
 8001ad2:	f3af 8000 	nop.w
 8001ad6:	4607      	mov	r7, r0
 8001ad8:	1c78      	adds	r0, r7, #1
 8001ada:	d1d6      	bne.n	8001a8a <_vfiprintf_r+0x19a>
 8001adc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001ade:	07d9      	lsls	r1, r3, #31
 8001ae0:	d405      	bmi.n	8001aee <_vfiprintf_r+0x1fe>
 8001ae2:	89ab      	ldrh	r3, [r5, #12]
 8001ae4:	059a      	lsls	r2, r3, #22
 8001ae6:	d402      	bmi.n	8001aee <_vfiprintf_r+0x1fe>
 8001ae8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001aea:	f7ff fcd5 	bl	8001498 <__retarget_lock_release_recursive>
 8001aee:	89ab      	ldrh	r3, [r5, #12]
 8001af0:	065b      	lsls	r3, r3, #25
 8001af2:	f53f af1f 	bmi.w	8001934 <_vfiprintf_r+0x44>
 8001af6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001af8:	e71e      	b.n	8001938 <_vfiprintf_r+0x48>
 8001afa:	ab03      	add	r3, sp, #12
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	462a      	mov	r2, r5
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <_vfiprintf_r+0x228>)
 8001b02:	a904      	add	r1, sp, #16
 8001b04:	4630      	mov	r0, r6
 8001b06:	f000 f879 	bl	8001bfc <_printf_i>
 8001b0a:	e7e4      	b.n	8001ad6 <_vfiprintf_r+0x1e6>
 8001b0c:	08002451 	.word	0x08002451
 8001b10:	0800245b 	.word	0x0800245b
 8001b14:	00000000 	.word	0x00000000
 8001b18:	080018cd 	.word	0x080018cd
 8001b1c:	08002457 	.word	0x08002457

08001b20 <_printf_common>:
 8001b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b24:	4616      	mov	r6, r2
 8001b26:	4698      	mov	r8, r3
 8001b28:	688a      	ldr	r2, [r1, #8]
 8001b2a:	690b      	ldr	r3, [r1, #16]
 8001b2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001b30:	4293      	cmp	r3, r2
 8001b32:	bfb8      	it	lt
 8001b34:	4613      	movlt	r3, r2
 8001b36:	6033      	str	r3, [r6, #0]
 8001b38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001b3c:	4607      	mov	r7, r0
 8001b3e:	460c      	mov	r4, r1
 8001b40:	b10a      	cbz	r2, 8001b46 <_printf_common+0x26>
 8001b42:	3301      	adds	r3, #1
 8001b44:	6033      	str	r3, [r6, #0]
 8001b46:	6823      	ldr	r3, [r4, #0]
 8001b48:	0699      	lsls	r1, r3, #26
 8001b4a:	bf42      	ittt	mi
 8001b4c:	6833      	ldrmi	r3, [r6, #0]
 8001b4e:	3302      	addmi	r3, #2
 8001b50:	6033      	strmi	r3, [r6, #0]
 8001b52:	6825      	ldr	r5, [r4, #0]
 8001b54:	f015 0506 	ands.w	r5, r5, #6
 8001b58:	d106      	bne.n	8001b68 <_printf_common+0x48>
 8001b5a:	f104 0a19 	add.w	sl, r4, #25
 8001b5e:	68e3      	ldr	r3, [r4, #12]
 8001b60:	6832      	ldr	r2, [r6, #0]
 8001b62:	1a9b      	subs	r3, r3, r2
 8001b64:	42ab      	cmp	r3, r5
 8001b66:	dc26      	bgt.n	8001bb6 <_printf_common+0x96>
 8001b68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001b6c:	6822      	ldr	r2, [r4, #0]
 8001b6e:	3b00      	subs	r3, #0
 8001b70:	bf18      	it	ne
 8001b72:	2301      	movne	r3, #1
 8001b74:	0692      	lsls	r2, r2, #26
 8001b76:	d42b      	bmi.n	8001bd0 <_printf_common+0xb0>
 8001b78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001b7c:	4641      	mov	r1, r8
 8001b7e:	4638      	mov	r0, r7
 8001b80:	47c8      	blx	r9
 8001b82:	3001      	adds	r0, #1
 8001b84:	d01e      	beq.n	8001bc4 <_printf_common+0xa4>
 8001b86:	6823      	ldr	r3, [r4, #0]
 8001b88:	6922      	ldr	r2, [r4, #16]
 8001b8a:	f003 0306 	and.w	r3, r3, #6
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	bf02      	ittt	eq
 8001b92:	68e5      	ldreq	r5, [r4, #12]
 8001b94:	6833      	ldreq	r3, [r6, #0]
 8001b96:	1aed      	subeq	r5, r5, r3
 8001b98:	68a3      	ldr	r3, [r4, #8]
 8001b9a:	bf0c      	ite	eq
 8001b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ba0:	2500      	movne	r5, #0
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	bfc4      	itt	gt
 8001ba6:	1a9b      	subgt	r3, r3, r2
 8001ba8:	18ed      	addgt	r5, r5, r3
 8001baa:	2600      	movs	r6, #0
 8001bac:	341a      	adds	r4, #26
 8001bae:	42b5      	cmp	r5, r6
 8001bb0:	d11a      	bne.n	8001be8 <_printf_common+0xc8>
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	e008      	b.n	8001bc8 <_printf_common+0xa8>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	4652      	mov	r2, sl
 8001bba:	4641      	mov	r1, r8
 8001bbc:	4638      	mov	r0, r7
 8001bbe:	47c8      	blx	r9
 8001bc0:	3001      	adds	r0, #1
 8001bc2:	d103      	bne.n	8001bcc <_printf_common+0xac>
 8001bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bcc:	3501      	adds	r5, #1
 8001bce:	e7c6      	b.n	8001b5e <_printf_common+0x3e>
 8001bd0:	18e1      	adds	r1, r4, r3
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	2030      	movs	r0, #48	@ 0x30
 8001bd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001bda:	4422      	add	r2, r4
 8001bdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001be0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001be4:	3302      	adds	r3, #2
 8001be6:	e7c7      	b.n	8001b78 <_printf_common+0x58>
 8001be8:	2301      	movs	r3, #1
 8001bea:	4622      	mov	r2, r4
 8001bec:	4641      	mov	r1, r8
 8001bee:	4638      	mov	r0, r7
 8001bf0:	47c8      	blx	r9
 8001bf2:	3001      	adds	r0, #1
 8001bf4:	d0e6      	beq.n	8001bc4 <_printf_common+0xa4>
 8001bf6:	3601      	adds	r6, #1
 8001bf8:	e7d9      	b.n	8001bae <_printf_common+0x8e>
	...

08001bfc <_printf_i>:
 8001bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c00:	7e0f      	ldrb	r7, [r1, #24]
 8001c02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001c04:	2f78      	cmp	r7, #120	@ 0x78
 8001c06:	4691      	mov	r9, r2
 8001c08:	4680      	mov	r8, r0
 8001c0a:	460c      	mov	r4, r1
 8001c0c:	469a      	mov	sl, r3
 8001c0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001c12:	d807      	bhi.n	8001c24 <_printf_i+0x28>
 8001c14:	2f62      	cmp	r7, #98	@ 0x62
 8001c16:	d80a      	bhi.n	8001c2e <_printf_i+0x32>
 8001c18:	2f00      	cmp	r7, #0
 8001c1a:	f000 80d1 	beq.w	8001dc0 <_printf_i+0x1c4>
 8001c1e:	2f58      	cmp	r7, #88	@ 0x58
 8001c20:	f000 80b8 	beq.w	8001d94 <_printf_i+0x198>
 8001c24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001c28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001c2c:	e03a      	b.n	8001ca4 <_printf_i+0xa8>
 8001c2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001c32:	2b15      	cmp	r3, #21
 8001c34:	d8f6      	bhi.n	8001c24 <_printf_i+0x28>
 8001c36:	a101      	add	r1, pc, #4	@ (adr r1, 8001c3c <_printf_i+0x40>)
 8001c38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001c3c:	08001c95 	.word	0x08001c95
 8001c40:	08001ca9 	.word	0x08001ca9
 8001c44:	08001c25 	.word	0x08001c25
 8001c48:	08001c25 	.word	0x08001c25
 8001c4c:	08001c25 	.word	0x08001c25
 8001c50:	08001c25 	.word	0x08001c25
 8001c54:	08001ca9 	.word	0x08001ca9
 8001c58:	08001c25 	.word	0x08001c25
 8001c5c:	08001c25 	.word	0x08001c25
 8001c60:	08001c25 	.word	0x08001c25
 8001c64:	08001c25 	.word	0x08001c25
 8001c68:	08001da7 	.word	0x08001da7
 8001c6c:	08001cd3 	.word	0x08001cd3
 8001c70:	08001d61 	.word	0x08001d61
 8001c74:	08001c25 	.word	0x08001c25
 8001c78:	08001c25 	.word	0x08001c25
 8001c7c:	08001dc9 	.word	0x08001dc9
 8001c80:	08001c25 	.word	0x08001c25
 8001c84:	08001cd3 	.word	0x08001cd3
 8001c88:	08001c25 	.word	0x08001c25
 8001c8c:	08001c25 	.word	0x08001c25
 8001c90:	08001d69 	.word	0x08001d69
 8001c94:	6833      	ldr	r3, [r6, #0]
 8001c96:	1d1a      	adds	r2, r3, #4
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6032      	str	r2, [r6, #0]
 8001c9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ca0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e09c      	b.n	8001de2 <_printf_i+0x1e6>
 8001ca8:	6833      	ldr	r3, [r6, #0]
 8001caa:	6820      	ldr	r0, [r4, #0]
 8001cac:	1d19      	adds	r1, r3, #4
 8001cae:	6031      	str	r1, [r6, #0]
 8001cb0:	0606      	lsls	r6, r0, #24
 8001cb2:	d501      	bpl.n	8001cb8 <_printf_i+0xbc>
 8001cb4:	681d      	ldr	r5, [r3, #0]
 8001cb6:	e003      	b.n	8001cc0 <_printf_i+0xc4>
 8001cb8:	0645      	lsls	r5, r0, #25
 8001cba:	d5fb      	bpl.n	8001cb4 <_printf_i+0xb8>
 8001cbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001cc0:	2d00      	cmp	r5, #0
 8001cc2:	da03      	bge.n	8001ccc <_printf_i+0xd0>
 8001cc4:	232d      	movs	r3, #45	@ 0x2d
 8001cc6:	426d      	negs	r5, r5
 8001cc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001ccc:	4858      	ldr	r0, [pc, #352]	@ (8001e30 <_printf_i+0x234>)
 8001cce:	230a      	movs	r3, #10
 8001cd0:	e011      	b.n	8001cf6 <_printf_i+0xfa>
 8001cd2:	6821      	ldr	r1, [r4, #0]
 8001cd4:	6833      	ldr	r3, [r6, #0]
 8001cd6:	0608      	lsls	r0, r1, #24
 8001cd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8001cdc:	d402      	bmi.n	8001ce4 <_printf_i+0xe8>
 8001cde:	0649      	lsls	r1, r1, #25
 8001ce0:	bf48      	it	mi
 8001ce2:	b2ad      	uxthmi	r5, r5
 8001ce4:	2f6f      	cmp	r7, #111	@ 0x6f
 8001ce6:	4852      	ldr	r0, [pc, #328]	@ (8001e30 <_printf_i+0x234>)
 8001ce8:	6033      	str	r3, [r6, #0]
 8001cea:	bf14      	ite	ne
 8001cec:	230a      	movne	r3, #10
 8001cee:	2308      	moveq	r3, #8
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001cf6:	6866      	ldr	r6, [r4, #4]
 8001cf8:	60a6      	str	r6, [r4, #8]
 8001cfa:	2e00      	cmp	r6, #0
 8001cfc:	db05      	blt.n	8001d0a <_printf_i+0x10e>
 8001cfe:	6821      	ldr	r1, [r4, #0]
 8001d00:	432e      	orrs	r6, r5
 8001d02:	f021 0104 	bic.w	r1, r1, #4
 8001d06:	6021      	str	r1, [r4, #0]
 8001d08:	d04b      	beq.n	8001da2 <_printf_i+0x1a6>
 8001d0a:	4616      	mov	r6, r2
 8001d0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001d10:	fb03 5711 	mls	r7, r3, r1, r5
 8001d14:	5dc7      	ldrb	r7, [r0, r7]
 8001d16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001d1a:	462f      	mov	r7, r5
 8001d1c:	42bb      	cmp	r3, r7
 8001d1e:	460d      	mov	r5, r1
 8001d20:	d9f4      	bls.n	8001d0c <_printf_i+0x110>
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d10b      	bne.n	8001d3e <_printf_i+0x142>
 8001d26:	6823      	ldr	r3, [r4, #0]
 8001d28:	07df      	lsls	r7, r3, #31
 8001d2a:	d508      	bpl.n	8001d3e <_printf_i+0x142>
 8001d2c:	6923      	ldr	r3, [r4, #16]
 8001d2e:	6861      	ldr	r1, [r4, #4]
 8001d30:	4299      	cmp	r1, r3
 8001d32:	bfde      	ittt	le
 8001d34:	2330      	movle	r3, #48	@ 0x30
 8001d36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001d3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001d3e:	1b92      	subs	r2, r2, r6
 8001d40:	6122      	str	r2, [r4, #16]
 8001d42:	f8cd a000 	str.w	sl, [sp]
 8001d46:	464b      	mov	r3, r9
 8001d48:	aa03      	add	r2, sp, #12
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	4640      	mov	r0, r8
 8001d4e:	f7ff fee7 	bl	8001b20 <_printf_common>
 8001d52:	3001      	adds	r0, #1
 8001d54:	d14a      	bne.n	8001dec <_printf_i+0x1f0>
 8001d56:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5a:	b004      	add	sp, #16
 8001d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d60:	6823      	ldr	r3, [r4, #0]
 8001d62:	f043 0320 	orr.w	r3, r3, #32
 8001d66:	6023      	str	r3, [r4, #0]
 8001d68:	4832      	ldr	r0, [pc, #200]	@ (8001e34 <_printf_i+0x238>)
 8001d6a:	2778      	movs	r7, #120	@ 0x78
 8001d6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001d70:	6823      	ldr	r3, [r4, #0]
 8001d72:	6831      	ldr	r1, [r6, #0]
 8001d74:	061f      	lsls	r7, r3, #24
 8001d76:	f851 5b04 	ldr.w	r5, [r1], #4
 8001d7a:	d402      	bmi.n	8001d82 <_printf_i+0x186>
 8001d7c:	065f      	lsls	r7, r3, #25
 8001d7e:	bf48      	it	mi
 8001d80:	b2ad      	uxthmi	r5, r5
 8001d82:	6031      	str	r1, [r6, #0]
 8001d84:	07d9      	lsls	r1, r3, #31
 8001d86:	bf44      	itt	mi
 8001d88:	f043 0320 	orrmi.w	r3, r3, #32
 8001d8c:	6023      	strmi	r3, [r4, #0]
 8001d8e:	b11d      	cbz	r5, 8001d98 <_printf_i+0x19c>
 8001d90:	2310      	movs	r3, #16
 8001d92:	e7ad      	b.n	8001cf0 <_printf_i+0xf4>
 8001d94:	4826      	ldr	r0, [pc, #152]	@ (8001e30 <_printf_i+0x234>)
 8001d96:	e7e9      	b.n	8001d6c <_printf_i+0x170>
 8001d98:	6823      	ldr	r3, [r4, #0]
 8001d9a:	f023 0320 	bic.w	r3, r3, #32
 8001d9e:	6023      	str	r3, [r4, #0]
 8001da0:	e7f6      	b.n	8001d90 <_printf_i+0x194>
 8001da2:	4616      	mov	r6, r2
 8001da4:	e7bd      	b.n	8001d22 <_printf_i+0x126>
 8001da6:	6833      	ldr	r3, [r6, #0]
 8001da8:	6825      	ldr	r5, [r4, #0]
 8001daa:	6961      	ldr	r1, [r4, #20]
 8001dac:	1d18      	adds	r0, r3, #4
 8001dae:	6030      	str	r0, [r6, #0]
 8001db0:	062e      	lsls	r6, r5, #24
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	d501      	bpl.n	8001dba <_printf_i+0x1be>
 8001db6:	6019      	str	r1, [r3, #0]
 8001db8:	e002      	b.n	8001dc0 <_printf_i+0x1c4>
 8001dba:	0668      	lsls	r0, r5, #25
 8001dbc:	d5fb      	bpl.n	8001db6 <_printf_i+0x1ba>
 8001dbe:	8019      	strh	r1, [r3, #0]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	6123      	str	r3, [r4, #16]
 8001dc4:	4616      	mov	r6, r2
 8001dc6:	e7bc      	b.n	8001d42 <_printf_i+0x146>
 8001dc8:	6833      	ldr	r3, [r6, #0]
 8001dca:	1d1a      	adds	r2, r3, #4
 8001dcc:	6032      	str	r2, [r6, #0]
 8001dce:	681e      	ldr	r6, [r3, #0]
 8001dd0:	6862      	ldr	r2, [r4, #4]
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4630      	mov	r0, r6
 8001dd6:	f7fe fa1b 	bl	8000210 <memchr>
 8001dda:	b108      	cbz	r0, 8001de0 <_printf_i+0x1e4>
 8001ddc:	1b80      	subs	r0, r0, r6
 8001dde:	6060      	str	r0, [r4, #4]
 8001de0:	6863      	ldr	r3, [r4, #4]
 8001de2:	6123      	str	r3, [r4, #16]
 8001de4:	2300      	movs	r3, #0
 8001de6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001dea:	e7aa      	b.n	8001d42 <_printf_i+0x146>
 8001dec:	6923      	ldr	r3, [r4, #16]
 8001dee:	4632      	mov	r2, r6
 8001df0:	4649      	mov	r1, r9
 8001df2:	4640      	mov	r0, r8
 8001df4:	47d0      	blx	sl
 8001df6:	3001      	adds	r0, #1
 8001df8:	d0ad      	beq.n	8001d56 <_printf_i+0x15a>
 8001dfa:	6823      	ldr	r3, [r4, #0]
 8001dfc:	079b      	lsls	r3, r3, #30
 8001dfe:	d413      	bmi.n	8001e28 <_printf_i+0x22c>
 8001e00:	68e0      	ldr	r0, [r4, #12]
 8001e02:	9b03      	ldr	r3, [sp, #12]
 8001e04:	4298      	cmp	r0, r3
 8001e06:	bfb8      	it	lt
 8001e08:	4618      	movlt	r0, r3
 8001e0a:	e7a6      	b.n	8001d5a <_printf_i+0x15e>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	4632      	mov	r2, r6
 8001e10:	4649      	mov	r1, r9
 8001e12:	4640      	mov	r0, r8
 8001e14:	47d0      	blx	sl
 8001e16:	3001      	adds	r0, #1
 8001e18:	d09d      	beq.n	8001d56 <_printf_i+0x15a>
 8001e1a:	3501      	adds	r5, #1
 8001e1c:	68e3      	ldr	r3, [r4, #12]
 8001e1e:	9903      	ldr	r1, [sp, #12]
 8001e20:	1a5b      	subs	r3, r3, r1
 8001e22:	42ab      	cmp	r3, r5
 8001e24:	dcf2      	bgt.n	8001e0c <_printf_i+0x210>
 8001e26:	e7eb      	b.n	8001e00 <_printf_i+0x204>
 8001e28:	2500      	movs	r5, #0
 8001e2a:	f104 0619 	add.w	r6, r4, #25
 8001e2e:	e7f5      	b.n	8001e1c <_printf_i+0x220>
 8001e30:	08002462 	.word	0x08002462
 8001e34:	08002473 	.word	0x08002473

08001e38 <__swbuf_r>:
 8001e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e3a:	460e      	mov	r6, r1
 8001e3c:	4614      	mov	r4, r2
 8001e3e:	4605      	mov	r5, r0
 8001e40:	b118      	cbz	r0, 8001e4a <__swbuf_r+0x12>
 8001e42:	6a03      	ldr	r3, [r0, #32]
 8001e44:	b90b      	cbnz	r3, 8001e4a <__swbuf_r+0x12>
 8001e46:	f7ff f9d7 	bl	80011f8 <__sinit>
 8001e4a:	69a3      	ldr	r3, [r4, #24]
 8001e4c:	60a3      	str	r3, [r4, #8]
 8001e4e:	89a3      	ldrh	r3, [r4, #12]
 8001e50:	071a      	lsls	r2, r3, #28
 8001e52:	d501      	bpl.n	8001e58 <__swbuf_r+0x20>
 8001e54:	6923      	ldr	r3, [r4, #16]
 8001e56:	b943      	cbnz	r3, 8001e6a <__swbuf_r+0x32>
 8001e58:	4621      	mov	r1, r4
 8001e5a:	4628      	mov	r0, r5
 8001e5c:	f000 f82a 	bl	8001eb4 <__swsetup_r>
 8001e60:	b118      	cbz	r0, 8001e6a <__swbuf_r+0x32>
 8001e62:	f04f 37ff 	mov.w	r7, #4294967295
 8001e66:	4638      	mov	r0, r7
 8001e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e6a:	6823      	ldr	r3, [r4, #0]
 8001e6c:	6922      	ldr	r2, [r4, #16]
 8001e6e:	1a98      	subs	r0, r3, r2
 8001e70:	6963      	ldr	r3, [r4, #20]
 8001e72:	b2f6      	uxtb	r6, r6
 8001e74:	4283      	cmp	r3, r0
 8001e76:	4637      	mov	r7, r6
 8001e78:	dc05      	bgt.n	8001e86 <__swbuf_r+0x4e>
 8001e7a:	4621      	mov	r1, r4
 8001e7c:	4628      	mov	r0, r5
 8001e7e:	f7ff fcbd 	bl	80017fc <_fflush_r>
 8001e82:	2800      	cmp	r0, #0
 8001e84:	d1ed      	bne.n	8001e62 <__swbuf_r+0x2a>
 8001e86:	68a3      	ldr	r3, [r4, #8]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	60a3      	str	r3, [r4, #8]
 8001e8c:	6823      	ldr	r3, [r4, #0]
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	6022      	str	r2, [r4, #0]
 8001e92:	701e      	strb	r6, [r3, #0]
 8001e94:	6962      	ldr	r2, [r4, #20]
 8001e96:	1c43      	adds	r3, r0, #1
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d004      	beq.n	8001ea6 <__swbuf_r+0x6e>
 8001e9c:	89a3      	ldrh	r3, [r4, #12]
 8001e9e:	07db      	lsls	r3, r3, #31
 8001ea0:	d5e1      	bpl.n	8001e66 <__swbuf_r+0x2e>
 8001ea2:	2e0a      	cmp	r6, #10
 8001ea4:	d1df      	bne.n	8001e66 <__swbuf_r+0x2e>
 8001ea6:	4621      	mov	r1, r4
 8001ea8:	4628      	mov	r0, r5
 8001eaa:	f7ff fca7 	bl	80017fc <_fflush_r>
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	d0d9      	beq.n	8001e66 <__swbuf_r+0x2e>
 8001eb2:	e7d6      	b.n	8001e62 <__swbuf_r+0x2a>

08001eb4 <__swsetup_r>:
 8001eb4:	b538      	push	{r3, r4, r5, lr}
 8001eb6:	4b29      	ldr	r3, [pc, #164]	@ (8001f5c <__swsetup_r+0xa8>)
 8001eb8:	4605      	mov	r5, r0
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	460c      	mov	r4, r1
 8001ebe:	b118      	cbz	r0, 8001ec8 <__swsetup_r+0x14>
 8001ec0:	6a03      	ldr	r3, [r0, #32]
 8001ec2:	b90b      	cbnz	r3, 8001ec8 <__swsetup_r+0x14>
 8001ec4:	f7ff f998 	bl	80011f8 <__sinit>
 8001ec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ecc:	0719      	lsls	r1, r3, #28
 8001ece:	d422      	bmi.n	8001f16 <__swsetup_r+0x62>
 8001ed0:	06da      	lsls	r2, r3, #27
 8001ed2:	d407      	bmi.n	8001ee4 <__swsetup_r+0x30>
 8001ed4:	2209      	movs	r2, #9
 8001ed6:	602a      	str	r2, [r5, #0]
 8001ed8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001edc:	81a3      	strh	r3, [r4, #12]
 8001ede:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee2:	e033      	b.n	8001f4c <__swsetup_r+0x98>
 8001ee4:	0758      	lsls	r0, r3, #29
 8001ee6:	d512      	bpl.n	8001f0e <__swsetup_r+0x5a>
 8001ee8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001eea:	b141      	cbz	r1, 8001efe <__swsetup_r+0x4a>
 8001eec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001ef0:	4299      	cmp	r1, r3
 8001ef2:	d002      	beq.n	8001efa <__swsetup_r+0x46>
 8001ef4:	4628      	mov	r0, r5
 8001ef6:	f7ff fafd 	bl	80014f4 <_free_r>
 8001efa:	2300      	movs	r3, #0
 8001efc:	6363      	str	r3, [r4, #52]	@ 0x34
 8001efe:	89a3      	ldrh	r3, [r4, #12]
 8001f00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001f04:	81a3      	strh	r3, [r4, #12]
 8001f06:	2300      	movs	r3, #0
 8001f08:	6063      	str	r3, [r4, #4]
 8001f0a:	6923      	ldr	r3, [r4, #16]
 8001f0c:	6023      	str	r3, [r4, #0]
 8001f0e:	89a3      	ldrh	r3, [r4, #12]
 8001f10:	f043 0308 	orr.w	r3, r3, #8
 8001f14:	81a3      	strh	r3, [r4, #12]
 8001f16:	6923      	ldr	r3, [r4, #16]
 8001f18:	b94b      	cbnz	r3, 8001f2e <__swsetup_r+0x7a>
 8001f1a:	89a3      	ldrh	r3, [r4, #12]
 8001f1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001f20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f24:	d003      	beq.n	8001f2e <__swsetup_r+0x7a>
 8001f26:	4621      	mov	r1, r4
 8001f28:	4628      	mov	r0, r5
 8001f2a:	f000 f883 	bl	8002034 <__smakebuf_r>
 8001f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f32:	f013 0201 	ands.w	r2, r3, #1
 8001f36:	d00a      	beq.n	8001f4e <__swsetup_r+0x9a>
 8001f38:	2200      	movs	r2, #0
 8001f3a:	60a2      	str	r2, [r4, #8]
 8001f3c:	6962      	ldr	r2, [r4, #20]
 8001f3e:	4252      	negs	r2, r2
 8001f40:	61a2      	str	r2, [r4, #24]
 8001f42:	6922      	ldr	r2, [r4, #16]
 8001f44:	b942      	cbnz	r2, 8001f58 <__swsetup_r+0xa4>
 8001f46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001f4a:	d1c5      	bne.n	8001ed8 <__swsetup_r+0x24>
 8001f4c:	bd38      	pop	{r3, r4, r5, pc}
 8001f4e:	0799      	lsls	r1, r3, #30
 8001f50:	bf58      	it	pl
 8001f52:	6962      	ldrpl	r2, [r4, #20]
 8001f54:	60a2      	str	r2, [r4, #8]
 8001f56:	e7f4      	b.n	8001f42 <__swsetup_r+0x8e>
 8001f58:	2000      	movs	r0, #0
 8001f5a:	e7f7      	b.n	8001f4c <__swsetup_r+0x98>
 8001f5c:	20000038 	.word	0x20000038

08001f60 <_raise_r>:
 8001f60:	291f      	cmp	r1, #31
 8001f62:	b538      	push	{r3, r4, r5, lr}
 8001f64:	4605      	mov	r5, r0
 8001f66:	460c      	mov	r4, r1
 8001f68:	d904      	bls.n	8001f74 <_raise_r+0x14>
 8001f6a:	2316      	movs	r3, #22
 8001f6c:	6003      	str	r3, [r0, #0]
 8001f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f72:	bd38      	pop	{r3, r4, r5, pc}
 8001f74:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8001f76:	b112      	cbz	r2, 8001f7e <_raise_r+0x1e>
 8001f78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001f7c:	b94b      	cbnz	r3, 8001f92 <_raise_r+0x32>
 8001f7e:	4628      	mov	r0, r5
 8001f80:	f000 f830 	bl	8001fe4 <_getpid_r>
 8001f84:	4622      	mov	r2, r4
 8001f86:	4601      	mov	r1, r0
 8001f88:	4628      	mov	r0, r5
 8001f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f8e:	f000 b817 	b.w	8001fc0 <_kill_r>
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d00a      	beq.n	8001fac <_raise_r+0x4c>
 8001f96:	1c59      	adds	r1, r3, #1
 8001f98:	d103      	bne.n	8001fa2 <_raise_r+0x42>
 8001f9a:	2316      	movs	r3, #22
 8001f9c:	6003      	str	r3, [r0, #0]
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	e7e7      	b.n	8001f72 <_raise_r+0x12>
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8001fa8:	4620      	mov	r0, r4
 8001faa:	4798      	blx	r3
 8001fac:	2000      	movs	r0, #0
 8001fae:	e7e0      	b.n	8001f72 <_raise_r+0x12>

08001fb0 <raise>:
 8001fb0:	4b02      	ldr	r3, [pc, #8]	@ (8001fbc <raise+0xc>)
 8001fb2:	4601      	mov	r1, r0
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	f7ff bfd3 	b.w	8001f60 <_raise_r>
 8001fba:	bf00      	nop
 8001fbc:	20000038 	.word	0x20000038

08001fc0 <_kill_r>:
 8001fc0:	b538      	push	{r3, r4, r5, lr}
 8001fc2:	4d07      	ldr	r5, [pc, #28]	@ (8001fe0 <_kill_r+0x20>)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	4604      	mov	r4, r0
 8001fc8:	4608      	mov	r0, r1
 8001fca:	4611      	mov	r1, r2
 8001fcc:	602b      	str	r3, [r5, #0]
 8001fce:	f7fe fe0b 	bl	8000be8 <_kill>
 8001fd2:	1c43      	adds	r3, r0, #1
 8001fd4:	d102      	bne.n	8001fdc <_kill_r+0x1c>
 8001fd6:	682b      	ldr	r3, [r5, #0]
 8001fd8:	b103      	cbz	r3, 8001fdc <_kill_r+0x1c>
 8001fda:	6023      	str	r3, [r4, #0]
 8001fdc:	bd38      	pop	{r3, r4, r5, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000db8 	.word	0x20000db8

08001fe4 <_getpid_r>:
 8001fe4:	f7fe bdf8 	b.w	8000bd8 <_getpid>

08001fe8 <__swhatbuf_r>:
 8001fe8:	b570      	push	{r4, r5, r6, lr}
 8001fea:	460c      	mov	r4, r1
 8001fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ff0:	2900      	cmp	r1, #0
 8001ff2:	b096      	sub	sp, #88	@ 0x58
 8001ff4:	4615      	mov	r5, r2
 8001ff6:	461e      	mov	r6, r3
 8001ff8:	da0d      	bge.n	8002016 <__swhatbuf_r+0x2e>
 8001ffa:	89a3      	ldrh	r3, [r4, #12]
 8001ffc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002000:	f04f 0100 	mov.w	r1, #0
 8002004:	bf14      	ite	ne
 8002006:	2340      	movne	r3, #64	@ 0x40
 8002008:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800200c:	2000      	movs	r0, #0
 800200e:	6031      	str	r1, [r6, #0]
 8002010:	602b      	str	r3, [r5, #0]
 8002012:	b016      	add	sp, #88	@ 0x58
 8002014:	bd70      	pop	{r4, r5, r6, pc}
 8002016:	466a      	mov	r2, sp
 8002018:	f000 f848 	bl	80020ac <_fstat_r>
 800201c:	2800      	cmp	r0, #0
 800201e:	dbec      	blt.n	8001ffa <__swhatbuf_r+0x12>
 8002020:	9901      	ldr	r1, [sp, #4]
 8002022:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002026:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800202a:	4259      	negs	r1, r3
 800202c:	4159      	adcs	r1, r3
 800202e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002032:	e7eb      	b.n	800200c <__swhatbuf_r+0x24>

08002034 <__smakebuf_r>:
 8002034:	898b      	ldrh	r3, [r1, #12]
 8002036:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002038:	079d      	lsls	r5, r3, #30
 800203a:	4606      	mov	r6, r0
 800203c:	460c      	mov	r4, r1
 800203e:	d507      	bpl.n	8002050 <__smakebuf_r+0x1c>
 8002040:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002044:	6023      	str	r3, [r4, #0]
 8002046:	6123      	str	r3, [r4, #16]
 8002048:	2301      	movs	r3, #1
 800204a:	6163      	str	r3, [r4, #20]
 800204c:	b003      	add	sp, #12
 800204e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002050:	ab01      	add	r3, sp, #4
 8002052:	466a      	mov	r2, sp
 8002054:	f7ff ffc8 	bl	8001fe8 <__swhatbuf_r>
 8002058:	9f00      	ldr	r7, [sp, #0]
 800205a:	4605      	mov	r5, r0
 800205c:	4639      	mov	r1, r7
 800205e:	4630      	mov	r0, r6
 8002060:	f7ff fabc 	bl	80015dc <_malloc_r>
 8002064:	b948      	cbnz	r0, 800207a <__smakebuf_r+0x46>
 8002066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800206a:	059a      	lsls	r2, r3, #22
 800206c:	d4ee      	bmi.n	800204c <__smakebuf_r+0x18>
 800206e:	f023 0303 	bic.w	r3, r3, #3
 8002072:	f043 0302 	orr.w	r3, r3, #2
 8002076:	81a3      	strh	r3, [r4, #12]
 8002078:	e7e2      	b.n	8002040 <__smakebuf_r+0xc>
 800207a:	89a3      	ldrh	r3, [r4, #12]
 800207c:	6020      	str	r0, [r4, #0]
 800207e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002082:	81a3      	strh	r3, [r4, #12]
 8002084:	9b01      	ldr	r3, [sp, #4]
 8002086:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800208a:	b15b      	cbz	r3, 80020a4 <__smakebuf_r+0x70>
 800208c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002090:	4630      	mov	r0, r6
 8002092:	f000 f81d 	bl	80020d0 <_isatty_r>
 8002096:	b128      	cbz	r0, 80020a4 <__smakebuf_r+0x70>
 8002098:	89a3      	ldrh	r3, [r4, #12]
 800209a:	f023 0303 	bic.w	r3, r3, #3
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	81a3      	strh	r3, [r4, #12]
 80020a4:	89a3      	ldrh	r3, [r4, #12]
 80020a6:	431d      	orrs	r5, r3
 80020a8:	81a5      	strh	r5, [r4, #12]
 80020aa:	e7cf      	b.n	800204c <__smakebuf_r+0x18>

080020ac <_fstat_r>:
 80020ac:	b538      	push	{r3, r4, r5, lr}
 80020ae:	4d07      	ldr	r5, [pc, #28]	@ (80020cc <_fstat_r+0x20>)
 80020b0:	2300      	movs	r3, #0
 80020b2:	4604      	mov	r4, r0
 80020b4:	4608      	mov	r0, r1
 80020b6:	4611      	mov	r1, r2
 80020b8:	602b      	str	r3, [r5, #0]
 80020ba:	f7fe fdf5 	bl	8000ca8 <_fstat>
 80020be:	1c43      	adds	r3, r0, #1
 80020c0:	d102      	bne.n	80020c8 <_fstat_r+0x1c>
 80020c2:	682b      	ldr	r3, [r5, #0]
 80020c4:	b103      	cbz	r3, 80020c8 <_fstat_r+0x1c>
 80020c6:	6023      	str	r3, [r4, #0]
 80020c8:	bd38      	pop	{r3, r4, r5, pc}
 80020ca:	bf00      	nop
 80020cc:	20000db8 	.word	0x20000db8

080020d0 <_isatty_r>:
 80020d0:	b538      	push	{r3, r4, r5, lr}
 80020d2:	4d06      	ldr	r5, [pc, #24]	@ (80020ec <_isatty_r+0x1c>)
 80020d4:	2300      	movs	r3, #0
 80020d6:	4604      	mov	r4, r0
 80020d8:	4608      	mov	r0, r1
 80020da:	602b      	str	r3, [r5, #0]
 80020dc:	f7fe fdf4 	bl	8000cc8 <_isatty>
 80020e0:	1c43      	adds	r3, r0, #1
 80020e2:	d102      	bne.n	80020ea <_isatty_r+0x1a>
 80020e4:	682b      	ldr	r3, [r5, #0]
 80020e6:	b103      	cbz	r3, 80020ea <_isatty_r+0x1a>
 80020e8:	6023      	str	r3, [r4, #0]
 80020ea:	bd38      	pop	{r3, r4, r5, pc}
 80020ec:	20000db8 	.word	0x20000db8

080020f0 <_init>:
 80020f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f2:	bf00      	nop
 80020f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020f6:	bc08      	pop	{r3}
 80020f8:	469e      	mov	lr, r3
 80020fa:	4770      	bx	lr

080020fc <_fini>:
 80020fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fe:	bf00      	nop
 8002100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002102:	bc08      	pop	{r3}
 8002104:	469e      	mov	lr, r3
 8002106:	4770      	bx	lr


2700EX3A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002b0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000444  0800044c  0000144c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000444  08000444  0000144c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000444  08000444  0000144c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000444  0800044c  0000144c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000444  08000444  00001444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000448  08000448  00001448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000144c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000144c  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ae6  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002d3  00000000  00000000  00001f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00002238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000058  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014d88  00000000  00000000  00002318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000a4a  00000000  00000000  000170a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000726cd  00000000  00000000  00017aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008a1b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000118  00000000  00000000  0008a1fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  0008a314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800042c 	.word	0x0800042c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800042c 	.word	0x0800042c

080001d4 <toggle_led>:
#include "stm32f303xc.h"
#include "timer.h"

void toggle_led() {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
    GPIOE->ODR ^= (1 << 8);  // Toggle PE8
 80001d8:	4b05      	ldr	r3, [pc, #20]	@ (80001f0 <toggle_led+0x1c>)
 80001da:	695b      	ldr	r3, [r3, #20]
 80001dc:	4a04      	ldr	r2, [pc, #16]	@ (80001f0 <toggle_led+0x1c>)
 80001de:	f483 7380 	eor.w	r3, r3, #256	@ 0x100
 80001e2:	6153      	str	r3, [r2, #20]
}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	48001000 	.word	0x48001000

080001f4 <main>:

int main(void) {
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
    // Enable GPIOE and set PE8 as output
    RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 80001f8:	4b0c      	ldr	r3, [pc, #48]	@ (800022c <main+0x38>)
 80001fa:	695b      	ldr	r3, [r3, #20]
 80001fc:	4a0b      	ldr	r2, [pc, #44]	@ (800022c <main+0x38>)
 80001fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000202:	6153      	str	r3, [r2, #20]
    GPIOE->MODER &= ~(3 << (2 * 8));
 8000204:	4b0a      	ldr	r3, [pc, #40]	@ (8000230 <main+0x3c>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a09      	ldr	r2, [pc, #36]	@ (8000230 <main+0x3c>)
 800020a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800020e:	6013      	str	r3, [r2, #0]
    GPIOE->MODER |=  (1 << (2 * 8));
 8000210:	4b07      	ldr	r3, [pc, #28]	@ (8000230 <main+0x3c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a06      	ldr	r2, [pc, #24]	@ (8000230 <main+0x3c>)
 8000216:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800021a:	6013      	str	r3, [r2, #0]

    // Initialise timer to call `toggle_led` every 1000 ms
    timer_init(1000, toggle_led);
 800021c:	4905      	ldr	r1, [pc, #20]	@ (8000234 <main+0x40>)
 800021e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000222:	f000 f851 	bl	80002c8 <timer_init>

    while (1) {
 8000226:	bf00      	nop
 8000228:	e7fd      	b.n	8000226 <main+0x32>
 800022a:	bf00      	nop
 800022c:	40021000 	.word	0x40021000
 8000230:	48001000 	.word	0x48001000
 8000234:	080001d5 	.word	0x080001d5

08000238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000246:	2b00      	cmp	r3, #0
 8000248:	db0b      	blt.n	8000262 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	f003 021f 	and.w	r2, r3, #31
 8000250:	4907      	ldr	r1, [pc, #28]	@ (8000270 <__NVIC_EnableIRQ+0x38>)
 8000252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000256:	095b      	lsrs	r3, r3, #5
 8000258:	2001      	movs	r0, #1
 800025a:	fa00 f202 	lsl.w	r2, r0, r2
 800025e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000262:	bf00      	nop
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000e100 	.word	0xe000e100

08000274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	6039      	str	r1, [r7, #0]
 800027e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000284:	2b00      	cmp	r3, #0
 8000286:	db0a      	blt.n	800029e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	b2da      	uxtb	r2, r3
 800028c:	490c      	ldr	r1, [pc, #48]	@ (80002c0 <__NVIC_SetPriority+0x4c>)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	0112      	lsls	r2, r2, #4
 8000294:	b2d2      	uxtb	r2, r2
 8000296:	440b      	add	r3, r1
 8000298:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800029c:	e00a      	b.n	80002b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	4908      	ldr	r1, [pc, #32]	@ (80002c4 <__NVIC_SetPriority+0x50>)
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	f003 030f 	and.w	r3, r3, #15
 80002aa:	3b04      	subs	r3, #4
 80002ac:	0112      	lsls	r2, r2, #4
 80002ae:	b2d2      	uxtb	r2, r2
 80002b0:	440b      	add	r3, r1
 80002b2:	761a      	strb	r2, [r3, #24]
}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr
 80002c0:	e000e100 	.word	0xe000e100
 80002c4:	e000ed00 	.word	0xe000ed00

080002c8 <timer_init>:
#include "stm32f303xc.h"
#include "timer.h"

static void (*timer_callback)(void) = 0;

void timer_init(uint16_t ms, void (*callback)(void)) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	6039      	str	r1, [r7, #0]
 80002d2:	80fb      	strh	r3, [r7, #6]
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80002d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000350 <timer_init+0x88>)
 80002d6:	69db      	ldr	r3, [r3, #28]
 80002d8:	4a1d      	ldr	r2, [pc, #116]	@ (8000350 <timer_init+0x88>)
 80002da:	f043 0301 	orr.w	r3, r3, #1
 80002de:	61d3      	str	r3, [r2, #28]

    TIM2->CR1 = 0;
 80002e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
    TIM2->CNT = 0;
 80002e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ec:	2200      	movs	r2, #0
 80002ee:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->PSC = 8000 - 1;  // 8 MHz / 8000 = 1 kHz (1 tick = 1 ms)
 80002f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002f4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80002f8:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = ms;
 80002fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002fe:	88fb      	ldrh	r3, [r7, #6]
 8000300:	62d3      	str	r3, [r2, #44]	@ 0x2c

    TIM2->DIER |= TIM_DIER_UIE;
 8000302:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800030c:	f043 0301 	orr.w	r3, r3, #1
 8000310:	60d3      	str	r3, [r2, #12]
    TIM2->SR &= ~TIM_SR_UIF;
 8000312:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000316:	691b      	ldr	r3, [r3, #16]
 8000318:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800031c:	f023 0301 	bic.w	r3, r3, #1
 8000320:	6113      	str	r3, [r2, #16]
    TIM2->CR1 |= TIM_CR1_CEN;
 8000322:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6013      	str	r3, [r2, #0]

    timer_callback = callback;
 8000332:	4a08      	ldr	r2, [pc, #32]	@ (8000354 <timer_init+0x8c>)
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	6013      	str	r3, [r2, #0]

    NVIC_SetPriority(TIM2_IRQn, 1);
 8000338:	2101      	movs	r1, #1
 800033a:	201c      	movs	r0, #28
 800033c:	f7ff ff9a 	bl	8000274 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 8000340:	201c      	movs	r0, #28
 8000342:	f7ff ff79 	bl	8000238 <__NVIC_EnableIRQ>
}
 8000346:	bf00      	nop
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40021000 	.word	0x40021000
 8000354:	2000001c 	.word	0x2000001c

08000358 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 800035c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000360:	691b      	ldr	r3, [r3, #16]
 8000362:	f003 0301 	and.w	r3, r3, #1
 8000366:	2b00      	cmp	r3, #0
 8000368:	d00e      	beq.n	8000388 <TIM2_IRQHandler+0x30>
        TIM2->SR &= ~TIM_SR_UIF;
 800036a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800036e:	691b      	ldr	r3, [r3, #16]
 8000370:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000374:	f023 0301 	bic.w	r3, r3, #1
 8000378:	6113      	str	r3, [r2, #16]

        if (timer_callback) {
 800037a:	4b04      	ldr	r3, [pc, #16]	@ (800038c <TIM2_IRQHandler+0x34>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d002      	beq.n	8000388 <TIM2_IRQHandler+0x30>
            timer_callback();
 8000382:	4b02      	ldr	r3, [pc, #8]	@ (800038c <TIM2_IRQHandler+0x34>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4798      	blx	r3
        }
    }
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	2000001c 	.word	0x2000001c

08000390 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000390:	480d      	ldr	r0, [pc, #52]	@ (80003c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000392:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000394:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000398:	480c      	ldr	r0, [pc, #48]	@ (80003cc <LoopForever+0x6>)
  ldr r1, =_edata
 800039a:	490d      	ldr	r1, [pc, #52]	@ (80003d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800039c:	4a0d      	ldr	r2, [pc, #52]	@ (80003d4 <LoopForever+0xe>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a0:	e002      	b.n	80003a8 <LoopCopyDataInit>

080003a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a6:	3304      	adds	r3, #4

080003a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ac:	d3f9      	bcc.n	80003a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ae:	4a0a      	ldr	r2, [pc, #40]	@ (80003d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b0:	4c0a      	ldr	r4, [pc, #40]	@ (80003dc <LoopForever+0x16>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b4:	e001      	b.n	80003ba <LoopFillZerobss>

080003b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b8:	3204      	adds	r2, #4

080003ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003bc:	d3fb      	bcc.n	80003b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003be:	f000 f811 	bl	80003e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003c2:	f7ff ff17 	bl	80001f4 <main>

080003c6 <LoopForever>:

LoopForever:
  b LoopForever
 80003c6:	e7fe      	b.n	80003c6 <LoopForever>
  ldr   r0, =_estack
 80003c8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80003cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003d4:	0800044c 	.word	0x0800044c
  ldr r2, =_sbss
 80003d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003dc:	20000020 	.word	0x20000020

080003e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC1_2_IRQHandler>
	...

080003e4 <__libc_init_array>:
 80003e4:	b570      	push	{r4, r5, r6, lr}
 80003e6:	4d0d      	ldr	r5, [pc, #52]	@ (800041c <__libc_init_array+0x38>)
 80003e8:	4c0d      	ldr	r4, [pc, #52]	@ (8000420 <__libc_init_array+0x3c>)
 80003ea:	1b64      	subs	r4, r4, r5
 80003ec:	10a4      	asrs	r4, r4, #2
 80003ee:	2600      	movs	r6, #0
 80003f0:	42a6      	cmp	r6, r4
 80003f2:	d109      	bne.n	8000408 <__libc_init_array+0x24>
 80003f4:	4d0b      	ldr	r5, [pc, #44]	@ (8000424 <__libc_init_array+0x40>)
 80003f6:	4c0c      	ldr	r4, [pc, #48]	@ (8000428 <__libc_init_array+0x44>)
 80003f8:	f000 f818 	bl	800042c <_init>
 80003fc:	1b64      	subs	r4, r4, r5
 80003fe:	10a4      	asrs	r4, r4, #2
 8000400:	2600      	movs	r6, #0
 8000402:	42a6      	cmp	r6, r4
 8000404:	d105      	bne.n	8000412 <__libc_init_array+0x2e>
 8000406:	bd70      	pop	{r4, r5, r6, pc}
 8000408:	f855 3b04 	ldr.w	r3, [r5], #4
 800040c:	4798      	blx	r3
 800040e:	3601      	adds	r6, #1
 8000410:	e7ee      	b.n	80003f0 <__libc_init_array+0xc>
 8000412:	f855 3b04 	ldr.w	r3, [r5], #4
 8000416:	4798      	blx	r3
 8000418:	3601      	adds	r6, #1
 800041a:	e7f2      	b.n	8000402 <__libc_init_array+0x1e>
 800041c:	08000444 	.word	0x08000444
 8000420:	08000444 	.word	0x08000444
 8000424:	08000444 	.word	0x08000444
 8000428:	08000448 	.word	0x08000448

0800042c <_init>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	bf00      	nop
 8000430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000432:	bc08      	pop	{r3}
 8000434:	469e      	mov	lr, r3
 8000436:	4770      	bx	lr

08000438 <_fini>:
 8000438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043a:	bf00      	nop
 800043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043e:	bc08      	pop	{r3}
 8000440:	469e      	mov	lr, r3
 8000442:	4770      	bx	lr


2700Cproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000038c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000520  08000528  00001528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000520  08000520  00001528  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000520  08000520  00001528  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000520  08000528  00001528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000520  08000520  00001520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000524  08000524  00001524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001528  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000af1  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002fa  00000000  00000000  00002049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a0  00000000  00000000  00002348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000006b  00000000  00000000  000023e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014d60  00000000  00000000  00002453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000a8f  00000000  00000000  000171b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00072757  00000000  00000000  00017c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008a399  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000018c  00000000  00000000  0008a3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0008a568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000508 	.word	0x08000508

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000508 	.word	0x08000508

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	@ (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	@ (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <dio_init>:
#include "dio.h"

static void (*button_callback)(void) = 0;
static uint8_t led_state = 0;

void dio_init(void (*callback)(void)) {
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
    // Save the button callback
    button_callback = callback;
 800026c:	4a25      	ldr	r2, [pc, #148]	@ (8000304 <dio_init+0xa0>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	6013      	str	r3, [r2, #0]

    // Enable clocks for GPIOA (button) and GPIOE (LEDs)
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOEEN;
 8000272:	4b25      	ldr	r3, [pc, #148]	@ (8000308 <dio_init+0xa4>)
 8000274:	695b      	ldr	r3, [r3, #20]
 8000276:	4a24      	ldr	r2, [pc, #144]	@ (8000308 <dio_init+0xa4>)
 8000278:	f443 1308 	orr.w	r3, r3, #2228224	@ 0x220000
 800027c:	6153      	str	r3, [r2, #20]

    // Set PE8â€“PE15 as outputs
    for (int i = 8; i <= 15; i++) {
 800027e:	2308      	movs	r3, #8
 8000280:	60fb      	str	r3, [r7, #12]
 8000282:	e019      	b.n	80002b8 <dio_init+0x54>
        GPIOE->MODER &= ~(3 << (2 * i));  // Clear
 8000284:	4b21      	ldr	r3, [pc, #132]	@ (800030c <dio_init+0xa8>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	68fa      	ldr	r2, [r7, #12]
 800028a:	0052      	lsls	r2, r2, #1
 800028c:	2103      	movs	r1, #3
 800028e:	fa01 f202 	lsl.w	r2, r1, r2
 8000292:	43d2      	mvns	r2, r2
 8000294:	4611      	mov	r1, r2
 8000296:	4a1d      	ldr	r2, [pc, #116]	@ (800030c <dio_init+0xa8>)
 8000298:	400b      	ands	r3, r1
 800029a:	6013      	str	r3, [r2, #0]
        GPIOE->MODER |=  (1 << (2 * i));  // Output
 800029c:	4b1b      	ldr	r3, [pc, #108]	@ (800030c <dio_init+0xa8>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	0052      	lsls	r2, r2, #1
 80002a4:	2101      	movs	r1, #1
 80002a6:	fa01 f202 	lsl.w	r2, r1, r2
 80002aa:	4611      	mov	r1, r2
 80002ac:	4a17      	ldr	r2, [pc, #92]	@ (800030c <dio_init+0xa8>)
 80002ae:	430b      	orrs	r3, r1
 80002b0:	6013      	str	r3, [r2, #0]
    for (int i = 8; i <= 15; i++) {
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	3301      	adds	r3, #1
 80002b6:	60fb      	str	r3, [r7, #12]
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	2b0f      	cmp	r3, #15
 80002bc:	dde2      	ble.n	8000284 <dio_init+0x20>
    }

    // Enable SYSCFG for EXTI
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002be:	4b12      	ldr	r3, [pc, #72]	@ (8000308 <dio_init+0xa4>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	4a11      	ldr	r2, [pc, #68]	@ (8000308 <dio_init+0xa4>)
 80002c4:	f043 0301 	orr.w	r3, r3, #1
 80002c8:	6193      	str	r3, [r2, #24]

    // Configure PA0 as EXTI0
    SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0;  // 0 = PA0
 80002ca:	4b11      	ldr	r3, [pc, #68]	@ (8000310 <dio_init+0xac>)
 80002cc:	689b      	ldr	r3, [r3, #8]
 80002ce:	4a10      	ldr	r2, [pc, #64]	@ (8000310 <dio_init+0xac>)
 80002d0:	f023 030f 	bic.w	r3, r3, #15
 80002d4:	6093      	str	r3, [r2, #8]

    EXTI->RTSR |= EXTI_RTSR_TR0;
 80002d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000314 <dio_init+0xb0>)
 80002d8:	689b      	ldr	r3, [r3, #8]
 80002da:	4a0e      	ldr	r2, [pc, #56]	@ (8000314 <dio_init+0xb0>)
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	6093      	str	r3, [r2, #8]
    EXTI->IMR  |= EXTI_IMR_MR0;
 80002e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000314 <dio_init+0xb0>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000314 <dio_init+0xb0>)
 80002e8:	f043 0301 	orr.w	r3, r3, #1
 80002ec:	6013      	str	r3, [r2, #0]

    NVIC_SetPriority(EXTI0_IRQn, 1);
 80002ee:	2101      	movs	r1, #1
 80002f0:	2006      	movs	r0, #6
 80002f2:	f7ff ff8d 	bl	8000210 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);
 80002f6:	2006      	movs	r0, #6
 80002f8:	f7ff ff6c 	bl	80001d4 <__NVIC_EnableIRQ>
}
 80002fc:	bf00      	nop
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	2000001c 	.word	0x2000001c
 8000308:	40021000 	.word	0x40021000
 800030c:	48001000 	.word	0x48001000
 8000310:	40010000 	.word	0x40010000
 8000314:	40010400 	.word	0x40010400

08000318 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
    if (button_callback) {
 800031c:	4b07      	ldr	r3, [pc, #28]	@ (800033c <EXTI0_IRQHandler+0x24>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d002      	beq.n	800032a <EXTI0_IRQHandler+0x12>
        button_callback();
 8000324:	4b05      	ldr	r3, [pc, #20]	@ (800033c <EXTI0_IRQHandler+0x24>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4798      	blx	r3
    }
    EXTI->PR |= EXTI_PR_PR0;
 800032a:	4b05      	ldr	r3, [pc, #20]	@ (8000340 <EXTI0_IRQHandler+0x28>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	4a04      	ldr	r2, [pc, #16]	@ (8000340 <EXTI0_IRQHandler+0x28>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6153      	str	r3, [r2, #20]
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	2000001c 	.word	0x2000001c
 8000340:	40010400 	.word	0x40010400

08000344 <dio_setLED>:

void dio_setLED(int index, bool state) {
 8000344:	b480      	push	{r7}
 8000346:	b085      	sub	sp, #20
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	460b      	mov	r3, r1
 800034e:	70fb      	strb	r3, [r7, #3]
    if (index < 0 || index > 7) return;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2b00      	cmp	r3, #0
 8000354:	db37      	blt.n	80003c6 <dio_setLED+0x82>
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	2b07      	cmp	r3, #7
 800035a:	dc34      	bgt.n	80003c6 <dio_setLED+0x82>

    uint16_t bit = 1 << (8 + index);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	3308      	adds	r3, #8
 8000360:	2201      	movs	r2, #1
 8000362:	fa02 f303 	lsl.w	r3, r2, r3
 8000366:	81fb      	strh	r3, [r7, #14]

    if (state) {
 8000368:	78fb      	ldrb	r3, [r7, #3]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d013      	beq.n	8000396 <dio_setLED+0x52>
        GPIOE->ODR |= bit;
 800036e:	4b19      	ldr	r3, [pc, #100]	@ (80003d4 <dio_setLED+0x90>)
 8000370:	695a      	ldr	r2, [r3, #20]
 8000372:	89fb      	ldrh	r3, [r7, #14]
 8000374:	4917      	ldr	r1, [pc, #92]	@ (80003d4 <dio_setLED+0x90>)
 8000376:	4313      	orrs	r3, r2
 8000378:	614b      	str	r3, [r1, #20]
        led_state |= (1 << index);
 800037a:	2201      	movs	r2, #1
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	fa02 f303 	lsl.w	r3, r2, r3
 8000382:	b25a      	sxtb	r2, r3
 8000384:	4b14      	ldr	r3, [pc, #80]	@ (80003d8 <dio_setLED+0x94>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	b25b      	sxtb	r3, r3
 800038a:	4313      	orrs	r3, r2
 800038c:	b25b      	sxtb	r3, r3
 800038e:	b2da      	uxtb	r2, r3
 8000390:	4b11      	ldr	r3, [pc, #68]	@ (80003d8 <dio_setLED+0x94>)
 8000392:	701a      	strb	r2, [r3, #0]
 8000394:	e018      	b.n	80003c8 <dio_setLED+0x84>
    } else {
        GPIOE->ODR &= ~bit;
 8000396:	4b0f      	ldr	r3, [pc, #60]	@ (80003d4 <dio_setLED+0x90>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	89fa      	ldrh	r2, [r7, #14]
 800039c:	43d2      	mvns	r2, r2
 800039e:	4611      	mov	r1, r2
 80003a0:	4a0c      	ldr	r2, [pc, #48]	@ (80003d4 <dio_setLED+0x90>)
 80003a2:	400b      	ands	r3, r1
 80003a4:	6153      	str	r3, [r2, #20]
        led_state &= ~(1 << index);
 80003a6:	2201      	movs	r2, #1
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	fa02 f303 	lsl.w	r3, r2, r3
 80003ae:	b25b      	sxtb	r3, r3
 80003b0:	43db      	mvns	r3, r3
 80003b2:	b25a      	sxtb	r2, r3
 80003b4:	4b08      	ldr	r3, [pc, #32]	@ (80003d8 <dio_setLED+0x94>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	b25b      	sxtb	r3, r3
 80003ba:	4013      	ands	r3, r2
 80003bc:	b25b      	sxtb	r3, r3
 80003be:	b2da      	uxtb	r2, r3
 80003c0:	4b05      	ldr	r3, [pc, #20]	@ (80003d8 <dio_setLED+0x94>)
 80003c2:	701a      	strb	r2, [r3, #0]
 80003c4:	e000      	b.n	80003c8 <dio_setLED+0x84>
    if (index < 0 || index > 7) return;
 80003c6:	bf00      	nop
    }
}
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	48001000 	.word	0x48001000
 80003d8:	20000020 	.word	0x20000020

080003dc <dio_getLEDState>:
    uint16_t bit = 1 << (8 + index);
    GPIOE->ODR ^= bit;
    led_state ^= (1 << index);
}

uint8_t dio_getLEDState(void) {
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
    return led_state;
 80003e0:	4b03      	ldr	r3, [pc, #12]	@ (80003f0 <dio_getLEDState+0x14>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	20000020 	.word	0x20000020

080003f4 <chase_led>:
#include "dio.h"

void chase_led() {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
    uint8_t current = dio_getLEDState();
 80003fa:	f7ff ffef 	bl	80003dc <dio_getLEDState>
 80003fe:	4603      	mov	r3, r0
 8000400:	70fb      	strb	r3, [r7, #3]
    current = (current == 0 || current >= 0x80) ? 0x01 : current << 1;
 8000402:	78fb      	ldrb	r3, [r7, #3]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d007      	beq.n	8000418 <chase_led+0x24>
 8000408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800040c:	2b00      	cmp	r3, #0
 800040e:	db03      	blt.n	8000418 <chase_led+0x24>
 8000410:	78fb      	ldrb	r3, [r7, #3]
 8000412:	005b      	lsls	r3, r3, #1
 8000414:	b2db      	uxtb	r3, r3
 8000416:	e000      	b.n	800041a <chase_led+0x26>
 8000418:	2301      	movs	r3, #1
 800041a:	70fb      	strb	r3, [r7, #3]

    for (int i = 0; i < 8; i++) {
 800041c:	2300      	movs	r3, #0
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	e011      	b.n	8000446 <chase_led+0x52>
        dio_setLED(i, (current >> i) & 1);
 8000422:	78fa      	ldrb	r2, [r7, #3]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	fa42 f303 	asr.w	r3, r2, r3
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	2b00      	cmp	r3, #0
 8000430:	bf14      	ite	ne
 8000432:	2301      	movne	r3, #1
 8000434:	2300      	moveq	r3, #0
 8000436:	b2db      	uxtb	r3, r3
 8000438:	4619      	mov	r1, r3
 800043a:	6878      	ldr	r0, [r7, #4]
 800043c:	f7ff ff82 	bl	8000344 <dio_setLED>
    for (int i = 0; i < 8; i++) {
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	3301      	adds	r3, #1
 8000444:	607b      	str	r3, [r7, #4]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2b07      	cmp	r3, #7
 800044a:	ddea      	ble.n	8000422 <chase_led+0x2e>
    }
}
 800044c:	bf00      	nop
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
	...

08000458 <main>:

int main(void) {
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
    dio_init(chase_led);
 800045c:	4802      	ldr	r0, [pc, #8]	@ (8000468 <main+0x10>)
 800045e:	f7ff ff01 	bl	8000264 <dio_init>

    while (1) {
 8000462:	bf00      	nop
 8000464:	e7fd      	b.n	8000462 <main+0xa>
 8000466:	bf00      	nop
 8000468:	080003f5 	.word	0x080003f5

0800046c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800046c:	480d      	ldr	r0, [pc, #52]	@ (80004a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800046e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000470:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000474:	480c      	ldr	r0, [pc, #48]	@ (80004a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000476:	490d      	ldr	r1, [pc, #52]	@ (80004ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000478:	4a0d      	ldr	r2, [pc, #52]	@ (80004b0 <LoopForever+0xe>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800047c:	e002      	b.n	8000484 <LoopCopyDataInit>

0800047e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800047e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000482:	3304      	adds	r3, #4

08000484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000488:	d3f9      	bcc.n	800047e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800048a:	4a0a      	ldr	r2, [pc, #40]	@ (80004b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800048c:	4c0a      	ldr	r4, [pc, #40]	@ (80004b8 <LoopForever+0x16>)
  movs r3, #0
 800048e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000490:	e001      	b.n	8000496 <LoopFillZerobss>

08000492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000494:	3204      	adds	r2, #4

08000496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000498:	d3fb      	bcc.n	8000492 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800049a:	f000 f811 	bl	80004c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800049e:	f7ff ffdb 	bl	8000458 <main>

080004a2 <LoopForever>:

LoopForever:
  b LoopForever
 80004a2:	e7fe      	b.n	80004a2 <LoopForever>
  ldr   r0, =_estack
 80004a4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80004a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004ac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004b0:	08000528 	.word	0x08000528
  ldr r2, =_sbss
 80004b4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004b8:	20000024 	.word	0x20000024

080004bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004bc:	e7fe      	b.n	80004bc <ADC1_2_IRQHandler>
	...

080004c0 <__libc_init_array>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	4d0d      	ldr	r5, [pc, #52]	@ (80004f8 <__libc_init_array+0x38>)
 80004c4:	4c0d      	ldr	r4, [pc, #52]	@ (80004fc <__libc_init_array+0x3c>)
 80004c6:	1b64      	subs	r4, r4, r5
 80004c8:	10a4      	asrs	r4, r4, #2
 80004ca:	2600      	movs	r6, #0
 80004cc:	42a6      	cmp	r6, r4
 80004ce:	d109      	bne.n	80004e4 <__libc_init_array+0x24>
 80004d0:	4d0b      	ldr	r5, [pc, #44]	@ (8000500 <__libc_init_array+0x40>)
 80004d2:	4c0c      	ldr	r4, [pc, #48]	@ (8000504 <__libc_init_array+0x44>)
 80004d4:	f000 f818 	bl	8000508 <_init>
 80004d8:	1b64      	subs	r4, r4, r5
 80004da:	10a4      	asrs	r4, r4, #2
 80004dc:	2600      	movs	r6, #0
 80004de:	42a6      	cmp	r6, r4
 80004e0:	d105      	bne.n	80004ee <__libc_init_array+0x2e>
 80004e2:	bd70      	pop	{r4, r5, r6, pc}
 80004e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e8:	4798      	blx	r3
 80004ea:	3601      	adds	r6, #1
 80004ec:	e7ee      	b.n	80004cc <__libc_init_array+0xc>
 80004ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f2:	4798      	blx	r3
 80004f4:	3601      	adds	r6, #1
 80004f6:	e7f2      	b.n	80004de <__libc_init_array+0x1e>
 80004f8:	08000520 	.word	0x08000520
 80004fc:	08000520 	.word	0x08000520
 8000500:	08000520 	.word	0x08000520
 8000504:	08000524 	.word	0x08000524

08000508 <_init>:
 8000508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050a:	bf00      	nop
 800050c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050e:	bc08      	pop	{r3}
 8000510:	469e      	mov	lr, r3
 8000512:	4770      	bx	lr

08000514 <_fini>:
 8000514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000516:	bf00      	nop
 8000518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800051a:	bc08      	pop	{r3}
 800051c:	469e      	mov	lr, r3
 800051e:	4770      	bx	lr
